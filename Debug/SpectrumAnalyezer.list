
SpectrumAnalyezer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001014  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a8c  08006a8c  000208c8  2**0
                  CONTENTS
  4 .ARM          00000000  08006a8c  08006a8c  000208c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a8c  08006a8c  000208c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008c8  20000000  08006a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e5c  200008c8  0800735c  000208c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800735c  00021724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000208c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000208f1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc42  00000000  00000000  00020934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268d  00000000  00000000  0002c576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0002ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b4  00000000  00000000  0002f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001908f  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103cf  00000000  00000000  00049303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ec8b  00000000  00000000  000596d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b24  00000000  00000000  000e8360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ebe84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200008c8 	.word	0x200008c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005a60 	.word	0x08005a60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200008cc 	.word	0x200008cc
 8000148:	08005a60 	.word	0x08005a60

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2f>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000900:	bf24      	itt	cs
 8000902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090a:	d90d      	bls.n	8000928 <__aeabi_d2f+0x30>
 800090c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800091c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000920:	bf08      	it	eq
 8000922:	f020 0001 	biceq.w	r0, r0, #1
 8000926:	4770      	bx	lr
 8000928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800092c:	d121      	bne.n	8000972 <__aeabi_d2f+0x7a>
 800092e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000932:	bfbc      	itt	lt
 8000934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000938:	4770      	bxlt	lr
 800093a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000942:	f1c2 0218 	rsb	r2, r2, #24
 8000946:	f1c2 0c20 	rsb	ip, r2, #32
 800094a:	fa10 f30c 	lsls.w	r3, r0, ip
 800094e:	fa20 f002 	lsr.w	r0, r0, r2
 8000952:	bf18      	it	ne
 8000954:	f040 0001 	orrne.w	r0, r0, #1
 8000958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000960:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000964:	ea40 000c 	orr.w	r0, r0, ip
 8000968:	fa23 f302 	lsr.w	r3, r3, r2
 800096c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000970:	e7cc      	b.n	800090c <__aeabi_d2f+0x14>
 8000972:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000976:	d107      	bne.n	8000988 <__aeabi_d2f+0x90>
 8000978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800097c:	bf1e      	ittt	ne
 800097e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000986:	4770      	bxne	lr
 8000988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800098c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_frsub>:
 8000998:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800099c:	e002      	b.n	80009a4 <__addsf3>
 800099e:	bf00      	nop

080009a0 <__aeabi_fsub>:
 80009a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a4 <__addsf3>:
 80009a4:	0042      	lsls	r2, r0, #1
 80009a6:	bf1f      	itttt	ne
 80009a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ac:	ea92 0f03 	teqne	r2, r3
 80009b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b8:	d06a      	beq.n	8000a90 <__addsf3+0xec>
 80009ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c2:	bfc1      	itttt	gt
 80009c4:	18d2      	addgt	r2, r2, r3
 80009c6:	4041      	eorgt	r1, r0
 80009c8:	4048      	eorgt	r0, r1
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	bfb8      	it	lt
 80009ce:	425b      	neglt	r3, r3
 80009d0:	2b19      	cmp	r3, #25
 80009d2:	bf88      	it	hi
 80009d4:	4770      	bxhi	lr
 80009d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4240      	negne	r0, r0
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f2:	bf18      	it	ne
 80009f4:	4249      	negne	r1, r1
 80009f6:	ea92 0f03 	teq	r2, r3
 80009fa:	d03f      	beq.n	8000a7c <__addsf3+0xd8>
 80009fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000a00:	fa41 fc03 	asr.w	ip, r1, r3
 8000a04:	eb10 000c 	adds.w	r0, r0, ip
 8000a08:	f1c3 0320 	rsb	r3, r3, #32
 8000a0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a14:	d502      	bpl.n	8000a1c <__addsf3+0x78>
 8000a16:	4249      	negs	r1, r1
 8000a18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a20:	d313      	bcc.n	8000a4a <__addsf3+0xa6>
 8000a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a26:	d306      	bcc.n	8000a36 <__addsf3+0x92>
 8000a28:	0840      	lsrs	r0, r0, #1
 8000a2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a2e:	f102 0201 	add.w	r2, r2, #1
 8000a32:	2afe      	cmp	r2, #254	; 0xfe
 8000a34:	d251      	bcs.n	8000ada <__addsf3+0x136>
 8000a36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3e:	bf08      	it	eq
 8000a40:	f020 0001 	biceq.w	r0, r0, #1
 8000a44:	ea40 0003 	orr.w	r0, r0, r3
 8000a48:	4770      	bx	lr
 8000a4a:	0049      	lsls	r1, r1, #1
 8000a4c:	eb40 0000 	adc.w	r0, r0, r0
 8000a50:	3a01      	subs	r2, #1
 8000a52:	bf28      	it	cs
 8000a54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a58:	d2ed      	bcs.n	8000a36 <__addsf3+0x92>
 8000a5a:	fab0 fc80 	clz	ip, r0
 8000a5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a62:	ebb2 020c 	subs.w	r2, r2, ip
 8000a66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6a:	bfaa      	itet	ge
 8000a6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a70:	4252      	neglt	r2, r2
 8000a72:	4318      	orrge	r0, r3
 8000a74:	bfbc      	itt	lt
 8000a76:	40d0      	lsrlt	r0, r2
 8000a78:	4318      	orrlt	r0, r3
 8000a7a:	4770      	bx	lr
 8000a7c:	f092 0f00 	teq	r2, #0
 8000a80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a84:	bf06      	itte	eq
 8000a86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8a:	3201      	addeq	r2, #1
 8000a8c:	3b01      	subne	r3, #1
 8000a8e:	e7b5      	b.n	80009fc <__addsf3+0x58>
 8000a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9e:	d021      	beq.n	8000ae4 <__addsf3+0x140>
 8000aa0:	ea92 0f03 	teq	r2, r3
 8000aa4:	d004      	beq.n	8000ab0 <__addsf3+0x10c>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	bf08      	it	eq
 8000aac:	4608      	moveq	r0, r1
 8000aae:	4770      	bx	lr
 8000ab0:	ea90 0f01 	teq	r0, r1
 8000ab4:	bf1c      	itt	ne
 8000ab6:	2000      	movne	r0, #0
 8000ab8:	4770      	bxne	lr
 8000aba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000abe:	d104      	bne.n	8000aca <__addsf3+0x126>
 8000ac0:	0040      	lsls	r0, r0, #1
 8000ac2:	bf28      	it	cs
 8000ac4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	4770      	bx	lr
 8000aca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ace:	bf3c      	itt	cc
 8000ad0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bxcc	lr
 8000ad6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ada:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ae8:	bf16      	itet	ne
 8000aea:	4608      	movne	r0, r1
 8000aec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af0:	4601      	movne	r1, r0
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	bf06      	itte	eq
 8000af6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afa:	ea90 0f01 	teqeq	r0, r1
 8000afe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_ui2f>:
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	e004      	b.n	8000b14 <__aeabi_i2f+0x8>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_i2f>:
 8000b0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	bf48      	it	mi
 8000b12:	4240      	negmi	r0, r0
 8000b14:	ea5f 0c00 	movs.w	ip, r0
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b20:	4601      	mov	r1, r0
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	e01c      	b.n	8000b62 <__aeabi_l2f+0x2a>

08000b28 <__aeabi_ul2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	e00a      	b.n	8000b4c <__aeabi_l2f+0x14>
 8000b36:	bf00      	nop

08000b38 <__aeabi_l2f>:
 8000b38:	ea50 0201 	orrs.w	r2, r0, r1
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__aeabi_l2f+0x14>
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	ea5f 0c01 	movs.w	ip, r1
 8000b50:	bf02      	ittt	eq
 8000b52:	4684      	moveq	ip, r0
 8000b54:	4601      	moveq	r1, r0
 8000b56:	2000      	moveq	r0, #0
 8000b58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b66:	fabc f28c 	clz	r2, ip
 8000b6a:	3a08      	subs	r2, #8
 8000b6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b70:	db10      	blt.n	8000b94 <__aeabi_l2f+0x5c>
 8000b72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b76:	4463      	add	r3, ip
 8000b78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b7c:	f1c2 0220 	rsb	r2, r2, #32
 8000b80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b84:	fa20 f202 	lsr.w	r2, r0, r2
 8000b88:	eb43 0002 	adc.w	r0, r3, r2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f102 0220 	add.w	r2, r2, #32
 8000b98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ba0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ba8:	eb43 0002 	adc.w	r0, r3, r2
 8000bac:	bf08      	it	eq
 8000bae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_fmul>:
 8000bb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc2:	ea92 0f0c 	teqne	r2, ip
 8000bc6:	ea93 0f0c 	teqne	r3, ip
 8000bca:	d06f      	beq.n	8000cac <__aeabi_fmul+0xf8>
 8000bcc:	441a      	add	r2, r3
 8000bce:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd2:	0240      	lsls	r0, r0, #9
 8000bd4:	bf18      	it	ne
 8000bd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bda:	d01e      	beq.n	8000c1a <__aeabi_fmul+0x66>
 8000bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000be8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf4:	bf3e      	ittt	cc
 8000bf6:	0049      	lslcc	r1, r1, #1
 8000bf8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bfc:	005b      	lslcc	r3, r3, #1
 8000bfe:	ea40 0001 	orr.w	r0, r0, r1
 8000c02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c06:	2afd      	cmp	r2, #253	; 0xfd
 8000c08:	d81d      	bhi.n	8000c46 <__aeabi_fmul+0x92>
 8000c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	4770      	bx	lr
 8000c1a:	f090 0f00 	teq	r0, #0
 8000c1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c22:	bf08      	it	eq
 8000c24:	0249      	lsleq	r1, r1, #9
 8000c26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c2e:	3a7f      	subs	r2, #127	; 0x7f
 8000c30:	bfc2      	ittt	gt
 8000c32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3a:	4770      	bxgt	lr
 8000c3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	3a01      	subs	r2, #1
 8000c46:	dc5d      	bgt.n	8000d04 <__aeabi_fmul+0x150>
 8000c48:	f112 0f19 	cmn.w	r2, #25
 8000c4c:	bfdc      	itt	le
 8000c4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c52:	4770      	bxle	lr
 8000c54:	f1c2 0200 	rsb	r2, r2, #0
 8000c58:	0041      	lsls	r1, r0, #1
 8000c5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c5e:	f1c2 0220 	rsb	r2, r2, #32
 8000c62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6a:	f140 0000 	adc.w	r0, r0, #0
 8000c6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c72:	bf08      	it	eq
 8000c74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c78:	4770      	bx	lr
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c82:	bf02      	ittt	eq
 8000c84:	0040      	lsleq	r0, r0, #1
 8000c86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8a:	3a01      	subeq	r2, #1
 8000c8c:	d0f9      	beq.n	8000c82 <__aeabi_fmul+0xce>
 8000c8e:	ea40 000c 	orr.w	r0, r0, ip
 8000c92:	f093 0f00 	teq	r3, #0
 8000c96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0049      	lsleq	r1, r1, #1
 8000c9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca2:	3b01      	subeq	r3, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fmul+0xe6>
 8000ca6:	ea41 010c 	orr.w	r1, r1, ip
 8000caa:	e78f      	b.n	8000bcc <__aeabi_fmul+0x18>
 8000cac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb0:	ea92 0f0c 	teq	r2, ip
 8000cb4:	bf18      	it	ne
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d00a      	beq.n	8000cd2 <__aeabi_fmul+0x11e>
 8000cbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc0:	bf18      	it	ne
 8000cc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cc6:	d1d8      	bne.n	8000c7a <__aeabi_fmul+0xc6>
 8000cc8:	ea80 0001 	eor.w	r0, r0, r1
 8000ccc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f090 0f00 	teq	r0, #0
 8000cd6:	bf17      	itett	ne
 8000cd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cdc:	4608      	moveq	r0, r1
 8000cde:	f091 0f00 	teqne	r1, #0
 8000ce2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ce6:	d014      	beq.n	8000d12 <__aeabi_fmul+0x15e>
 8000ce8:	ea92 0f0c 	teq	r2, ip
 8000cec:	d101      	bne.n	8000cf2 <__aeabi_fmul+0x13e>
 8000cee:	0242      	lsls	r2, r0, #9
 8000cf0:	d10f      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000cf2:	ea93 0f0c 	teq	r3, ip
 8000cf6:	d103      	bne.n	8000d00 <__aeabi_fmul+0x14c>
 8000cf8:	024b      	lsls	r3, r1, #9
 8000cfa:	bf18      	it	ne
 8000cfc:	4608      	movne	r0, r1
 8000cfe:	d108      	bne.n	8000d12 <__aeabi_fmul+0x15e>
 8000d00:	ea80 0001 	eor.w	r0, r0, r1
 8000d04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	4770      	bx	lr
 8000d12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fdiv>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d069      	beq.n	8000e08 <__aeabi_fdiv+0xec>
 8000d34:	eba2 0203 	sub.w	r2, r2, r3
 8000d38:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3c:	0249      	lsls	r1, r1, #9
 8000d3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d42:	d037      	beq.n	8000db4 <__aeabi_fdiv+0x98>
 8000d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf38      	it	cc
 8000d58:	005b      	lslcc	r3, r3, #1
 8000d5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d62:	428b      	cmp	r3, r1
 8000d64:	bf24      	itt	cs
 8000d66:	1a5b      	subcs	r3, r3, r1
 8000d68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d70:	bf24      	itt	cs
 8000d72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d7e:	bf24      	itt	cs
 8000d80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d8c:	bf24      	itt	cs
 8000d8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	bf18      	it	ne
 8000d9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d9e:	d1e0      	bne.n	8000d62 <__aeabi_fdiv+0x46>
 8000da0:	2afd      	cmp	r2, #253	; 0xfd
 8000da2:	f63f af50 	bhi.w	8000c46 <__aeabi_fmul+0x92>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbc:	327f      	adds	r2, #127	; 0x7f
 8000dbe:	bfc2      	ittt	gt
 8000dc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc8:	4770      	bxgt	lr
 8000dca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	e737      	b.n	8000c46 <__aeabi_fmul+0x92>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0040      	lsleq	r0, r0, #1
 8000de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000de6:	3a01      	subeq	r2, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fdiv+0xc2>
 8000dea:	ea40 000c 	orr.w	r0, r0, ip
 8000dee:	f093 0f00 	teq	r3, #0
 8000df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0049      	lsleq	r1, r1, #1
 8000dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dfe:	3b01      	subeq	r3, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fdiv+0xda>
 8000e02:	ea41 010c 	orr.w	r1, r1, ip
 8000e06:	e795      	b.n	8000d34 <__aeabi_fdiv+0x18>
 8000e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d108      	bne.n	8000e24 <__aeabi_fdiv+0x108>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	f47f af7d 	bne.w	8000d12 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	f47f af70 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e776      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e24:	ea93 0f0c 	teq	r3, ip
 8000e28:	d104      	bne.n	8000e34 <__aeabi_fdiv+0x118>
 8000e2a:	024b      	lsls	r3, r1, #9
 8000e2c:	f43f af4c 	beq.w	8000cc8 <__aeabi_fmul+0x114>
 8000e30:	4608      	mov	r0, r1
 8000e32:	e76e      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e38:	bf18      	it	ne
 8000e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	d1ca      	bne.n	8000dd6 <__aeabi_fdiv+0xba>
 8000e40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e44:	f47f af5c 	bne.w	8000d00 <__aeabi_fmul+0x14c>
 8000e48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e4c:	f47f af3c 	bne.w	8000cc8 <__aeabi_fmul+0x114>
 8000e50:	e75f      	b.n	8000d12 <__aeabi_fmul+0x15e>
 8000e52:	bf00      	nop

08000e54 <__gesf2>:
 8000e54:	f04f 3cff 	mov.w	ip, #4294967295
 8000e58:	e006      	b.n	8000e68 <__cmpsf2+0x4>
 8000e5a:	bf00      	nop

08000e5c <__lesf2>:
 8000e5c:	f04f 0c01 	mov.w	ip, #1
 8000e60:	e002      	b.n	8000e68 <__cmpsf2+0x4>
 8000e62:	bf00      	nop

08000e64 <__cmpsf2>:
 8000e64:	f04f 0c01 	mov.w	ip, #1
 8000e68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e78:	bf18      	it	ne
 8000e7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e7e:	d011      	beq.n	8000ea4 <__cmpsf2+0x40>
 8000e80:	b001      	add	sp, #4
 8000e82:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e86:	bf18      	it	ne
 8000e88:	ea90 0f01 	teqne	r0, r1
 8000e8c:	bf58      	it	pl
 8000e8e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e92:	bf88      	it	hi
 8000e94:	17c8      	asrhi	r0, r1, #31
 8000e96:	bf38      	it	cc
 8000e98:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e9c:	bf18      	it	ne
 8000e9e:	f040 0001 	orrne.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	d102      	bne.n	8000eb0 <__cmpsf2+0x4c>
 8000eaa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eae:	d105      	bne.n	8000ebc <__cmpsf2+0x58>
 8000eb0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb4:	d1e4      	bne.n	8000e80 <__cmpsf2+0x1c>
 8000eb6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eba:	d0e1      	beq.n	8000e80 <__cmpsf2+0x1c>
 8000ebc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_cfrcmple>:
 8000ec4:	4684      	mov	ip, r0
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	4661      	mov	r1, ip
 8000eca:	e7ff      	b.n	8000ecc <__aeabi_cfcmpeq>

08000ecc <__aeabi_cfcmpeq>:
 8000ecc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ece:	f7ff ffc9 	bl	8000e64 <__cmpsf2>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	bf48      	it	mi
 8000ed6:	f110 0f00 	cmnmi.w	r0, #0
 8000eda:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000edc <__aeabi_fcmpeq>:
 8000edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee0:	f7ff fff4 	bl	8000ecc <__aeabi_cfcmpeq>
 8000ee4:	bf0c      	ite	eq
 8000ee6:	2001      	moveq	r0, #1
 8000ee8:	2000      	movne	r0, #0
 8000eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eee:	bf00      	nop

08000ef0 <__aeabi_fcmplt>:
 8000ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef4:	f7ff ffea 	bl	8000ecc <__aeabi_cfcmpeq>
 8000ef8:	bf34      	ite	cc
 8000efa:	2001      	movcc	r0, #1
 8000efc:	2000      	movcs	r0, #0
 8000efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f02:	bf00      	nop

08000f04 <__aeabi_fcmple>:
 8000f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f08:	f7ff ffe0 	bl	8000ecc <__aeabi_cfcmpeq>
 8000f0c:	bf94      	ite	ls
 8000f0e:	2001      	movls	r0, #1
 8000f10:	2000      	movhi	r0, #0
 8000f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f16:	bf00      	nop

08000f18 <__aeabi_fcmpge>:
 8000f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f1c:	f7ff ffd2 	bl	8000ec4 <__aeabi_cfrcmple>
 8000f20:	bf94      	ite	ls
 8000f22:	2001      	movls	r0, #1
 8000f24:	2000      	movhi	r0, #0
 8000f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2a:	bf00      	nop

08000f2c <__aeabi_fcmpgt>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff ffc8 	bl	8000ec4 <__aeabi_cfrcmple>
 8000f34:	bf34      	ite	cc
 8000f36:	2001      	movcc	r0, #1
 8000f38:	2000      	movcs	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_f2iz>:
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f48:	d30f      	bcc.n	8000f6a <__aeabi_f2iz+0x2a>
 8000f4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f52:	d90d      	bls.n	8000f70 <__aeabi_f2iz+0x30>
 8000f54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	bf18      	it	ne
 8000f66:	4240      	negne	r0, r0
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2iz+0x3a>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d105      	bne.n	8000f86 <__aeabi_f2iz+0x46>
 8000f7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f7e:	bf08      	it	eq
 8000f80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <__aeabi_f2uiz>:
 8000f8c:	0042      	lsls	r2, r0, #1
 8000f8e:	d20e      	bcs.n	8000fae <__aeabi_f2uiz+0x22>
 8000f90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f94:	d30b      	bcc.n	8000fae <__aeabi_f2uiz+0x22>
 8000f96:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f9e:	d409      	bmi.n	8000fb4 <__aeabi_f2uiz+0x28>
 8000fa0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2uiz+0x32>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d102      	bne.n	8000fc4 <__aeabi_f2uiz+0x38>
 8000fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc2:	4770      	bx	lr
 8000fc4:	f04f 0000 	mov.w	r0, #0
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <WriteToADF4351>:
	while (length >0)
    	length--;
}

void WriteToADF4351(u8 count, u8 *buf)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
	u8 ValueToWrite = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
	u8 i = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73bb      	strb	r3, [r7, #14]
	u8 j = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	737b      	strb	r3, [r7, #13]

//	ADF_Output_GPIOInit();

	ADF4351_CE = 1;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <WriteToADF4351+0xc0>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
	delay_us(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 fa6e 	bl	80014cc <delay_us>
	ADF4351_CLK = 0;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <WriteToADF4351+0xc4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
	ADF4351_LE = 0;
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <WriteToADF4351+0xc8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
	delay_us(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fa65 	bl	80014cc <delay_us>

	for(i = count; i>0; i--)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	73bb      	strb	r3, [r7, #14]
 8001006:	e02b      	b.n	8001060 <WriteToADF4351+0x94>
	{
		ValueToWrite = *(buf+i-1);
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	3b01      	subs	r3, #1
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	73fb      	strb	r3, [r7, #15]
		for(j=0; j<8; j++)
 8001014:	2300      	movs	r3, #0
 8001016:	737b      	strb	r3, [r7, #13]
 8001018:	e01c      	b.n	8001054 <WriteToADF4351+0x88>
		{
			if(0x80 == (ValueToWrite & 0x80))
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	da03      	bge.n	800102a <WriteToADF4351+0x5e>
			{
				ADF4351_OUTPUT_DATA = 1;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <WriteToADF4351+0xcc>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e002      	b.n	8001030 <WriteToADF4351+0x64>
			}
			else
			{
				ADF4351_OUTPUT_DATA = 0;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <WriteToADF4351+0xcc>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
			}
			delay_us(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f000 fa4b 	bl	80014cc <delay_us>
			ADF4351_CLK = 1;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <WriteToADF4351+0xc4>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
			delay_us(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f000 fa45 	bl	80014cc <delay_us>
			ValueToWrite <<= 1;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
			ADF4351_CLK = 0;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <WriteToADF4351+0xc4>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
		for(j=0; j<8; j++)
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	3301      	adds	r3, #1
 8001052:	737b      	strb	r3, [r7, #13]
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	2b07      	cmp	r3, #7
 8001058:	d9df      	bls.n	800101a <WriteToADF4351+0x4e>
	for(i = count; i>0; i--)
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	3b01      	subs	r3, #1
 800105e:	73bb      	strb	r3, [r7, #14]
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1d0      	bne.n	8001008 <WriteToADF4351+0x3c>
		}
	}
	ADF4351_OUTPUT_DATA = 0;
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <WriteToADF4351+0xcc>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
	delay_us(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f000 fa2d 	bl	80014cc <delay_us>
	ADF4351_LE = 1;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <WriteToADF4351+0xc8>)
 8001074:	2201      	movs	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
	delay_us(1);
 8001078:	2001      	movs	r0, #1
 800107a:	f000 fa27 	bl	80014cc <delay_us>
	ADF4351_LE = 0;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <WriteToADF4351+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	422181b0 	.word	0x422181b0
 8001090:	422181bc 	.word	0x422181bc
 8001094:	422181b4 	.word	0x422181b4
 8001098:	422181b8 	.word	0x422181b8

0800109c <ADF4351Init>:
//	ADF4351_LE = 0;
//}


void ADF4351Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	u8 buf[4] = {0,0,0,0};
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]

	//ADF_Output_GPIOInit();

	buf[3] = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	71fb      	strb	r3, [r7, #7]
	buf[2] = 0x58;
 80010aa:	2358      	movs	r3, #88	; 0x58
 80010ac:	71bb      	strb	r3, [r7, #6]
	buf[1] = 0x00;				//write communication register 0x00580005 to control the progress
 80010ae:	2300      	movs	r3, #0
 80010b0:	717b      	strb	r3, [r7, #5]
 	buf[0] = 0x05;				//to write Register 5 to set digital lock detector
 80010b2:	2305      	movs	r3, #5
 80010b4:	713b      	strb	r3, [r7, #4]
	WriteToADF4351(4,buf);
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	2004      	movs	r0, #4
 80010bc:	f7ff ff86 	bl	8000fcc <WriteToADF4351>

	buf[3] = 0x00;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
	buf[2] = 0xec;				//(DB23=1)The signal is taken from the VCO directly;(DB22-20:4H)the RF divider is 16;(DB19-12:50H)R is 80
 80010c4:	23ec      	movs	r3, #236	; 0xec
 80010c6:	71bb      	strb	r3, [r7, #6]
	buf[1] = 0x80;				//(DB11=0)VCO powerd up;
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	717b      	strb	r3, [r7, #5]
 	buf[0] = 0x3C;				//(DB5=1)RF output is enabled;(DB4-3=3H)Output power level is 5
 80010cc:	233c      	movs	r3, #60	; 0x3c
 80010ce:	713b      	strb	r3, [r7, #4]
	WriteToADF4351(4,buf);
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	2004      	movs	r0, #4
 80010d6:	f7ff ff79 	bl	8000fcc <WriteToADF4351>

	buf[3] = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	71fb      	strb	r3, [r7, #7]
	buf[2] = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	71bb      	strb	r3, [r7, #6]
	buf[1] = 0x04;				//(DB14-3:96H)clock divider value is 150.
 80010e2:	2304      	movs	r3, #4
 80010e4:	717b      	strb	r3, [r7, #5]
 	buf[0] = 0xB3;
 80010e6:	23b3      	movs	r3, #179	; 0xb3
 80010e8:	713b      	strb	r3, [r7, #4]
	WriteToADF4351(4,buf);
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	2004      	movs	r0, #4
 80010f0:	f7ff ff6c 	bl	8000fcc <WriteToADF4351>

	buf[3] = 0x00;
 80010f4:	2300      	movs	r3, #0
 80010f6:	71fb      	strb	r3, [r7, #7]
	buf[2] = 0x01;				//(DB6=1)set PD polarity is positive;(DB7=1)LDP is 6nS;
 80010f8:	2301      	movs	r3, #1
 80010fa:	71bb      	strb	r3, [r7, #6]
	buf[1] = 0x0E;				//(DB8=0)enable fractional-N digital lock detect;
 80010fc:	230e      	movs	r3, #14
 80010fe:	717b      	strb	r3, [r7, #5]
 	buf[0] = 0x42;				//(DB12-9:7H)set Icp 2.50 mA;
 8001100:	2342      	movs	r3, #66	; 0x42
 8001102:	713b      	strb	r3, [r7, #4]
	WriteToADF4351(4,buf);		//(DB23-14:1H)R counter is 1
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	2004      	movs	r0, #4
 800110a:	f7ff ff5f 	bl	8000fcc <WriteToADF4351>

	buf[3] = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
	buf[2] = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	71bb      	strb	r3, [r7, #6]
	buf[1] = 0x80;			   //(DB14-3:6H)MOD counter is 6;
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	717b      	strb	r3, [r7, #5]
 	buf[0] = 0x29;			   //(DB26-15:6H)PHASE word is 1,neither the phase resync
 800111a:	2329      	movs	r3, #41	; 0x29
 800111c:	713b      	strb	r3, [r7, #4]
	WriteToADF4351(4,buf);	   //nor the spurious optimization functions are being used
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	2004      	movs	r0, #4
 8001124:	f7ff ff52 	bl	8000fcc <WriteToADF4351>
							   //(DB27=1)prescaler value is 8/9

	buf[3] = 0x00;
 8001128:	2300      	movs	r3, #0
 800112a:	71fb      	strb	r3, [r7, #7]
	buf[2] = 0x2c;
 800112c:	232c      	movs	r3, #44	; 0x2c
 800112e:	71bb      	strb	r3, [r7, #6]
	buf[1] = 0x80;
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	717b      	strb	r3, [r7, #5]
 	buf[0] = 0x18;				//(DB14-3:0H)FRAC value is 0;
 8001134:	2318      	movs	r3, #24
 8001136:	713b      	strb	r3, [r7, #4]
	WriteToADF4351(4,buf);		//(DB30-15:140H)INT value is 320;
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	2004      	movs	r0, #4
 800113e:	f7ff ff45 	bl	8000fcc <WriteToADF4351>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <WriteOneRegToADF4351>:
void WriteOneRegToADF4351(u32 Regster)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	u8 buf[4] = {0,0,0,0};
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
	buf[3] = (u8)((Regster>>24)&(0X000000FF));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	0e1b      	lsrs	r3, r3, #24
 800115a:	b2db      	uxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
	buf[2] = (u8)((Regster>>16)&(0X000000FF));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0c1b      	lsrs	r3, r3, #16
 8001162:	b2db      	uxtb	r3, r3
 8001164:	73bb      	strb	r3, [r7, #14]
	buf[1] = (u8)((Regster>>8) &(0X000000FF));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b2db      	uxtb	r3, r3
 800116c:	737b      	strb	r3, [r7, #13]
	buf[0] = (u8)((Regster)&(0X000000FF));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	733b      	strb	r3, [r7, #12]
	WriteToADF4351(4,buf);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	2004      	movs	r0, #4
 800117c:	f7ff ff26 	bl	8000fcc <WriteToADF4351>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <ADF4351WriteFreq>:
	WriteOneRegToADF4351(ADF4351_R3);
	WriteOneRegToADF4351(ADF4351_R5);
}

void ADF4351WriteFreq(float Fre)		//	fre单位MHz -> (xx.x) M Hz
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	u16 Fre_temp, N_Mul = 1, Mul_Core = 0;
 8001190:	2301      	movs	r3, #1
 8001192:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001194:	2300      	movs	r3, #0
 8001196:	85bb      	strh	r3, [r7, #44]	; 0x2c
	u16 INT_Fre, Frac_temp, Mod_temp, i;
	u32 W_ADF4351_R0 = 0, W_ADF4351_R1 = 0, W_ADF4351_R4 = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
	float multiple;

	if(Fre < 35.0)
 80011a4:	496e      	ldr	r1, [pc, #440]	; (8001360 <ADF4351WriteFreq+0x1d8>)
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fea2 	bl	8000ef0 <__aeabi_fcmplt>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <ADF4351WriteFreq+0x2e>
		Fre = 35.0;
 80011b2:	4b6b      	ldr	r3, [pc, #428]	; (8001360 <ADF4351WriteFreq+0x1d8>)
 80011b4:	607b      	str	r3, [r7, #4]
	if(Fre > 4400.0)
 80011b6:	496b      	ldr	r1, [pc, #428]	; (8001364 <ADF4351WriteFreq+0x1dc>)
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff feb7 	bl	8000f2c <__aeabi_fcmpgt>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <ADF4351WriteFreq+0x40>
		Fre = 4400.0;
 80011c4:	4b67      	ldr	r3, [pc, #412]	; (8001364 <ADF4351WriteFreq+0x1dc>)
 80011c6:	607b      	str	r3, [r7, #4]
	Mod_temp = 1000;
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	853b      	strh	r3, [r7, #40]	; 0x28
	Fre = ((float)((u32)(Fre*10)))/10;
 80011ce:	4966      	ldr	r1, [pc, #408]	; (8001368 <ADF4351WriteFreq+0x1e0>)
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fcef 	bl	8000bb4 <__aeabi_fmul>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fed7 	bl	8000f8c <__aeabi_f2uiz>
 80011de:	4603      	mov	r3, r0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fc8f 	bl	8000b04 <__aeabi_ui2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	495f      	ldr	r1, [pc, #380]	; (8001368 <ADF4351WriteFreq+0x1e0>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fd96 	bl	8000d1c <__aeabi_fdiv>
 80011f0:	4603      	mov	r3, r0
 80011f2:	607b      	str	r3, [r7, #4]

	Fre_temp = Fre;
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff fec9 	bl	8000f8c <__aeabi_f2uiz>
 80011fa:	4603      	mov	r3, r0
 80011fc:	82fb      	strh	r3, [r7, #22]
	for(i = 0; i < 10; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001202:	e018      	b.n	8001236 <ADF4351WriteFreq+0xae>
	{
		if(((Fre_temp*N_Mul) >= 2199.9) && ((Fre_temp*N_Mul) <= 4400.1))
 8001204:	8afb      	ldrh	r3, [r7, #22]
 8001206:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001208:	fb02 f303 	mul.w	r3, r2, r3
 800120c:	f640 0297 	movw	r2, #2199	; 0x897
 8001210:	4293      	cmp	r3, r2
 8001212:	dd07      	ble.n	8001224 <ADF4351WriteFreq+0x9c>
 8001214:	8afb      	ldrh	r3, [r7, #22]
 8001216:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	f241 1230 	movw	r2, #4400	; 0x1130
 8001220:	4293      	cmp	r3, r2
 8001222:	dd0c      	ble.n	800123e <ADF4351WriteFreq+0xb6>
			break;
		Mul_Core++;
 8001224:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001226:	3301      	adds	r3, #1
 8001228:	85bb      	strh	r3, [r7, #44]	; 0x2c
		N_Mul = N_Mul*2;
 800122a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(i = 0; i < 10; i++)
 8001230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001232:	3301      	adds	r3, #1
 8001234:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001236:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001238:	2b09      	cmp	r3, #9
 800123a:	d9e3      	bls.n	8001204 <ADF4351WriteFreq+0x7c>
 800123c:	e000      	b.n	8001240 <ADF4351WriteFreq+0xb8>
			break;
 800123e:	bf00      	nop
	}

	multiple = (Fre*N_Mul)/25;		//25：鉴相频率，板载100M参考，经寄存器4分频得25M鉴相。若用户更改为80M参考输入，需将25改为20；10M参考输入，需将25改为2.5，以此类推。。。
 8001240:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fc62 	bl	8000b0c <__aeabi_i2f>
 8001248:	4603      	mov	r3, r0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fcb1 	bl	8000bb4 <__aeabi_fmul>
 8001252:	4603      	mov	r3, r0
 8001254:	4945      	ldr	r1, [pc, #276]	; (800136c <ADF4351WriteFreq+0x1e4>)
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fd60 	bl	8000d1c <__aeabi_fdiv>
 800125c:	4603      	mov	r3, r0
 800125e:	613b      	str	r3, [r7, #16]
	INT_Fre = (u16)multiple;
 8001260:	6938      	ldr	r0, [r7, #16]
 8001262:	f7ff fe93 	bl	8000f8c <__aeabi_f2uiz>
 8001266:	4603      	mov	r3, r0
 8001268:	81fb      	strh	r3, [r7, #14]
	Frac_temp = ((u32)(multiple*1000))%1000;
 800126a:	4941      	ldr	r1, [pc, #260]	; (8001370 <ADF4351WriteFreq+0x1e8>)
 800126c:	6938      	ldr	r0, [r7, #16]
 800126e:	f7ff fca1 	bl	8000bb4 <__aeabi_fmul>
 8001272:	4603      	mov	r3, r0
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe89 	bl	8000f8c <__aeabi_f2uiz>
 800127a:	4602      	mov	r2, r0
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <ADF4351WriteFreq+0x1ec>)
 800127e:	fba3 1302 	umull	r1, r3, r3, r2
 8001282:	099b      	lsrs	r3, r3, #6
 8001284:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	857b      	strh	r3, [r7, #42]	; 0x2a
	while(((Frac_temp%5) == 0) && ((Mod_temp%5) == 0))
 8001290:	e00b      	b.n	80012aa <ADF4351WriteFreq+0x122>
	{
		Frac_temp = Frac_temp/5;
 8001292:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001294:	4a38      	ldr	r2, [pc, #224]	; (8001378 <ADF4351WriteFreq+0x1f0>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	857b      	strh	r3, [r7, #42]	; 0x2a
		Mod_temp = Mod_temp/5;
 800129e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012a0:	4a35      	ldr	r2, [pc, #212]	; (8001378 <ADF4351WriteFreq+0x1f0>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	853b      	strh	r3, [r7, #40]	; 0x28
	while(((Frac_temp%5) == 0) && ((Mod_temp%5) == 0))
 80012aa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <ADF4351WriteFreq+0x1f0>)
 80012ae:	fba3 1302 	umull	r1, r3, r3, r2
 80012b2:	0899      	lsrs	r1, r3, #2
 80012b4:	460b      	mov	r3, r1
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d112      	bne.n	80012e8 <ADF4351WriteFreq+0x160>
 80012c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <ADF4351WriteFreq+0x1f0>)
 80012c6:	fba3 1302 	umull	r1, r3, r3, r2
 80012ca:	0899      	lsrs	r1, r3, #2
 80012cc:	460b      	mov	r3, r1
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0db      	beq.n	8001292 <ADF4351WriteFreq+0x10a>
	}
	while(((Frac_temp%2) == 0)&&((Mod_temp%2) == 0))
 80012da:	e005      	b.n	80012e8 <ADF4351WriteFreq+0x160>
	{
		Frac_temp = Frac_temp/2;
 80012dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	857b      	strh	r3, [r7, #42]	; 0x2a
		Mod_temp = Mod_temp/2;
 80012e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012e4:	085b      	lsrs	r3, r3, #1
 80012e6:	853b      	strh	r3, [r7, #40]	; 0x28
	while(((Frac_temp%2) == 0)&&((Mod_temp%2) == 0))
 80012e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d105      	bne.n	8001300 <ADF4351WriteFreq+0x178>
 80012f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0ed      	beq.n	80012dc <ADF4351WriteFreq+0x154>
	}

	Mul_Core %= 7;
 8001300:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <ADF4351WriteFreq+0x1f4>)
 8001304:	fba3 1302 	umull	r1, r3, r3, r2
 8001308:	1ad1      	subs	r1, r2, r3
 800130a:	0849      	lsrs	r1, r1, #1
 800130c:	440b      	add	r3, r1
 800130e:	0899      	lsrs	r1, r3, #2
 8001310:	460b      	mov	r3, r1
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a5b      	subs	r3, r3, r1
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	85bb      	strh	r3, [r7, #44]	; 0x2c
	W_ADF4351_R0 = (INT_Fre<<15)+(Frac_temp<<3);
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	03da      	lsls	r2, r3, #15
 800131e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	623b      	str	r3, [r7, #32]
	W_ADF4351_R1 = ADF4351_R1_Base + (Mod_temp<<3);
 8001326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800132e:	3301      	adds	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
	W_ADF4351_R4 = ADF4351_R4_ON + (Mul_Core<<20);
 8001332:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001334:	051b      	lsls	r3, r3, #20
 8001336:	461a      	mov	r2, r3
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <ADF4351WriteFreq+0x1f8>)
 800133a:	4413      	add	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]


//	WriteOneRegToADF4351(ADF4351_PD_OFF); //ADF4351_RF_OFF
//	WriteOneRegToADF4351((u32)(ADF4351_R4_OFF + (6<<20)));
	WriteOneRegToADF4351(ADF4351_RF_OFF);
 800133e:	4811      	ldr	r0, [pc, #68]	; (8001384 <ADF4351WriteFreq+0x1fc>)
 8001340:	f7ff ff03 	bl	800114a <WriteOneRegToADF4351>
	WriteOneRegToADF4351(W_ADF4351_R1);
 8001344:	69f8      	ldr	r0, [r7, #28]
 8001346:	f7ff ff00 	bl	800114a <WriteOneRegToADF4351>
	WriteOneRegToADF4351(W_ADF4351_R0);
 800134a:	6a38      	ldr	r0, [r7, #32]
 800134c:	f7ff fefd 	bl	800114a <WriteOneRegToADF4351>
	WriteOneRegToADF4351(W_ADF4351_R4);
 8001350:	69b8      	ldr	r0, [r7, #24]
 8001352:	f7ff fefa 	bl	800114a <WriteOneRegToADF4351>
//	WriteOneRegToADF4351(ADF4351_PD_ON);
}
 8001356:	bf00      	nop
 8001358:	3730      	adds	r7, #48	; 0x30
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	420c0000 	.word	0x420c0000
 8001364:	45898000 	.word	0x45898000
 8001368:	41200000 	.word	0x41200000
 800136c:	41c80000 	.word	0x41c80000
 8001370:	447a0000 	.word	0x447a0000
 8001374:	10624dd3 	.word	0x10624dd3
 8001378:	cccccccd 	.word	0xcccccccd
 800137c:	24924925 	.word	0x24924925
 8001380:	008c803c 	.word	0x008c803c
 8001384:	00ec801c 	.word	0x00ec801c

08001388 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_ADC1_Init+0x74>)
 800139a:	4a19      	ldr	r2, [pc, #100]	; (8001400 <MX_ADC1_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_ADC1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_ADC1_Init+0x74>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_ADC1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_ADC1_Init+0x74>)
 80013b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_ADC1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_ADC1_Init+0x74>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_ADC1_Init+0x74>)
 80013c6:	f001 ff93 	bl	80032f0 <HAL_ADC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013d0:	f001 f815 	bl	80023fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d8:	2301      	movs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_ADC1_Init+0x74>)
 80013e6:	f002 f915 	bl	8003614 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013f0:	f001 f805 	bl	80023fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200008ec 	.word	0x200008ec
 8001400:	40012400 	.word	0x40012400

08001404 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_ADC_MspInit+0x6c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d121      	bne.n	8001468 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_ADC_MspInit+0x70>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_ADC_MspInit+0x70>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_ADC_MspInit+0x70>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_ADC_MspInit+0x70>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <HAL_ADC_MspInit+0x70>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_ADC_MspInit+0x70>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001458:	2303      	movs	r3, #3
 800145a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_ADC_MspInit+0x74>)
 8001464:	f002 fb78 	bl	8003b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40012400 	.word	0x40012400
 8001474:	40021000 	.word	0x40021000
 8001478:	40010800 	.word	0x40010800

0800147c <delay_init>:
* 入口参数 ---> SYSCLK：系统工作最高的频率。单位M
* 返回数值 ---> none
* 功能说明 ---> 主要是初始化SysTick寄存器
**********************************************************/
void delay_init(uint8_t SYSCLK)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL &= 0xfffffffb;	//bit2清空，选择外部时钟HCLK/8，停止计数
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <delay_init+0x44>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <delay_init+0x44>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6013      	str	r3, [r2, #0]
	fac_us = SYSCLK/8;	//系统时钟的1/8
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <delay_init+0x48>)
 800149a:	701a      	strb	r2, [r3, #0]
	fac_ms = (uint16_t)fac_us*1000;	//ms需要的SysTick时钟数
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <delay_init+0x48>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	0152      	lsls	r2, r2, #5
 80014a6:	1ad2      	subs	r2, r2, r3
 80014a8:	0092      	lsls	r2, r2, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <delay_init+0x4c>)
 80014b2:	801a      	strh	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010
 80014c4:	2000091c 	.word	0x2000091c
 80014c8:	2000091e 	.word	0x2000091e

080014cc <delay_us>:
* 入口参数 ---> nus：要延时的us数
* 返回数值 ---> none
* 功能说明 ---> none
**********************************************************/		    								   
void delay_us(uint32_t nus)
{		
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	uint32_t temp;
		    	 
	SysTick->LOAD = nus*fac_us; //时间加载
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <delay_us+0x60>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <delay_us+0x64>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	fb01 f303 	mul.w	r3, r1, r3
 80014e2:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0x00;        //清空计数器
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <delay_us+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;      //开始倒数
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <delay_us+0x64>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <delay_us+0x64>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6013      	str	r3, [r2, #0]
	do
	{
		temp = SysTick->CTRL;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <delay_us+0x64>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));	//等待时间到达
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <delay_us+0x44>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f2      	beq.n	80014f6 <delay_us+0x2a>
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;	//关闭计数器
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <delay_us+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <delay_us+0x64>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0x00;	//清空计数器
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <delay_us+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	2000091c 	.word	0x2000091c
 8001530:	e000e010 	.word	0xe000e010

08001534 <delay_ms>:
*               nms <= 0xffffff*8*1000/SYSCLK
*               SYSCLK单位为Hz,nms单位为ms
*               注意nms的范围 0 ~ 1864(72M情况下)
**********************************************************/ 
void delay_ms(uint16_t nms)
{	 		  	  
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
			   
	SysTick->LOAD = (uint32_t)nms*fac_ms;	//时间加载(SysTick->LOAD为24bit)
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	4a15      	ldr	r2, [pc, #84]	; (8001598 <delay_ms+0x64>)
 8001542:	8812      	ldrh	r2, [r2, #0]
 8001544:	4611      	mov	r1, r2
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <delay_ms+0x68>)
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0x00;           //清空计数器
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <delay_ms+0x68>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;      //开始倒数
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <delay_ms+0x68>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a10      	ldr	r2, [pc, #64]	; (800159c <delay_ms+0x68>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6013      	str	r3, [r2, #0]
	do
	{
		temp = SysTick->CTRL;
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <delay_ms+0x68>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));	//等待时间到达
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <delay_ms+0x46>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f2      	beq.n	8001560 <delay_ms+0x2c>
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;	//关闭计数器
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <delay_ms+0x68>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a07      	ldr	r2, [pc, #28]	; (800159c <delay_ms+0x68>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0x00;	//清空计数器
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <delay_ms+0x68>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2000091e 	.word	0x2000091e
 800159c:	e000e010 	.word	0xe000e010

080015a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a3f      	ldr	r2, [pc, #252]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015cc:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a39      	ldr	r2, [pc, #228]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015d2:	f043 0320 	orr.w	r3, r3, #32
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a33      	ldr	r2, [pc, #204]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <MX_GPIO_Init+0x118>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a2d      	ldr	r2, [pc, #180]	; (80016b8 <MX_GPIO_Init+0x118>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <MX_GPIO_Init+0x118>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	21f0      	movs	r1, #240	; 0xf0
 8001618:	4828      	ldr	r0, [pc, #160]	; (80016bc <MX_GPIO_Init+0x11c>)
 800161a:	f002 fc38 	bl	8003e8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001624:	4826      	ldr	r0, [pc, #152]	; (80016c0 <MX_GPIO_Init+0x120>)
 8001626:	f002 fc32 	bl	8003e8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800162a:	230e      	movs	r3, #14
 800162c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001632:	2301      	movs	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	481f      	ldr	r0, [pc, #124]	; (80016bc <MX_GPIO_Init+0x11c>)
 800163e:	f002 fa8b 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001642:	23f0      	movs	r3, #240	; 0xf0
 8001644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800164e:	2301      	movs	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4619      	mov	r1, r3
 8001658:	4818      	ldr	r0, [pc, #96]	; (80016bc <MX_GPIO_Init+0x11c>)
 800165a:	f002 fa7d 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800165e:	2303      	movs	r3, #3
 8001660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001666:	2301      	movs	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4619      	mov	r1, r3
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <MX_GPIO_Init+0x120>)
 8001672:	f002 fa71 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001676:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_GPIO_Init+0x120>)
 8001690:	f002 fa62 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_GPIO_Init+0x11c>)
 80016aa:	f002 fa55 	bl	8003b58 <HAL_GPIO_Init>

}
 80016ae:	bf00      	nop
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010800 	.word	0x40010800
 80016c0:	40010c00 	.word	0x40010c00

080016c4 <Change_GPIOCode>:
u32 KEY_Trg;
u32 KEY_Cont=0;
u32 Trg_state = NO;

u32 Change_GPIOCode(void)//refresh keycode scan
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	u32 GPIO_Data = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
	GPIO_Data += HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) << 4 ;	//K5 =>PB1
 80016ce:	2102      	movs	r1, #2
 80016d0:	481a      	ldr	r0, [pc, #104]	; (800173c <Change_GPIOCode+0x78>)
 80016d2:	f002 fbc5 	bl	8003e60 <HAL_GPIO_ReadPin>
 80016d6:	4603      	mov	r3, r0
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	461a      	mov	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	607b      	str	r3, [r7, #4]
	GPIO_Data += HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) << 3;	//K4 =>PB0
 80016e2:	2101      	movs	r1, #1
 80016e4:	4815      	ldr	r0, [pc, #84]	; (800173c <Change_GPIOCode+0x78>)
 80016e6:	f002 fbbb 	bl	8003e60 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	461a      	mov	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	607b      	str	r3, [r7, #4]

	GPIO_Data += HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3) << 2;	//K3 =>PA3
 80016f6:	2108      	movs	r1, #8
 80016f8:	4811      	ldr	r0, [pc, #68]	; (8001740 <Change_GPIOCode+0x7c>)
 80016fa:	f002 fbb1 	bl	8003e60 <HAL_GPIO_ReadPin>
 80016fe:	4603      	mov	r3, r0
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	607b      	str	r3, [r7, #4]
	GPIO_Data += HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2) << 1;	//K2 =>PA2
 800170a:	2104      	movs	r1, #4
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <Change_GPIOCode+0x7c>)
 800170e:	f002 fba7 	bl	8003e60 <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	607b      	str	r3, [r7, #4]
	GPIO_Data += HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);		//K1 =>PA1
 800171e:	2102      	movs	r1, #2
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <Change_GPIOCode+0x7c>)
 8001722:	f002 fb9d 	bl	8003e60 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	607b      	str	r3, [r7, #4]
	return GPIO_Data;// 0x0000 00_000X XXXX
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40010c00 	.word	0x40010c00
 8001740:	40010800 	.word	0x40010800

08001744 <KeyRead>:
u32 KeyRead(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
    u32 ReadData = Change_GPIOCode();
 800174a:	f7ff ffbb 	bl	80016c4 <Change_GPIOCode>
 800174e:	6078      	str	r0, [r7, #4]
    KEY_Trg = ReadData & (ReadData ^ KEY_Cont);    //KEY_Cont代表上一时刻的ReadData
 8001750:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <KeyRead+0x180>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	43da      	mvns	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4013      	ands	r3, r2
 800175a:	4a5b      	ldr	r2, [pc, #364]	; (80018c8 <KeyRead+0x184>)
 800175c:	6013      	str	r3, [r2, #0]
	//KEY_Trg体现按键变化(按下或松�??)
    KEY_Cont = ReadData;
 800175e:	4a59      	ldr	r2, [pc, #356]	; (80018c4 <KeyRead+0x180>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6013      	str	r3, [r2, #0]

	if(!Trg_state)
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <KeyRead+0x188>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <KeyRead+0x32>
		key_Trgtime = KEY_Sys_Timer + T_10mS;//按下的时�??+10ms，用来确认松�???消抖
 800176c:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <KeyRead+0x18c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	330a      	adds	r3, #10
 8001772:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <KeyRead+0x190>)
 8001774:	6013      	str	r3, [r2, #0]

	if(KEY_Trg)//按键松开
 8001776:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <KeyRead+0x184>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <KeyRead+0x40>
		Trg_state = YES;
 800177e:	4b53      	ldr	r3, [pc, #332]	; (80018cc <KeyRead+0x188>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

	if(Trg_state)
 8001784:	4b51      	ldr	r3, [pc, #324]	; (80018cc <KeyRead+0x188>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d04b      	beq.n	8001824 <KeyRead+0xe0>
	{
		if((KEY_Sys_Timer > key_Trgtime)&&(KEY_Sys_Timer<(((u32)0-T_10mS))))  //消抖 && 确保中断计数未溢
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <KeyRead+0x18c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <KeyRead+0x190>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d945      	bls.n	8001824 <KeyRead+0xe0>
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <KeyRead+0x18c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f113 0f0b 	cmn.w	r3, #11
 80017a0:	d840      	bhi.n	8001824 <KeyRead+0xe0>
		{
			switch(KEY_Cont)
 80017a2:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <KeyRead+0x180>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3b0f      	subs	r3, #15
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d837      	bhi.n	800181c <KeyRead+0xd8>
 80017ac:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <KeyRead+0x70>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	08001815 	.word	0x08001815
 80017b8:	0800181d 	.word	0x0800181d
 80017bc:	0800181d 	.word	0x0800181d
 80017c0:	0800181d 	.word	0x0800181d
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	0800181d 	.word	0x0800181d
 80017cc:	0800181d 	.word	0x0800181d
 80017d0:	0800181d 	.word	0x0800181d
 80017d4:	0800180d 	.word	0x0800180d
 80017d8:	0800181d 	.word	0x0800181d
 80017dc:	0800181d 	.word	0x0800181d
 80017e0:	0800181d 	.word	0x0800181d
 80017e4:	08001805 	.word	0x08001805
 80017e8:	0800181d 	.word	0x0800181d
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	080017f5 	.word	0x080017f5
			{
				case K_1:{Keycode = K_1_S; break;}
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <KeyRead+0x194>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e013      	b.n	8001824 <KeyRead+0xe0>
				case K_2:{Keycode = K_2_S; break;}
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <KeyRead+0x194>)
 80017fe:	2202      	movs	r2, #2
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e00f      	b.n	8001824 <KeyRead+0xe0>
				case K_3:{Keycode = K_3_S; break;}
 8001804:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <KeyRead+0x194>)
 8001806:	2203      	movs	r2, #3
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	e00b      	b.n	8001824 <KeyRead+0xe0>
				case K_4:{Keycode = K_4_S; break;}
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <KeyRead+0x194>)
 800180e:	2204      	movs	r2, #4
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e007      	b.n	8001824 <KeyRead+0xe0>
				case K_5:{Keycode = K_5_S; break;}
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <KeyRead+0x194>)
 8001816:	2205      	movs	r2, #5
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e003      	b.n	8001824 <KeyRead+0xe0>
				default:{Keycode = K_NO; break;}
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <KeyRead+0x194>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	bf00      	nop

		}
	}


	if(KEY_Time >= T_1S)	  	//
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <KeyRead+0x198>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800182c:	d344      	bcc.n	80018b8 <KeyRead+0x174>
	{
		KEY_Time = T_1S-T_330mS;
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <KeyRead+0x198>)
 8001830:	f240 229e 	movw	r2, #670	; 0x29e
 8001834:	601a      	str	r2, [r3, #0]
		switch(KEY_Cont)
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <KeyRead+0x180>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3b0f      	subs	r3, #15
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d837      	bhi.n	80018b0 <KeyRead+0x16c>
 8001840:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <KeyRead+0x104>)
 8001842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001846:	bf00      	nop
 8001848:	080018a9 	.word	0x080018a9
 800184c:	080018b1 	.word	0x080018b1
 8001850:	080018b1 	.word	0x080018b1
 8001854:	080018b1 	.word	0x080018b1
 8001858:	080018b1 	.word	0x080018b1
 800185c:	080018b1 	.word	0x080018b1
 8001860:	080018b1 	.word	0x080018b1
 8001864:	080018b1 	.word	0x080018b1
 8001868:	080018a1 	.word	0x080018a1
 800186c:	080018b1 	.word	0x080018b1
 8001870:	080018b1 	.word	0x080018b1
 8001874:	080018b1 	.word	0x080018b1
 8001878:	08001899 	.word	0x08001899
 800187c:	080018b1 	.word	0x080018b1
 8001880:	08001891 	.word	0x08001891
 8001884:	08001889 	.word	0x08001889
		{
			case K_1:{Keycode = K_1_L; break;}
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <KeyRead+0x194>)
 800188a:	220b      	movs	r2, #11
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e013      	b.n	80018b8 <KeyRead+0x174>
			case K_2:{Keycode = K_2_L; break;}
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <KeyRead+0x194>)
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e00f      	b.n	80018b8 <KeyRead+0x174>
			case K_3:{Keycode = K_3_L; break;}
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <KeyRead+0x194>)
 800189a:	220d      	movs	r2, #13
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e00b      	b.n	80018b8 <KeyRead+0x174>
			case K_4:{Keycode = K_4_L; break;}
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <KeyRead+0x194>)
 80018a2:	220e      	movs	r2, #14
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e007      	b.n	80018b8 <KeyRead+0x174>
			case K_5:{Keycode = K_5_L; break;}
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <KeyRead+0x194>)
 80018aa:	220f      	movs	r2, #15
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e003      	b.n	80018b8 <KeyRead+0x174>
			default:{Keycode = K_NO; break;}
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <KeyRead+0x194>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	bf00      	nop
		}
	}
	return Keycode;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <KeyRead+0x194>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000934 	.word	0x20000934
 80018c8:	20000930 	.word	0x20000930
 80018cc:	20000938 	.word	0x20000938
 80018d0:	20000920 	.word	0x20000920
 80018d4:	2000092c 	.word	0x2000092c
 80018d8:	20000924 	.word	0x20000924
 80018dc:	20000928 	.word	0x20000928

080018e0 <KEY_EXIT>:
void KEY_EXIT(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	if(Keycode != K_NO)
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <KEY_EXIT+0x20>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <KEY_EXIT+0x18>
	{
		Trg_state = NO;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <KEY_EXIT+0x24>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
		Keycode = K_NO;
 80018f2:	4b03      	ldr	r3, [pc, #12]	; (8001900 <KEY_EXIT+0x20>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
	}
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	20000924 	.word	0x20000924
 8001904:	20000938 	.word	0x20000938

08001908 <HAL_TIM_PeriodElapsedCallback>:
extern u32 SweepStepFre;
extern u16 SweepTime;//ms
extern u8 SweepFlag;//1-》sweeping frequency; 0-》not sweeping

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]



	if (htim->Instance == TIM3)//1ms中断
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d123      	bne.n	8001962 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		KEY_Sys_Timer++;//1ms中断次数
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a49      	ldr	r2, [pc, #292]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001922:	6013      	str	r3, [r2, #0]
		if(KEY_Cont!=31)//0b011111
 8001924:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b1f      	cmp	r3, #31
 800192a:	d005      	beq.n	8001938 <HAL_TIM_PeriodElapsedCallback+0x30>
		  KEY_Time++;		//按下时长
 800192c:	4b48      	ldr	r3, [pc, #288]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	4a47      	ldr	r2, [pc, #284]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e002      	b.n	800193e <HAL_TIM_PeriodElapsedCallback+0x36>
		else
		  KEY_Time = 0;
 8001938:	4b45      	ldr	r3, [pc, #276]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]


		sysbufer++;
 800193e:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001948:	801a      	strh	r2, [r3, #0]
		if(sysbufer == 10)
 800194a:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d107      	bne.n	8001962 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
		  SysTimer++;       //10ms中断次数
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	4a3f      	ldr	r2, [pc, #252]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800195a:	6013      	str	r3, [r2, #0]
		  sysbufer = 0;
 800195c:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM4)//x0.1ms =>1ms
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a3d      	ldr	r2, [pc, #244]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d167      	bne.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x134>
	{
		if(SweepFlag)
 800196c:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d063      	beq.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x134>
		{
			count++;
 8001974:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	4a3a      	ldr	r2, [pc, #232]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800197c:	6013      	str	r3, [r2, #0]


			if(count>=10*SweepTime)//频率步进，切换频点时
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	461a      	mov	r2, r3
 800198e:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d852      	bhi.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x134>
			{
				count=0;
 8001996:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
				if(ADC_1stepVmax >= ADC_1stepVmin) spectrum_buf[count1] = ADC_1stepVmax-ADC_1stepVmin;
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800199e:	881a      	ldrh	r2, [r3, #0]
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d30b      	bcc.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0xb8>
 80019a8:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80019aa:	8819      	ldrh	r1, [r3, #0]
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1a8a      	subs	r2, r1, r2
 80019b6:	b291      	uxth	r1, r2
 80019b8:	4a2f      	ldr	r2, [pc, #188]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80019ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80019be:	e005      	b.n	80019cc <HAL_TIM_PeriodElapsedCallback+0xc4>
				else spectrum_buf[count1] = 0;
 80019c0:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a2c      	ldr	r2, [pc, #176]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80019c6:	2100      	movs	r1, #0
 80019c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				ADC_1stepVmax = 0;
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	801a      	strh	r2, [r3, #0]
				ADC_1stepVmin = 0;
 80019d2:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	801a      	strh	r2, [r3, #0]

				count1++;//扫频进度
 80019d8:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	4a25      	ldr	r2, [pc, #148]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019e0:	6013      	str	r3, [r2, #0]

				NowFre = SweepMinFre+SweepStepFre*count1;
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	fb03 f202 	mul.w	r2, r3, r2
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80019f6:	6013      	str	r3, [r2, #0]

				if(NowFre>SweepMaxFre)//一轮扫频结束
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d907      	bls.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x10c>
				{

					count1max = count1-1;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4a20      	ldr	r2, [pc, #128]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001a0c:	6013      	str	r3, [r2, #0]
					count1 = 0;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

				}
				//refresh frequency

				ADF4351WriteFreq((double)NowFre/1000);
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fce1 	bl	80003e0 <__aeabi_ui2d>
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001a24:	f7fe fe80 	bl	8000728 <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7fe ff62 	bl	80008f8 <__aeabi_d2f>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fba6 	bl	8001188 <ADF4351WriteFreq>

			}
		}

	}
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40000400 	.word	0x40000400
 8001a48:	20000920 	.word	0x20000920
 8001a4c:	20000934 	.word	0x20000934
 8001a50:	20000928 	.word	0x20000928
 8001a54:	2000093c 	.word	0x2000093c
 8001a58:	20000940 	.word	0x20000940
 8001a5c:	40000800 	.word	0x40000800
 8001a60:	20001546 	.word	0x20001546
 8001a64:	20000944 	.word	0x20000944
 8001a68:	20000850 	.word	0x20000850
 8001a6c:	200008e6 	.word	0x200008e6
 8001a70:	200008e8 	.word	0x200008e8
 8001a74:	20000948 	.word	0x20000948
 8001a78:	20000d74 	.word	0x20000d74
 8001a7c:	2000084c 	.word	0x2000084c
 8001a80:	20000844 	.word	0x20000844
 8001a84:	2000094c 	.word	0x2000094c
 8001a88:	20000848 	.word	0x20000848
 8001a8c:	20000950 	.word	0x20000950
 8001a90:	408f4000 	.word	0x408f4000

08001a94 <transfer_command>:
const u8 LCD_GRAM_Zeros[128][8] = {0};
/*已在gpio.h初始化LCD_GPIO*/

/*写指令到 LCD 模块*/
void transfer_command(int data1)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	char i;

	//cs1=0;
	rs=0;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <transfer_command+0x58>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

	for(i=0;i<8;i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e017      	b.n	8001ad8 <transfer_command+0x44>
	{
		sclk=0;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <transfer_command+0x5c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
		if(data1&0x80) sid=1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <transfer_command+0x2c>
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <transfer_command+0x60>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e002      	b.n	8001ac6 <transfer_command+0x32>
		else sid=0;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <transfer_command+0x60>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
		sclk=1;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <transfer_command+0x5c>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
		data1<<=1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	607b      	str	r3, [r7, #4]
	for(i=0;i<8;i++)
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b07      	cmp	r3, #7
 8001adc:	d9e4      	bls.n	8001aa8 <transfer_command+0x14>
	}
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	42210190 	.word	0x42210190
 8001af0:	42210198 	.word	0x42210198
 8001af4:	4221019c 	.word	0x4221019c

08001af8 <transfer_data>:

/*写数据到 LCD 模块*/
void transfer_data(int data1)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	char i;

	//cs1=0;
	rs=1;
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <transfer_data+0x58>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

	for(i=0;i<8;i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	e017      	b.n	8001b3c <transfer_data+0x44>
	{
		sclk=0;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <transfer_data+0x5c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
		if(data1&0x80) sid=1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <transfer_data+0x2c>
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <transfer_data+0x60>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e002      	b.n	8001b2a <transfer_data+0x32>
		else sid=0;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <transfer_data+0x60>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
		sclk=1;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <transfer_data+0x5c>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
		data1<<=1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	607b      	str	r3, [r7, #4]
	for(i=0;i<8;i++)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	d9e4      	bls.n	8001b0c <transfer_data+0x14>
	}
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	42210190 	.word	0x42210190
 8001b54:	42210198 	.word	0x42210198
 8001b58:	4221019c 	.word	0x4221019c

08001b5c <initial_lcd>:

/*LCD 模块初始化*/
void initial_lcd(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0

	//cs1=0;
	reset=0; /*低电平复位*/
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <initial_lcd+0xcc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 8001b66:	2064      	movs	r0, #100	; 0x64
 8001b68:	f7ff fce4 	bl	8001534 <delay_ms>
	reset=1; /*复位完毕*/
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <initial_lcd+0xcc>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
	delay_ms(20);
 8001b72:	2014      	movs	r0, #20
 8001b74:	f7ff fcde 	bl	8001534 <delay_ms>
	transfer_command(0xAE);//--turn off oled panel
 8001b78:	20ae      	movs	r0, #174	; 0xae
 8001b7a:	f7ff ff8b 	bl	8001a94 <transfer_command>
	transfer_command(0x00);//---set low column address
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff ff88 	bl	8001a94 <transfer_command>
	transfer_command(0x10);//---set high column address
 8001b84:	2010      	movs	r0, #16
 8001b86:	f7ff ff85 	bl	8001a94 <transfer_command>
	transfer_command(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8001b8a:	2040      	movs	r0, #64	; 0x40
 8001b8c:	f7ff ff82 	bl	8001a94 <transfer_command>
	transfer_command(0x81);//--set contrast control register
 8001b90:	2081      	movs	r0, #129	; 0x81
 8001b92:	f7ff ff7f 	bl	8001a94 <transfer_command>
	transfer_command(0xCF);// Set SEG Output Current Brightness
 8001b96:	20cf      	movs	r0, #207	; 0xcf
 8001b98:	f7ff ff7c 	bl	8001a94 <transfer_command>
	transfer_command(0xA1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8001b9c:	20a1      	movs	r0, #161	; 0xa1
 8001b9e:	f7ff ff79 	bl	8001a94 <transfer_command>
	transfer_command(0xC8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8001ba2:	20c8      	movs	r0, #200	; 0xc8
 8001ba4:	f7ff ff76 	bl	8001a94 <transfer_command>
	transfer_command(0xA6);//--set normal display
 8001ba8:	20a6      	movs	r0, #166	; 0xa6
 8001baa:	f7ff ff73 	bl	8001a94 <transfer_command>
	transfer_command(0xA8);//--set multiplex ratio(1 to 64)
 8001bae:	20a8      	movs	r0, #168	; 0xa8
 8001bb0:	f7ff ff70 	bl	8001a94 <transfer_command>
	transfer_command(0x3f);//--1/64 duty
 8001bb4:	203f      	movs	r0, #63	; 0x3f
 8001bb6:	f7ff ff6d 	bl	8001a94 <transfer_command>
	transfer_command(0xD3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8001bba:	20d3      	movs	r0, #211	; 0xd3
 8001bbc:	f7ff ff6a 	bl	8001a94 <transfer_command>
	transfer_command(0x00);//-not offset
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff ff67 	bl	8001a94 <transfer_command>
	transfer_command(0xd5);//--set display clock divide ratio/oscillator frequency
 8001bc6:	20d5      	movs	r0, #213	; 0xd5
 8001bc8:	f7ff ff64 	bl	8001a94 <transfer_command>
	transfer_command(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 8001bcc:	2080      	movs	r0, #128	; 0x80
 8001bce:	f7ff ff61 	bl	8001a94 <transfer_command>
	transfer_command(0xD9);//--set pre-charge period
 8001bd2:	20d9      	movs	r0, #217	; 0xd9
 8001bd4:	f7ff ff5e 	bl	8001a94 <transfer_command>
	transfer_command(0xF1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8001bd8:	20f1      	movs	r0, #241	; 0xf1
 8001bda:	f7ff ff5b 	bl	8001a94 <transfer_command>
	transfer_command(0xDA);//--set com pins hardware configuration
 8001bde:	20da      	movs	r0, #218	; 0xda
 8001be0:	f7ff ff58 	bl	8001a94 <transfer_command>
	transfer_command(0x12);
 8001be4:	2012      	movs	r0, #18
 8001be6:	f7ff ff55 	bl	8001a94 <transfer_command>
	transfer_command(0xDB);//--set vcomh
 8001bea:	20db      	movs	r0, #219	; 0xdb
 8001bec:	f7ff ff52 	bl	8001a94 <transfer_command>
	transfer_command(0x40);//Set VCOM Deselect Level
 8001bf0:	2040      	movs	r0, #64	; 0x40
 8001bf2:	f7ff ff4f 	bl	8001a94 <transfer_command>
	transfer_command(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8001bf6:	2020      	movs	r0, #32
 8001bf8:	f7ff ff4c 	bl	8001a94 <transfer_command>
	transfer_command(0x02);//
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f7ff ff49 	bl	8001a94 <transfer_command>
	transfer_command(0x8D);//--set Charge Pump enable/disable
 8001c02:	208d      	movs	r0, #141	; 0x8d
 8001c04:	f7ff ff46 	bl	8001a94 <transfer_command>
	transfer_command(0x14);//--set(0x10) disable
 8001c08:	2014      	movs	r0, #20
 8001c0a:	f7ff ff43 	bl	8001a94 <transfer_command>
	transfer_command(0xA4);// Disable Entire Display On (0xa4/0xa5)
 8001c0e:	20a4      	movs	r0, #164	; 0xa4
 8001c10:	f7ff ff40 	bl	8001a94 <transfer_command>
	transfer_command(0xA6);// Disable Inverse Display On (0xa6/a7)
 8001c14:	20a6      	movs	r0, #166	; 0xa6
 8001c16:	f7ff ff3d 	bl	8001a94 <transfer_command>
	LCD_Clear();
 8001c1a:	f000 f865 	bl	8001ce8 <LCD_Clear>
	transfer_command(0xAF);
 8001c1e:	20af      	movs	r0, #175	; 0xaf
 8001c20:	f7ff ff38 	bl	8001a94 <transfer_command>



}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	42210194 	.word	0x42210194

08001c2c <lcd_address>:

/*设置LCD地址*/
void lcd_address(u8 page,u8 column)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71bb      	strb	r3, [r7, #6]
	//cs1=0;
	column=column;  //我们平常所说的第 1 列,在 LCD 驱动 IC 里是第 0 列.所以这里减去 1.
	page=page;
	//设置页地址.每页是第 8 行.一个画面的 64 行被分成 8 个页. 我们平常所说的第 1 页,在 LCD 驱动 IC 里是第 0 页.所以这里减去 1.*/
	transfer_command(0xb0+page);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	33b0      	adds	r3, #176	; 0xb0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff27 	bl	8001a94 <transfer_command>
	transfer_command(((column>>4)&0x0f)+0x10); //设置列地址的高 4 位
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	3310      	adds	r3, #16
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff1e 	bl	8001a94 <transfer_command>
	transfer_command(column&0x0f);  //设置列地址的低 4 位
 8001c58:	79bb      	ldrb	r3, [r7, #6]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff18 	bl	8001a94 <transfer_command>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <LCD_Refresh_Gram>:

//更新显存到LCD
void LCD_Refresh_Gram(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
	u8 i,n;
	//cs1=0;
	for(i=0;i<8;i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	e01b      	b.n	8001cb0 <LCD_Refresh_Gram+0x44>
	{
		lcd_address(i,0);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ffd5 	bl	8001c2c <lcd_address>
		for(n=0;n<128;n++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	71bb      	strb	r3, [r7, #6]
 8001c86:	e00c      	b.n	8001ca2 <LCD_Refresh_Gram+0x36>
		{
			transfer_data(LCD_GRAM[n][i]);
 8001c88:	79ba      	ldrb	r2, [r7, #6]
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <LCD_Refresh_Gram+0x54>)
 8001c8e:	00d2      	lsls	r2, r2, #3
 8001c90:	440a      	add	r2, r1
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff2e 	bl	8001af8 <transfer_data>
		for(n=0;n<128;n++)
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	71bb      	strb	r3, [r7, #6]
 8001ca2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	daee      	bge.n	8001c88 <LCD_Refresh_Gram+0x1c>
	for(i=0;i<8;i++)
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	3301      	adds	r3, #1
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b07      	cmp	r3, #7
 8001cb4:	d9e0      	bls.n	8001c78 <LCD_Refresh_Gram+0xc>
		}
	}
	//cs1=1;
}
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000954 	.word	0x20000954

08001cc4 <LCD_GRAM_Clear>:
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
void LCD_GRAM_Clear()
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
		memcpy(LCD_GRAM,LCD_GRAM_Zeros,sizeof(LCD_GRAM));
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <LCD_GRAM_Clear+0x1c>)
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <LCD_GRAM_Clear+0x20>)
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f003 fa65 	bl	80051a4 <memcpy>
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000954 	.word	0x20000954
 8001ce4:	08006534 	.word	0x08006534

08001ce8 <LCD_Clear>:
void LCD_Clear(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

	memcpy(LCD_GRAM,LCD_GRAM_Zeros,sizeof(LCD_GRAM));
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <LCD_Clear+0x20>)
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <LCD_Clear+0x24>)
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f003 fa53 	bl	80051a4 <memcpy>
	LCD_Refresh_Gram();//更新显示
 8001cfe:	f7ff ffb5 	bl	8001c6c <LCD_Refresh_Gram>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000954 	.word	0x20000954
 8001d0c:	08006534 	.word	0x08006534

08001d10 <LCD_draw_Square>:
void LCD_draw_Square(u8 x1,u8 y1,u8 x2,u8 y2)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	4604      	mov	r4, r0
 8001d18:	4608      	mov	r0, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	4603      	mov	r3, r0
 8001d24:	71bb      	strb	r3, [r7, #6]
 8001d26:	460b      	mov	r3, r1
 8001d28:	717b      	strb	r3, [r7, #5]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	713b      	strb	r3, [r7, #4]
	LCD_Fill(x1,y1,x1,y2,1);
 8001d2e:	793b      	ldrb	r3, [r7, #4]
 8001d30:	79fa      	ldrb	r2, [r7, #7]
 8001d32:	79b9      	ldrb	r1, [r7, #6]
 8001d34:	79f8      	ldrb	r0, [r7, #7]
 8001d36:	2401      	movs	r4, #1
 8001d38:	9400      	str	r4, [sp, #0]
 8001d3a:	f000 f8c9 	bl	8001ed0 <LCD_Fill>
	LCD_Fill(x1,y1,x2,y1,1);
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	797a      	ldrb	r2, [r7, #5]
 8001d42:	79b9      	ldrb	r1, [r7, #6]
 8001d44:	79f8      	ldrb	r0, [r7, #7]
 8001d46:	2401      	movs	r4, #1
 8001d48:	9400      	str	r4, [sp, #0]
 8001d4a:	f000 f8c1 	bl	8001ed0 <LCD_Fill>
	LCD_Fill(x1,y2,x2,y2,1);
 8001d4e:	793b      	ldrb	r3, [r7, #4]
 8001d50:	797a      	ldrb	r2, [r7, #5]
 8001d52:	7939      	ldrb	r1, [r7, #4]
 8001d54:	79f8      	ldrb	r0, [r7, #7]
 8001d56:	2401      	movs	r4, #1
 8001d58:	9400      	str	r4, [sp, #0]
 8001d5a:	f000 f8b9 	bl	8001ed0 <LCD_Fill>
	LCD_Fill(x2,y1,x2,y2,1);
 8001d5e:	793b      	ldrb	r3, [r7, #4]
 8001d60:	797a      	ldrb	r2, [r7, #5]
 8001d62:	79b9      	ldrb	r1, [r7, #6]
 8001d64:	7978      	ldrb	r0, [r7, #5]
 8001d66:	2401      	movs	r4, #1
 8001d68:	9400      	str	r4, [sp, #0]
 8001d6a:	f000 f8b1 	bl	8001ed0 <LCD_Fill>
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}
	...

08001d78 <LCD_draw_Point>:
//画点
//x:0~127
//y:0~63
//t:1 填充 0,清空
void LCD_draw_Point(u8 x,u8 y,u8 t)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	460b      	mov	r3, r1
 8001d84:	71bb      	strb	r3, [r7, #6]
 8001d86:	4613      	mov	r3, r2
 8001d88:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db3c      	blt.n	8001e10 <LCD_draw_Point+0x98>
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	2b3f      	cmp	r3, #63	; 0x3f
 8001d9a:	d839      	bhi.n	8001e10 <LCD_draw_Point+0x98>
	//cs1=0;
	pos=y/8;
 8001d9c:	79bb      	ldrb	r3, [r7, #6]
 8001d9e:	08db      	lsrs	r3, r3, #3
 8001da0:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001da2:	79bb      	ldrb	r3, [r7, #6]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	737b      	strb	r3, [r7, #13]
	temp=1<<bx;
 8001daa:	7b7b      	ldrb	r3, [r7, #13]
 8001dac:	2201      	movs	r2, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	73fb      	strb	r3, [r7, #15]
	if(t)LCD_GRAM[x][pos]|=temp;
 8001db4:	797b      	ldrb	r3, [r7, #5]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d012      	beq.n	8001de0 <LCD_draw_Point+0x68>
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	7bbb      	ldrb	r3, [r7, #14]
 8001dbe:	4917      	ldr	r1, [pc, #92]	; (8001e1c <LCD_draw_Point+0xa4>)
 8001dc0:	00d2      	lsls	r2, r2, #3
 8001dc2:	440a      	add	r2, r1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	7818      	ldrb	r0, [r3, #0]
 8001dc8:	79fa      	ldrb	r2, [r7, #7]
 8001dca:	7bbb      	ldrb	r3, [r7, #14]
 8001dcc:	7bf9      	ldrb	r1, [r7, #15]
 8001dce:	4301      	orrs	r1, r0
 8001dd0:	b2c8      	uxtb	r0, r1
 8001dd2:	4912      	ldr	r1, [pc, #72]	; (8001e1c <LCD_draw_Point+0xa4>)
 8001dd4:	00d2      	lsls	r2, r2, #3
 8001dd6:	440a      	add	r2, r1
 8001dd8:	4413      	add	r3, r2
 8001dda:	4602      	mov	r2, r0
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e018      	b.n	8001e12 <LCD_draw_Point+0x9a>
	else LCD_GRAM[x][pos]&=~temp;
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	490d      	ldr	r1, [pc, #52]	; (8001e1c <LCD_draw_Point+0xa4>)
 8001de6:	00d2      	lsls	r2, r2, #3
 8001de8:	440a      	add	r2, r1
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	b259      	sxtb	r1, r3
 8001dfc:	79fa      	ldrb	r2, [r7, #7]
 8001dfe:	7bbb      	ldrb	r3, [r7, #14]
 8001e00:	b2c8      	uxtb	r0, r1
 8001e02:	4906      	ldr	r1, [pc, #24]	; (8001e1c <LCD_draw_Point+0xa4>)
 8001e04:	00d2      	lsls	r2, r2, #3
 8001e06:	440a      	add	r2, r1
 8001e08:	4413      	add	r3, r2
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e000      	b.n	8001e12 <LCD_draw_Point+0x9a>
	if(x>127||y>63)return;//超出范围了.
 8001e10:	bf00      	nop
	//cs1=1;
}
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000954 	.word	0x20000954

08001e20 <LCD_Move_DrawPoint>:
void LCD_Move_DrawPoint(u8 x,u8 y,u8 t)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	71bb      	strb	r3, [r7, #6]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
	if(x>127)	x -= 127;
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da02      	bge.n	8001e44 <LCD_Move_DrawPoint+0x24>
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	3b7f      	subs	r3, #127	; 0x7f
 8001e42:	71fb      	strb	r3, [r7, #7]
	if(y>63)	y -= 63;
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	2b3f      	cmp	r3, #63	; 0x3f
 8001e48:	d902      	bls.n	8001e50 <LCD_Move_DrawPoint+0x30>
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	3b3f      	subs	r3, #63	; 0x3f
 8001e4e:	71bb      	strb	r3, [r7, #6]
	pos=y/8;
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	08db      	lsrs	r3, r3, #3
 8001e54:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	737b      	strb	r3, [r7, #13]
	temp=1<<(bx);
 8001e5e:	7b7b      	ldrb	r3, [r7, #13]
 8001e60:	2201      	movs	r2, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	73fb      	strb	r3, [r7, #15]
	if(t)LCD_GRAM[x][pos]|=temp;
 8001e68:	797b      	ldrb	r3, [r7, #5]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d012      	beq.n	8001e94 <LCD_Move_DrawPoint+0x74>
 8001e6e:	79fa      	ldrb	r2, [r7, #7]
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	4916      	ldr	r1, [pc, #88]	; (8001ecc <LCD_Move_DrawPoint+0xac>)
 8001e74:	00d2      	lsls	r2, r2, #3
 8001e76:	440a      	add	r2, r1
 8001e78:	4413      	add	r3, r2
 8001e7a:	7818      	ldrb	r0, [r3, #0]
 8001e7c:	79fa      	ldrb	r2, [r7, #7]
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	7bf9      	ldrb	r1, [r7, #15]
 8001e82:	4301      	orrs	r1, r0
 8001e84:	b2c8      	uxtb	r0, r1
 8001e86:	4911      	ldr	r1, [pc, #68]	; (8001ecc <LCD_Move_DrawPoint+0xac>)
 8001e88:	00d2      	lsls	r2, r2, #3
 8001e8a:	440a      	add	r2, r1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4602      	mov	r2, r0
 8001e90:	701a      	strb	r2, [r3, #0]
	else LCD_GRAM[x][pos]&=~temp;
}
 8001e92:	e016      	b.n	8001ec2 <LCD_Move_DrawPoint+0xa2>
	else LCD_GRAM[x][pos]&=~temp;
 8001e94:	79fa      	ldrb	r2, [r7, #7]
 8001e96:	7bbb      	ldrb	r3, [r7, #14]
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <LCD_Move_DrawPoint+0xac>)
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	440a      	add	r2, r1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b25a      	sxtb	r2, r3
 8001ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	4013      	ands	r3, r2
 8001eae:	b259      	sxtb	r1, r3
 8001eb0:	79fa      	ldrb	r2, [r7, #7]
 8001eb2:	7bbb      	ldrb	r3, [r7, #14]
 8001eb4:	b2c8      	uxtb	r0, r1
 8001eb6:	4905      	ldr	r1, [pc, #20]	; (8001ecc <LCD_Move_DrawPoint+0xac>)
 8001eb8:	00d2      	lsls	r2, r2, #3
 8001eba:	440a      	add	r2, r1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	701a      	strb	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000954 	.word	0x20000954

08001ed0 <LCD_Fill>:
void LCD_Fill(u8 x1,u8 y1,u8 x2,u8 y2,u8 dot)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71bb      	strb	r3, [r7, #6]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	717b      	strb	r3, [r7, #5]
 8001eea:	4613      	mov	r3, r2
 8001eec:	713b      	strb	r3, [r7, #4]
	u8 x,y;
	for(x=x1;x<=x2;x++)
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e013      	b.n	8001f1c <LCD_Fill+0x4c>
	{
		for(y=y1;y<=y2;y++)LCD_draw_Point(x,y,dot);
 8001ef4:	79bb      	ldrb	r3, [r7, #6]
 8001ef6:	73bb      	strb	r3, [r7, #14]
 8001ef8:	e009      	b.n	8001f0e <LCD_Fill+0x3e>
 8001efa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001efe:	7bb9      	ldrb	r1, [r7, #14]
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff38 	bl	8001d78 <LCD_draw_Point>
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	73bb      	strb	r3, [r7, #14]
 8001f0e:	7bba      	ldrb	r2, [r7, #14]
 8001f10:	793b      	ldrb	r3, [r7, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d9f1      	bls.n	8001efa <LCD_Fill+0x2a>
	for(x=x1;x<=x2;x++)
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	797b      	ldrb	r3, [r7, #5]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d9e7      	bls.n	8001ef4 <LCD_Fill+0x24>
	}
//	LCD_Refresh_Gram();//更新显示
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd90      	pop	{r4, r7, pc}
	...

08001f30 <LCD_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void LCD_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4623      	mov	r3, r4
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	4603      	mov	r3, r0
 8001f44:	71bb      	strb	r3, [r7, #6]
 8001f46:	460b      	mov	r3, r1
 8001f48:	717b      	strb	r3, [r7, #5]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值
 8001f52:	797b      	ldrb	r3, [r7, #5]
 8001f54:	3b20      	subs	r3, #32
 8001f56:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73bb      	strb	r3, [r7, #14]
 8001f5c:	e04d      	b.n	8001ffa <LCD_ShowChar+0xca>
    {
			if(size==12)temp=asc2_1206[chr][t];  //调用1206字体
 8001f5e:	793b      	ldrb	r3, [r7, #4]
 8001f60:	2b0c      	cmp	r3, #12
 8001f62:	d10b      	bne.n	8001f7c <LCD_ShowChar+0x4c>
 8001f64:	797a      	ldrb	r2, [r7, #5]
 8001f66:	7bb9      	ldrb	r1, [r7, #14]
 8001f68:	4828      	ldr	r0, [pc, #160]	; (800200c <LCD_ShowChar+0xdc>)
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4403      	add	r3, r0
 8001f74:	440b      	add	r3, r1
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e007      	b.n	8001f8c <LCD_ShowChar+0x5c>
			else temp=asc2_1608[chr][t];		 //调用1608字体
 8001f7c:	797a      	ldrb	r2, [r7, #5]
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	4923      	ldr	r1, [pc, #140]	; (8002010 <LCD_ShowChar+0xe0>)
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	440a      	add	r2, r1
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	73fb      	strb	r3, [r7, #15]
			for(t1=0;t1<8;t1++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	737b      	strb	r3, [r7, #13]
 8001f90:	e02d      	b.n	8001fee <LCD_ShowChar+0xbe>
			{
				if(temp&0x80)LCD_draw_Point(x,y,mode);
 8001f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da07      	bge.n	8001faa <LCD_ShowChar+0x7a>
 8001f9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f9e:	79b9      	ldrb	r1, [r7, #6]
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fee8 	bl	8001d78 <LCD_draw_Point>
 8001fa8:	e00c      	b.n	8001fc4 <LCD_ShowChar+0x94>
				else LCD_draw_Point(x,y,!mode);
 8001faa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	79b9      	ldrb	r1, [r7, #6]
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff feda 	bl	8001d78 <LCD_draw_Point>
				temp<<=1;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
				y++;
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	71bb      	strb	r3, [r7, #6]
				if((y-y0)==size)
 8001fd0:	79ba      	ldrb	r2, [r7, #6]
 8001fd2:	7b3b      	ldrb	r3, [r7, #12]
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	793b      	ldrb	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d105      	bne.n	8001fe8 <LCD_ShowChar+0xb8>
				{
					y=y0;
 8001fdc:	7b3b      	ldrb	r3, [r7, #12]
 8001fde:	71bb      	strb	r3, [r7, #6]
					x++;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	71fb      	strb	r3, [r7, #7]
					break;
 8001fe6:	e005      	b.n	8001ff4 <LCD_ShowChar+0xc4>
			for(t1=0;t1<8;t1++)
 8001fe8:	7b7b      	ldrb	r3, [r7, #13]
 8001fea:	3301      	adds	r3, #1
 8001fec:	737b      	strb	r3, [r7, #13]
 8001fee:	7b7b      	ldrb	r3, [r7, #13]
 8001ff0:	2b07      	cmp	r3, #7
 8001ff2:	d9ce      	bls.n	8001f92 <LCD_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001ff4:	7bbb      	ldrb	r3, [r7, #14]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	73bb      	strb	r3, [r7, #14]
 8001ffa:	7bba      	ldrb	r2, [r7, #14]
 8001ffc:	793b      	ldrb	r3, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3ad      	bcc.n	8001f5e <LCD_ShowChar+0x2e>
				}
			}
    }
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}
 800200c:	08005ad0 	.word	0x08005ad0
 8002010:	08005f44 	.word	0x08005f44

08002014 <LCD_Show_chineseChar>:
void LCD_Show_chineseChar(u8 x,u8 y,char *chr, u8 mode)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	603a      	str	r2, [r7, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	460b      	mov	r3, r1
 8002024:	71bb      	strb	r3, [r7, #6]
 8002026:	4613      	mov	r3, r2
 8002028:	717b      	strb	r3, [r7, #5]
	u8 temp,t,t1;
	u8 y0=y;
 800202a:	79bb      	ldrb	r3, [r7, #6]
 800202c:	733b      	strb	r3, [r7, #12]

	for(t=0;t<32;t++)
 800202e:	2300      	movs	r3, #0
 8002030:	73bb      	strb	r3, [r7, #14]
 8002032:	e039      	b.n	80020a8 <LCD_Show_chineseChar+0x94>
	{
		temp = *chr;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	73fb      	strb	r3, [r7, #15]
		for(t1=0;t1<8;t1++)
 800203a:	2300      	movs	r3, #0
 800203c:	737b      	strb	r3, [r7, #13]
 800203e:	e02a      	b.n	8002096 <LCD_Show_chineseChar+0x82>
		{
			if(temp&0x80)
 8002040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002044:	2b00      	cmp	r3, #0
 8002046:	da06      	bge.n	8002056 <LCD_Show_chineseChar+0x42>
				LCD_Move_DrawPoint(x,y,mode);
 8002048:	797a      	ldrb	r2, [r7, #5]
 800204a:	79b9      	ldrb	r1, [r7, #6]
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fee6 	bl	8001e20 <LCD_Move_DrawPoint>
 8002054:	e00b      	b.n	800206e <LCD_Show_chineseChar+0x5a>
			else
			LCD_Move_DrawPoint(x,y,!mode);
 8002056:	797b      	ldrb	r3, [r7, #5]
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	79b9      	ldrb	r1, [r7, #6]
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fed9 	bl	8001e20 <LCD_Move_DrawPoint>
			temp<<=1;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
			y++;
 8002074:	79bb      	ldrb	r3, [r7, #6]
 8002076:	3301      	adds	r3, #1
 8002078:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==16)
 800207a:	79ba      	ldrb	r2, [r7, #6]
 800207c:	7b3b      	ldrb	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b10      	cmp	r3, #16
 8002082:	d105      	bne.n	8002090 <LCD_Show_chineseChar+0x7c>
			{
				y=y0;
 8002084:	7b3b      	ldrb	r3, [r7, #12]
 8002086:	71bb      	strb	r3, [r7, #6]
				x++;
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	3301      	adds	r3, #1
 800208c:	71fb      	strb	r3, [r7, #7]
				break;
 800208e:	e005      	b.n	800209c <LCD_Show_chineseChar+0x88>
		for(t1=0;t1<8;t1++)
 8002090:	7b7b      	ldrb	r3, [r7, #13]
 8002092:	3301      	adds	r3, #1
 8002094:	737b      	strb	r3, [r7, #13]
 8002096:	7b7b      	ldrb	r3, [r7, #13]
 8002098:	2b07      	cmp	r3, #7
 800209a:	d9d1      	bls.n	8002040 <LCD_Show_chineseChar+0x2c>
			}
		}
		chr++;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	3301      	adds	r3, #1
 80020a0:	603b      	str	r3, [r7, #0]
	for(t=0;t<32;t++)
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	3301      	adds	r3, #1
 80020a6:	73bb      	strb	r3, [r7, #14]
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	2b1f      	cmp	r3, #31
 80020ac:	d9c2      	bls.n	8002034 <LCD_Show_chineseChar+0x20>
	}
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <WriteA_Chinese>:
void	WriteA_Chinese(u8 mode,unsigned char x, unsigned char y, const u8 *s)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
 80020c4:	460b      	mov	r3, r1
 80020c6:	71bb      	strb	r3, [r7, #6]
 80020c8:	4613      	mov	r3, r2
 80020ca:	717b      	strb	r3, [r7, #5]
	unsigned char j;

	if (x > 127) return;
 80020cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db3b      	blt.n	800214c <WriteA_Chinese+0x94>
	if (y > 63) return;
 80020d4:	797b      	ldrb	r3, [r7, #5]
 80020d6:	2b3f      	cmp	r3, #63	; 0x3f
 80020d8:	d83a      	bhi.n	8002150 <WriteA_Chinese+0x98>

	for (j = 0; j < sizeof(GB_16)/34;j++)
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	e031      	b.n	8002144 <WriteA_Chinese+0x8c>
	{
		if(s[0] == (char)GB_16[j].Index[0] && s[1] == (char)GB_16[j].Index[1])
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	7819      	ldrb	r1, [r3, #0]
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	481c      	ldr	r0, [pc, #112]	; (8002158 <WriteA_Chinese+0xa0>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	4413      	add	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4403      	add	r3, r0
 80020f2:	f993 3000 	ldrsb.w	r3, [r3]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	4299      	cmp	r1, r3
 80020fa:	d120      	bne.n	800213e <WriteA_Chinese+0x86>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	7819      	ldrb	r1, [r3, #0]
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	4814      	ldr	r0, [pc, #80]	; (8002158 <WriteA_Chinese+0xa0>)
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4403      	add	r3, r0
 8002110:	3301      	adds	r3, #1
 8002112:	f993 3000 	ldrsb.w	r3, [r3]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4299      	cmp	r1, r3
 800211a:	d110      	bne.n	800213e <WriteA_Chinese+0x86>
		{
			LCD_Show_chineseChar(x, y, &GB_16[j].Msk[0], mode);
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <WriteA_Chinese+0xa0>)
 8002128:	4413      	add	r3, r2
 800212a:	1c9a      	adds	r2, r3, #2
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	7979      	ldrb	r1, [r7, #5]
 8002130:	79b8      	ldrb	r0, [r7, #6]
 8002132:	f7ff ff6f 	bl	8002014 <LCD_Show_chineseChar>
			x+=16;
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	3310      	adds	r3, #16
 800213a:	71bb      	strb	r3, [r7, #6]
			break;
 800213c:	e009      	b.n	8002152 <WriteA_Chinese+0x9a>
	for (j = 0; j < sizeof(GB_16)/34;j++)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	3301      	adds	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b3d      	cmp	r3, #61	; 0x3d
 8002148:	d9ca      	bls.n	80020e0 <WriteA_Chinese+0x28>
 800214a:	e002      	b.n	8002152 <WriteA_Chinese+0x9a>
	if (x > 127) return;
 800214c:	bf00      	nop
 800214e:	e000      	b.n	8002152 <WriteA_Chinese+0x9a>
	if (y > 63) return;
 8002150:	bf00      	nop
		}
	}
}
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000000 	.word	0x20000000

0800215c <LCD_ShowAllString>:
        x+=8;
        p++;
    }
}
void LCD_ShowAllString(u8 mode,u8 x,u8 y,const u8 *p)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af02      	add	r7, sp, #8
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	4603      	mov	r3, r0
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	460b      	mov	r3, r1
 800216a:	71bb      	strb	r3, [r7, #6]
 800216c:	4613      	mov	r3, r2
 800216e:	717b      	strb	r3, [r7, #5]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while(*p!='\0')
 8002170:	e026      	b.n	80021c0 <LCD_ShowAllString+0x64>
    {
			if(x>MAX_CHAR_POSX)return;
 8002172:	79bb      	ldrb	r3, [r7, #6]
 8002174:	2b7a      	cmp	r3, #122	; 0x7a
 8002176:	d828      	bhi.n	80021ca <LCD_ShowAllString+0x6e>
			if(y>MAX_CHAR_POSY)return;
 8002178:	797b      	ldrb	r3, [r7, #5]
 800217a:	2b3a      	cmp	r3, #58	; 0x3a
 800217c:	d827      	bhi.n	80021ce <LCD_ShowAllString+0x72>
			if(*p>127)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b25b      	sxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	da0c      	bge.n	80021a2 <LCD_ShowAllString+0x46>
			{
				WriteA_Chinese(mode,x,y,p);
 8002188:	797a      	ldrb	r2, [r7, #5]
 800218a:	79b9      	ldrb	r1, [r7, #6]
 800218c:	79f8      	ldrb	r0, [r7, #7]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f7ff ff92 	bl	80020b8 <WriteA_Chinese>
				p+=2;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	3302      	adds	r3, #2
 8002198:	603b      	str	r3, [r7, #0]
				x+=16;
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	3310      	adds	r3, #16
 800219e:	71bb      	strb	r3, [r7, #6]
 80021a0:	e00e      	b.n	80021c0 <LCD_ShowAllString+0x64>
			}else
			{
				LCD_ShowChar(x,y,*p,16,mode);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	7979      	ldrb	r1, [r7, #5]
 80021a8:	79b8      	ldrb	r0, [r7, #6]
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2310      	movs	r3, #16
 80021b0:	f7ff febe 	bl	8001f30 <LCD_ShowChar>
				x+=8;
 80021b4:	79bb      	ldrb	r3, [r7, #6]
 80021b6:	3308      	adds	r3, #8
 80021b8:	71bb      	strb	r3, [r7, #6]
				p++;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1d4      	bne.n	8002172 <LCD_ShowAllString+0x16>
 80021c8:	e002      	b.n	80021d0 <LCD_ShowAllString+0x74>
			if(x>MAX_CHAR_POSX)return;
 80021ca:	bf00      	nop
 80021cc:	e000      	b.n	80021d0 <LCD_ShowAllString+0x74>
			if(y>MAX_CHAR_POSY)return;
 80021ce:	bf00      	nop
			}
    }
}
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <LCD_Show_CEStr>:
			}
		}
	}
}
void LCD_Show_CEStr(u16 x0,u16 y0, u8 *pp)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	603a      	str	r2, [r7, #0]
 80021e0:	80fb      	strh	r3, [r7, #6]
 80021e2:	460b      	mov	r3, r1
 80021e4:	80bb      	strh	r3, [r7, #4]
	LCD_ShowAllString(1,x0,y0*8,pp);
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	b2d9      	uxtb	r1, r3
 80021ea:	88bb      	ldrh	r3, [r7, #4]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7ff ffb1 	bl	800215c <LCD_ShowAllString>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <OLED_ShowString>:
	LCD_ShowAllString(show_mode,x0,y0*8,pp);

}

void OLED_ShowString(u8 x,u8 y,u8 *chr)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af02      	add	r7, sp, #8
 8002208:	4603      	mov	r3, r0
 800220a:	603a      	str	r2, [r7, #0]
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	460b      	mov	r3, r1
 8002210:	71bb      	strb	r3, [r7, #6]
	unsigned char j=0;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8002216:	e039      	b.n	800228c <OLED_ShowString+0x8a>
	{
	if(chr[j]>=128)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b25b      	sxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	da17      	bge.n	8002256 <OLED_ShowString+0x54>
	{
		chr[j]-=128;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4413      	add	r3, r2
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	440b      	add	r3, r1
 8002234:	3a80      	subs	r2, #128	; 0x80
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]
		LCD_ShowChar(x,y*8,chr[j],16,0);
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	b2d9      	uxtb	r1, r3
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4413      	add	r3, r2
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	79f8      	ldrb	r0, [r7, #7]
 800224a:	2300      	movs	r3, #0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2310      	movs	r3, #16
 8002250:	f7ff fe6e 	bl	8001f30 <LCD_ShowChar>
 8002254:	e00c      	b.n	8002270 <OLED_ShowString+0x6e>
	}else
	LCD_ShowChar(x,y*8,chr[j],16,1);
 8002256:	79bb      	ldrb	r3, [r7, #6]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	b2d9      	uxtb	r1, r3
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4413      	add	r3, r2
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	79f8      	ldrb	r0, [r7, #7]
 8002266:	2301      	movs	r3, #1
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2310      	movs	r3, #16
 800226c:	f7ff fe60 	bl	8001f30 <LCD_ShowChar>
			x+=8;
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	3308      	adds	r3, #8
 8002274:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b78      	cmp	r3, #120	; 0x78
 800227a:	d904      	bls.n	8002286 <OLED_ShowString+0x84>
 800227c:	2300      	movs	r3, #0
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	3302      	adds	r3, #2
 8002284:	71bb      	strb	r3, [r7, #6]
			j++;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	3301      	adds	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1bf      	bne.n	8002218 <OLED_ShowString+0x16>
	}
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a8:	f000 ffc0 	bl	800322c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ac:	f000 f84c 	bl	8002348 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  delay_init(72);
 80022b0:	2048      	movs	r0, #72	; 0x48
 80022b2:	f7ff f8e3 	bl	800147c <delay_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b6:	f7ff f973 	bl	80015a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80022ba:	f7ff f865 	bl	8001388 <MX_ADC1_Init>
  MX_TIM3_Init();
 80022be:	f000 feb3 	bl	8003028 <MX_TIM3_Init>
  MX_TIM4_Init();
 80022c2:	f000 feff 	bl	80030c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  initial_lcd();
 80022c6:	f7ff fc49 	bl	8001b5c <initial_lcd>
  LCD_Clear();
 80022ca:	f7ff fd0d 	bl	8001ce8 <LCD_Clear>

  HAL_TIM_Base_Start_IT(&htim3);//按键1MS
 80022ce:	4817      	ldr	r0, [pc, #92]	; (800232c <main+0x88>)
 80022d0:	f002 fada 	bl	8004888 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);//扫频0.1MS
 80022d4:	4816      	ldr	r0, [pc, #88]	; (8002330 <main+0x8c>)
 80022d6:	f002 fad7 	bl	8004888 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 80022da:	4816      	ldr	r0, [pc, #88]	; (8002334 <main+0x90>)
 80022dc:	f001 f8e0 	bl	80034a0 <HAL_ADC_Start>


  LCD_Show_CEStr(0,0,"HelloWorld! O.o");
 80022e0:	4a15      	ldr	r2, [pc, #84]	; (8002338 <main+0x94>)
 80022e2:	2100      	movs	r1, #0
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff ff76 	bl	80021d6 <LCD_Show_CEStr>
  LCD_Refresh_Gram();
 80022ea:	f7ff fcbf 	bl	8001c6c <LCD_Refresh_Gram>
  delay_ms(1000);
 80022ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022f2:	f7ff f91f 	bl	8001534 <delay_ms>
  LCD_Clear();
 80022f6:	f7ff fcf7 	bl	8001ce8 <LCD_Clear>
  ADF4351Init();
 80022fa:	f7fe fecf 	bl	800109c <ADF4351Init>
  ADF4351WriteFreq(80.0);
 80022fe:	480f      	ldr	r0, [pc, #60]	; (800233c <main+0x98>)
 8002300:	f7fe ff42 	bl	8001188 <ADF4351WriteFreq>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  KeyRead();//读取按键
 8002304:	f7ff fa1e 	bl	8001744 <KeyRead>
	  Set_PointFre(Keycode, 0);//界面交互处理
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <main+0x9c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f988 	bl	8002624 <Set_PointFre>
	  if(_return){_return=0;LCD_Refresh_Gram();}//更新显示
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <main+0xa0>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <main+0x82>
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <main+0xa0>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	f7ff fca3 	bl	8001c6c <LCD_Refresh_Gram>
	  KEY_EXIT();	//注销键Keycode
 8002326:	f7ff fadb 	bl	80018e0 <KEY_EXIT>
	  KeyRead();//读取按键
 800232a:	e7eb      	b.n	8002304 <main+0x60>
 800232c:	20001548 	.word	0x20001548
 8002330:	20001590 	.word	0x20001590
 8002334:	200008ec 	.word	0x200008ec
 8002338:	08005a78 	.word	0x08005a78
 800233c:	42a00000 	.word	0x42a00000
 8002340:	20000924 	.word	0x20000924
 8002344:	20001545 	.word	0x20001545

08002348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b094      	sub	sp, #80	; 0x50
 800234c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002352:	2228      	movs	r2, #40	; 0x28
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f002 fef0 	bl	800513c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002378:	2301      	movs	r3, #1
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800237c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002382:	2300      	movs	r3, #0
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002386:	2301      	movs	r3, #1
 8002388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238a:	2302      	movs	r3, #2
 800238c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800238e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002392:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002394:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002398:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fd8e 	bl	8003ec0 <HAL_RCC_OscConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023aa:	f000 f828 	bl	80023fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ae:	230f      	movs	r3, #15
 80023b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b2:	2302      	movs	r3, #2
 80023b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2102      	movs	r1, #2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 fffa 	bl	80043c4 <HAL_RCC_ClockConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80023d6:	f000 f812 	bl	80023fe <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023da:	2302      	movs	r3, #2
 80023dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 f948 	bl	800467c <HAL_RCCEx_PeriphCLKConfig>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80023f2:	f000 f804 	bl	80023fe <Error_Handler>
  }
}
 80023f6:	bf00      	nop
 80023f8:	3750      	adds	r7, #80	; 0x50
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002402:	b672      	cpsid	i
}
 8002404:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002406:	e7fe      	b.n	8002406 <Error_Handler+0x8>

08002408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_MspInit+0x5c>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4a14      	ldr	r2, [pc, #80]	; (8002464 <HAL_MspInit+0x5c>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6193      	str	r3, [r2, #24]
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_MspInit+0x5c>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_MspInit+0x5c>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <HAL_MspInit+0x5c>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <HAL_MspInit+0x5c>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_MspInit+0x60>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_MspInit+0x60>)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000

0800246c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <NMI_Handler+0x4>

08002472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <HardFault_Handler+0x4>

08002478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <MemManage_Handler+0x4>

0800247e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <BusFault_Handler+0x4>

08002484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <UsageFault_Handler+0x4>

0800248a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b2:	f000 ff01 	bl	80032b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM3_IRQHandler+0x10>)
 80024c2:	f002 fa33 	bl	800492c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20001548 	.word	0x20001548

080024d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM4_IRQHandler+0x10>)
 80024d6:	f002 fa29 	bl	800492c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20001590 	.word	0x20001590

080024e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <_sbrk+0x5c>)
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <_sbrk+0x60>)
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <_sbrk+0x64>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <_sbrk+0x64>)
 8002502:	4a12      	ldr	r2, [pc, #72]	; (800254c <_sbrk+0x68>)
 8002504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <_sbrk+0x64>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	429a      	cmp	r2, r3
 8002512:	d207      	bcs.n	8002524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002514:	f002 fe1a 	bl	800514c <__errno>
 8002518:	4603      	mov	r3, r0
 800251a:	220c      	movs	r2, #12
 800251c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	e009      	b.n	8002538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <_sbrk+0x64>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	4a05      	ldr	r2, [pc, #20]	; (8002548 <_sbrk+0x64>)
 8002534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20005000 	.word	0x20005000
 8002544:	00000400 	.word	0x00000400
 8002548:	20000d54 	.word	0x20000d54
 800254c:	20001728 	.word	0x20001728

08002550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <Copybuf2dis>:
	return 0;
}

//把数据放到另一个缓存，显示，FloatNum小数点位数，CursorEn光标使能
void Copybuf2dis(u8 *source, u8 dis[StrMax], u8 dispoint, u8 FloatNum, u8 CursorEn)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	4611      	mov	r1, r2
 8002568:	461a      	mov	r2, r3
 800256a:	460b      	mov	r3, r1
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	4613      	mov	r3, r2
 8002570:	71bb      	strb	r3, [r7, #6]
	int i, len;

	len = strlen(source);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7fd fdea 	bl	800014c <strlen>
 8002578:	4603      	mov	r3, r0
 800257a:	613b      	str	r3, [r7, #16]
	i = len - FloatNum;//整数个数
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	617b      	str	r3, [r7, #20]
	if(FloatNum>0)dis[i] = '.';
 8002584:	79bb      	ldrb	r3, [r7, #6]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <Copybuf2dis+0x38>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	4413      	add	r3, r2
 8002590:	222e      	movs	r2, #46	; 0x2e
 8002592:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++)
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e01a      	b.n	80025d0 <Copybuf2dis+0x74>
	{
		if(i < (len-FloatNum)) dis[i] = source[i];
 800259a:	79bb      	ldrb	r3, [r7, #6]
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	da08      	bge.n	80025b8 <Copybuf2dis+0x5c>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	441a      	add	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	440b      	add	r3, r1
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e008      	b.n	80025ca <Copybuf2dis+0x6e>
		else
		{ dis[i+1] = source[i]; }
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	441a      	add	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	440b      	add	r3, r1
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3301      	adds	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dbe0      	blt.n	800259a <Copybuf2dis+0x3e>
	}

	if(CursorEn)
 80025d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <Copybuf2dis+0xbe>
	{
		if(dispoint < (len-FloatNum)) dis[dispoint] += 128;
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	6939      	ldr	r1, [r7, #16]
 80025e6:	1acb      	subs	r3, r1, r3
 80025e8:	429a      	cmp	r2, r3
 80025ea:	da0a      	bge.n	8002602 <Copybuf2dis+0xa6>
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	781a      	ldrb	r2, [r3, #0]
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	440b      	add	r3, r1
 80025fa:	3a80      	subs	r2, #128	; 0x80
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]
		else dis[dispoint+1] += 128;
	}
}
 8002600:	e00b      	b.n	800261a <Copybuf2dis+0xbe>
		else dis[dispoint+1] += 128;
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	3301      	adds	r3, #1
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	3301      	adds	r3, #1
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	440b      	add	r3, r1
 8002614:	3a80      	subs	r2, #128	; 0x80
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <Set_PointFre>:
//
void Set_PointFre(u32 Key_Value, u8* Task_ID)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
	//按键判断
	if(Task_Index != 2){
 800262e:	4b75      	ldr	r3, [pc, #468]	; (8002804 <Set_PointFre+0x1e0>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d06b      	beq.n	800270e <Set_PointFre+0xea>
	switch(Key_Value)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3b01      	subs	r3, #1
 800263a:	2b0e      	cmp	r3, #14
 800263c:	d867      	bhi.n	800270e <Set_PointFre+0xea>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <Set_PointFre+0x20>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	080026cf 	.word	0x080026cf
 8002648:	08002701 	.word	0x08002701
 800264c:	080026dd 	.word	0x080026dd
 8002650:	08002681 	.word	0x08002681
 8002654:	080026b3 	.word	0x080026b3
 8002658:	0800270f 	.word	0x0800270f
 800265c:	0800270f 	.word	0x0800270f
 8002660:	0800270f 	.word	0x0800270f
 8002664:	0800270f 	.word	0x0800270f
 8002668:	0800270f 	.word	0x0800270f
 800266c:	080026c1 	.word	0x080026c1
 8002670:	0800270f 	.word	0x0800270f
 8002674:	080026ef 	.word	0x080026ef
 8002678:	08002693 	.word	0x08002693
 800267c:	080026a5 	.word	0x080026a5
	{
		case K_4_S: fre_buf[P_Index]++;break;
 8002680:	4b61      	ldr	r3, [pc, #388]	; (8002808 <Set_PointFre+0x1e4>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4a61      	ldr	r2, [pc, #388]	; (800280c <Set_PointFre+0x1e8>)
 8002686:	5cd2      	ldrb	r2, [r2, r3]
 8002688:	3201      	adds	r2, #1
 800268a:	b2d1      	uxtb	r1, r2
 800268c:	4a5f      	ldr	r2, [pc, #380]	; (800280c <Set_PointFre+0x1e8>)
 800268e:	54d1      	strb	r1, [r2, r3]
 8002690:	e03d      	b.n	800270e <Set_PointFre+0xea>
		case K_4_L: fre_buf[P_Index]++;break;
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <Set_PointFre+0x1e4>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4a5d      	ldr	r2, [pc, #372]	; (800280c <Set_PointFre+0x1e8>)
 8002698:	5cd2      	ldrb	r2, [r2, r3]
 800269a:	3201      	adds	r2, #1
 800269c:	b2d1      	uxtb	r1, r2
 800269e:	4a5b      	ldr	r2, [pc, #364]	; (800280c <Set_PointFre+0x1e8>)
 80026a0:	54d1      	strb	r1, [r2, r3]
 80026a2:	e034      	b.n	800270e <Set_PointFre+0xea>
		case K_5_L: P_Index++;break;
 80026a4:	4b58      	ldr	r3, [pc, #352]	; (8002808 <Set_PointFre+0x1e4>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b56      	ldr	r3, [pc, #344]	; (8002808 <Set_PointFre+0x1e4>)
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e02d      	b.n	800270e <Set_PointFre+0xea>
		case K_5_S: P_Index++;break;
 80026b2:	4b55      	ldr	r3, [pc, #340]	; (8002808 <Set_PointFre+0x1e4>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4b53      	ldr	r3, [pc, #332]	; (8002808 <Set_PointFre+0x1e4>)
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e026      	b.n	800270e <Set_PointFre+0xea>
		case K_1_L: P_Index--;break;
 80026c0:	4b51      	ldr	r3, [pc, #324]	; (8002808 <Set_PointFre+0x1e4>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <Set_PointFre+0x1e4>)
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e01f      	b.n	800270e <Set_PointFre+0xea>
		case K_1_S: P_Index--;break;
 80026ce:	4b4e      	ldr	r3, [pc, #312]	; (8002808 <Set_PointFre+0x1e4>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <Set_PointFre+0x1e4>)
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e018      	b.n	800270e <Set_PointFre+0xea>
		case K_3_S: fre_buf[P_Index]--;break;
 80026dc:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <Set_PointFre+0x1e4>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4a4a      	ldr	r2, [pc, #296]	; (800280c <Set_PointFre+0x1e8>)
 80026e2:	5cd2      	ldrb	r2, [r2, r3]
 80026e4:	3a01      	subs	r2, #1
 80026e6:	b2d1      	uxtb	r1, r2
 80026e8:	4a48      	ldr	r2, [pc, #288]	; (800280c <Set_PointFre+0x1e8>)
 80026ea:	54d1      	strb	r1, [r2, r3]
 80026ec:	e00f      	b.n	800270e <Set_PointFre+0xea>
		case K_3_L: fre_buf[P_Index]--;break;
 80026ee:	4b46      	ldr	r3, [pc, #280]	; (8002808 <Set_PointFre+0x1e4>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4a46      	ldr	r2, [pc, #280]	; (800280c <Set_PointFre+0x1e8>)
 80026f4:	5cd2      	ldrb	r2, [r2, r3]
 80026f6:	3a01      	subs	r2, #1
 80026f8:	b2d1      	uxtb	r1, r2
 80026fa:	4a44      	ldr	r2, [pc, #272]	; (800280c <Set_PointFre+0x1e8>)
 80026fc:	54d1      	strb	r1, [r2, r3]
 80026fe:	e006      	b.n	800270e <Set_PointFre+0xea>
		case K_2_S: Param_Mode++;break;
 8002700:	4b43      	ldr	r3, [pc, #268]	; (8002810 <Set_PointFre+0x1ec>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4b41      	ldr	r3, [pc, #260]	; (8002810 <Set_PointFre+0x1ec>)
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	bf00      	nop
	}}
	if(fre_buf[P_Index] == '/') fre_buf[P_Index] = '9';//<'0'
 800270e:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <Set_PointFre+0x1e4>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	4b3d      	ldr	r3, [pc, #244]	; (800280c <Set_PointFre+0x1e8>)
 8002716:	5c9b      	ldrb	r3, [r3, r2]
 8002718:	2b2f      	cmp	r3, #47	; 0x2f
 800271a:	d105      	bne.n	8002728 <Set_PointFre+0x104>
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <Set_PointFre+0x1e4>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b3a      	ldr	r3, [pc, #232]	; (800280c <Set_PointFre+0x1e8>)
 8002724:	2139      	movs	r1, #57	; 0x39
 8002726:	5499      	strb	r1, [r3, r2]
	if(fre_buf[P_Index] == ':') fre_buf[P_Index] = '0';//>'9'
 8002728:	4b37      	ldr	r3, [pc, #220]	; (8002808 <Set_PointFre+0x1e4>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <Set_PointFre+0x1e8>)
 8002730:	5c9b      	ldrb	r3, [r3, r2]
 8002732:	2b3a      	cmp	r3, #58	; 0x3a
 8002734:	d105      	bne.n	8002742 <Set_PointFre+0x11e>
 8002736:	4b34      	ldr	r3, [pc, #208]	; (8002808 <Set_PointFre+0x1e4>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	4b33      	ldr	r3, [pc, #204]	; (800280c <Set_PointFre+0x1e8>)
 800273e:	2130      	movs	r1, #48	; 0x30
 8002740:	5499      	strb	r1, [r3, r2]
	//界面切换
	if(Key_Value == K_2_L)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d107      	bne.n	8002758 <Set_PointFre+0x134>
	{
		Task_Index++;
 8002748:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <Set_PointFre+0x1e0>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <Set_PointFre+0x1e0>)
 8002752:	701a      	strb	r2, [r3, #0]
		LCD_Clear();
 8002754:	f7ff fac8 	bl	8001ce8 <LCD_Clear>
	}
	if(Key_Value == K_2_L || Key_Value == K_2_S) Task_First=1;//更新第一次进入
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d002      	beq.n	8002764 <Set_PointFre+0x140>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d102      	bne.n	800276a <Set_PointFre+0x146>
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <Set_PointFre+0x1f0>)
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
	if(Task_Index >= Interface) Task_Index=0;
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <Set_PointFre+0x1e0>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <Set_PointFre+0x154>
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <Set_PointFre+0x1e0>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
	switch(Task_Index)
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <Set_PointFre+0x1e0>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d00e      	beq.n	800279e <Set_PointFre+0x17a>
 8002780:	2b02      	cmp	r3, #2
 8002782:	dc0f      	bgt.n	80027a4 <Set_PointFre+0x180>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <Set_PointFre+0x16a>
 8002788:	2b01      	cmp	r3, #1
 800278a:	d004      	beq.n	8002796 <Set_PointFre+0x172>
 800278c:	e00a      	b.n	80027a4 <Set_PointFre+0x180>
	{
		case 0:
			Task0_PointFre(Key_Value);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f84c 	bl	800282c <Task0_PointFre>
			break;
 8002794:	e006      	b.n	80027a4 <Set_PointFre+0x180>
		case 1:
			Task1_SweepFre(Key_Value);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f8fa 	bl	8002990 <Task1_SweepFre>
			break;
 800279c:	e002      	b.n	80027a4 <Set_PointFre+0x180>
		case 2:
			Task2_DrawSpectrum(Key_Value);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fb24 	bl	8002dec <Task2_DrawSpectrum>
	}
	//其他处理
	if(Task_Index == 1 || Task_Index == 2)
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <Set_PointFre+0x1e0>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d003      	beq.n	80027b4 <Set_PointFre+0x190>
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <Set_PointFre+0x1e0>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d11e      	bne.n	80027f2 <Set_PointFre+0x1ce>
	{
		SweepFlag = 1;
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <Set_PointFre+0x1f4>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
		ADC_Value = HAL_ADC_GetValue(&hadc1);
 80027ba:	4818      	ldr	r0, [pc, #96]	; (800281c <Set_PointFre+0x1f8>)
 80027bc:	f000 ff1e 	bl	80035fc <HAL_ADC_GetValue>
 80027c0:	4603      	mov	r3, r0
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <Set_PointFre+0x1fc>)
 80027c6:	801a      	strh	r2, [r3, #0]
		if(ADC_1stepVmax < ADC_Value) ADC_1stepVmax = ADC_Value;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <Set_PointFre+0x200>)
 80027ca:	881a      	ldrh	r2, [r3, #0]
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <Set_PointFre+0x1fc>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d203      	bcs.n	80027dc <Set_PointFre+0x1b8>
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <Set_PointFre+0x1fc>)
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <Set_PointFre+0x200>)
 80027da:	801a      	strh	r2, [r3, #0]
		if(ADC_1stepVmin > ADC_Value) ADC_1stepVmin = ADC_Value;
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <Set_PointFre+0x204>)
 80027de:	881a      	ldrh	r2, [r3, #0]
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <Set_PointFre+0x1fc>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d908      	bls.n	80027fa <Set_PointFre+0x1d6>
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <Set_PointFre+0x1fc>)
 80027ea:	881a      	ldrh	r2, [r3, #0]
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <Set_PointFre+0x204>)
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	e003      	b.n	80027fa <Set_PointFre+0x1d6>
	}
	else
		SweepFlag = 0;
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <Set_PointFre+0x1f4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]

}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000d58 	.word	0x20000d58
 8002808:	20001544 	.word	0x20001544
 800280c:	20000d5c 	.word	0x20000d5c
 8002810:	20000d59 	.word	0x20000d59
 8002814:	20000840 	.word	0x20000840
 8002818:	20001546 	.word	0x20001546
 800281c:	200008ec 	.word	0x200008ec
 8002820:	200008e4 	.word	0x200008e4
 8002824:	200008e6 	.word	0x200008e6
 8002828:	200008e8 	.word	0x200008e8

0800282c <Task0_PointFre>:
//任务
//
void Task0_PointFre(u32 Key_Value)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
	static u32 SinFre = 80000;//第一次进入页面默认输出
	u8 showstr[StrMax]={0};
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	809a      	strh	r2, [r3, #4]

	if(Task_First)
 8002842:	4b47      	ldr	r3, [pc, #284]	; (8002960 <Task0_PointFre+0x134>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d013      	beq.n	8002872 <Task0_PointFre+0x46>
	{
		Task_First = 0;
 800284a:	4b45      	ldr	r3, [pc, #276]	; (8002960 <Task0_PointFre+0x134>)
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
		Key_Value = K_2_S;
 8002850:	2302      	movs	r3, #2
 8002852:	607b      	str	r3, [r7, #4]
		sprintf(fre_buf, "%7d", SinFre);//第一次 进入
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <Task0_PointFre+0x138>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4943      	ldr	r1, [pc, #268]	; (8002968 <Task0_PointFre+0x13c>)
 800285c:	4843      	ldr	r0, [pc, #268]	; (800296c <Task0_PointFre+0x140>)
 800285e:	f002 fc4d 	bl	80050fc <siprintf>
		LCD_Show_CEStr(64-8*3,0,"DotFrq");
 8002862:	4a43      	ldr	r2, [pc, #268]	; (8002970 <Task0_PointFre+0x144>)
 8002864:	2100      	movs	r1, #0
 8002866:	2028      	movs	r0, #40	; 0x28
 8002868:	f7ff fcb5 	bl	80021d6 <LCD_Show_CEStr>

		_return=1;
 800286c:	4b41      	ldr	r3, [pc, #260]	; (8002974 <Task0_PointFre+0x148>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
	}
	if(Key_Value != K_NO)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d06e      	beq.n	8002956 <Task0_PointFre+0x12a>
	{
		//判断
		if(P_Index == 255)
 8002878:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <Task0_PointFre+0x14c>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2bff      	cmp	r3, #255	; 0xff
 800287e:	d102      	bne.n	8002886 <Task0_PointFre+0x5a>
			P_Index = 6;
 8002880:	4b3d      	ldr	r3, [pc, #244]	; (8002978 <Task0_PointFre+0x14c>)
 8002882:	2206      	movs	r2, #6
 8002884:	701a      	strb	r2, [r3, #0]
		P_Index = P_Index%7;//数据位数
 8002886:	4b3c      	ldr	r3, [pc, #240]	; (8002978 <Task0_PointFre+0x14c>)
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	4b3c      	ldr	r3, [pc, #240]	; (800297c <Task0_PointFre+0x150>)
 800288c:	fba3 1302 	umull	r1, r3, r3, r2
 8002890:	1ad1      	subs	r1, r2, r3
 8002892:	0849      	lsrs	r1, r1, #1
 8002894:	440b      	add	r3, r1
 8002896:	0899      	lsrs	r1, r3, #2
 8002898:	460b      	mov	r3, r1
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	1a5b      	subs	r3, r3, r1
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b35      	ldr	r3, [pc, #212]	; (8002978 <Task0_PointFre+0x14c>)
 80028a4:	701a      	strb	r2, [r3, #0]
		SinFre = atol(fre_buf);//字符转换数字，判断上下限
 80028a6:	4831      	ldr	r0, [pc, #196]	; (800296c <Task0_PointFre+0x140>)
 80028a8:	f002 fb9c 	bl	8004fe4 <atol>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <Task0_PointFre+0x138>)
 80028b2:	601a      	str	r2, [r3, #0]
//		((u32)fre_buf[2]-'0')*10000+
//		((u32)fre_buf[3]-'0')*1000+
//		((u32)fre_buf[4]-'0')*100+
//		((u32)fre_buf[5]-'0')*10+
//		((u32)fre_buf[6]-'0');
		if(SinFre>4400000) SinFre=4400000;//数据限制
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <Task0_PointFre+0x138>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a31      	ldr	r2, [pc, #196]	; (8002980 <Task0_PointFre+0x154>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d902      	bls.n	80028c4 <Task0_PointFre+0x98>
 80028be:	4b29      	ldr	r3, [pc, #164]	; (8002964 <Task0_PointFre+0x138>)
 80028c0:	4a2f      	ldr	r2, [pc, #188]	; (8002980 <Task0_PointFre+0x154>)
 80028c2:	601a      	str	r2, [r3, #0]
		if(SinFre<45000) SinFre=45000;
 80028c4:	4b27      	ldr	r3, [pc, #156]	; (8002964 <Task0_PointFre+0x138>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d803      	bhi.n	80028d8 <Task0_PointFre+0xac>
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <Task0_PointFre+0x138>)
 80028d2:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80028d6:	601a      	str	r2, [r3, #0]
		sprintf(fre_buf, "%7d", SinFre);//字符转换
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <Task0_PointFre+0x138>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	4922      	ldr	r1, [pc, #136]	; (8002968 <Task0_PointFre+0x13c>)
 80028e0:	4822      	ldr	r0, [pc, #136]	; (800296c <Task0_PointFre+0x140>)
 80028e2:	f002 fc0b 	bl	80050fc <siprintf>
		//显示
		sprintf(showstr, "%7d", SinFre);//字符转换
 80028e6:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <Task0_PointFre+0x138>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	491e      	ldr	r1, [pc, #120]	; (8002968 <Task0_PointFre+0x13c>)
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 fc03 	bl	80050fc <siprintf>
		fre_buf_change(showstr);//fre_buf当中 ‘ '->'0'
 80028f6:	f107 030c 	add.w	r3, r7, #12
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fb58 	bl	8002fb0 <fre_buf_change>
		Copybuf2dis(showstr, display, P_Index, 0, 1);
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <Task0_PointFre+0x14c>)
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	f107 000c 	add.w	r0, r7, #12
 8002908:	2301      	movs	r3, #1
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2300      	movs	r3, #0
 800290e:	491d      	ldr	r1, [pc, #116]	; (8002984 <Task0_PointFre+0x158>)
 8002910:	f7ff fe24 	bl	800255c <Copybuf2dis>
		OLED_ShowString(64-4*11, 3, display);
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <Task0_PointFre+0x158>)
 8002916:	2103      	movs	r1, #3
 8002918:	2014      	movs	r0, #20
 800291a:	f7ff fc72 	bl	8002202 <OLED_ShowString>
		LCD_Show_CEStr(64-4*11+7*8,3,"kHz");
 800291e:	4a1a      	ldr	r2, [pc, #104]	; (8002988 <Task0_PointFre+0x15c>)
 8002920:	2103      	movs	r1, #3
 8002922:	204c      	movs	r0, #76	; 0x4c
 8002924:	f7ff fc57 	bl	80021d6 <LCD_Show_CEStr>
		//数据处理写入
		ADF4351WriteFreq((double)SinFre/1000);
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <Task0_PointFre+0x138>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd fd57 	bl	80003e0 <__aeabi_ui2d>
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <Task0_PointFre+0x160>)
 8002938:	f7fd fef6 	bl	8000728 <__aeabi_ddiv>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	f7fd ffd8 	bl	80008f8 <__aeabi_d2f>
 8002948:	4603      	mov	r3, r0
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fc1c 	bl	8001188 <ADF4351WriteFreq>

		_return=1;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <Task0_PointFre+0x148>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
	}
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000840 	.word	0x20000840
 8002964:	2000086c 	.word	0x2000086c
 8002968:	08005a88 	.word	0x08005a88
 800296c:	20000d5c 	.word	0x20000d5c
 8002970:	08005a8c 	.word	0x08005a8c
 8002974:	20001545 	.word	0x20001545
 8002978:	20001544 	.word	0x20001544
 800297c:	24924925 	.word	0x24924925
 8002980:	00432380 	.word	0x00432380
 8002984:	20000d68 	.word	0x20000d68
 8002988:	08005a94 	.word	0x08005a94
 800298c:	408f4000 	.word	0x408f4000

08002990 <Task1_SweepFre>:


void Task1_SweepFre(u32 Key_Value)//扫频
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	6078      	str	r0, [r7, #4]
	u8 showstr[StrMax]={0};
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	f107 0310 	add.w	r3, r7, #16
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	809a      	strh	r2, [r3, #4]

	if(Task_First)
 80029a6:	4b81      	ldr	r3, [pc, #516]	; (8002bac <Task1_SweepFre+0x21c>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d03f      	beq.n	8002a2e <Task1_SweepFre+0x9e>
	{
		Task_First = 0;//清除第一次进入标记
 80029ae:	4b7f      	ldr	r3, [pc, #508]	; (8002bac <Task1_SweepFre+0x21c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
		Key_Value = K_2_S;
 80029b4:	2302      	movs	r3, #2
 80029b6:	607b      	str	r3, [r7, #4]
		Param_Mode %= 4;//计算参数模式，以便装入初始值
 80029b8:	4b7d      	ldr	r3, [pc, #500]	; (8002bb0 <Task1_SweepFre+0x220>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b7b      	ldr	r3, [pc, #492]	; (8002bb0 <Task1_SweepFre+0x220>)
 80029c4:	701a      	strb	r2, [r3, #0]
		if(Param_Mode == 0) sprintf(fre_buf, "%7d", SweepMinFre);
 80029c6:	4b7a      	ldr	r3, [pc, #488]	; (8002bb0 <Task1_SweepFre+0x220>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <Task1_SweepFre+0x4c>
 80029ce:	4b79      	ldr	r3, [pc, #484]	; (8002bb4 <Task1_SweepFre+0x224>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4978      	ldr	r1, [pc, #480]	; (8002bb8 <Task1_SweepFre+0x228>)
 80029d6:	4879      	ldr	r0, [pc, #484]	; (8002bbc <Task1_SweepFre+0x22c>)
 80029d8:	f002 fb90 	bl	80050fc <siprintf>
		if(Param_Mode == 1) sprintf(fre_buf, "%7d", SweepMaxFre);
 80029dc:	4b74      	ldr	r3, [pc, #464]	; (8002bb0 <Task1_SweepFre+0x220>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <Task1_SweepFre+0x62>
 80029e4:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <Task1_SweepFre+0x230>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4973      	ldr	r1, [pc, #460]	; (8002bb8 <Task1_SweepFre+0x228>)
 80029ec:	4873      	ldr	r0, [pc, #460]	; (8002bbc <Task1_SweepFre+0x22c>)
 80029ee:	f002 fb85 	bl	80050fc <siprintf>
		if(Param_Mode == 2) sprintf(fre_buf, "%4d", SweepStepFre);
 80029f2:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <Task1_SweepFre+0x220>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d106      	bne.n	8002a08 <Task1_SweepFre+0x78>
 80029fa:	4b72      	ldr	r3, [pc, #456]	; (8002bc4 <Task1_SweepFre+0x234>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4971      	ldr	r1, [pc, #452]	; (8002bc8 <Task1_SweepFre+0x238>)
 8002a02:	486e      	ldr	r0, [pc, #440]	; (8002bbc <Task1_SweepFre+0x22c>)
 8002a04:	f002 fb7a 	bl	80050fc <siprintf>
		if(Param_Mode == 3) sprintf(fre_buf, "%3d", SweepTime);
 8002a08:	4b69      	ldr	r3, [pc, #420]	; (8002bb0 <Task1_SweepFre+0x220>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d106      	bne.n	8002a1e <Task1_SweepFre+0x8e>
 8002a10:	4b6e      	ldr	r3, [pc, #440]	; (8002bcc <Task1_SweepFre+0x23c>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	496e      	ldr	r1, [pc, #440]	; (8002bd0 <Task1_SweepFre+0x240>)
 8002a18:	4868      	ldr	r0, [pc, #416]	; (8002bbc <Task1_SweepFre+0x22c>)
 8002a1a:	f002 fb6f 	bl	80050fc <siprintf>


		LCD_Show_CEStr(64-8*3,0,"SwpFrq");//模式名称
 8002a1e:	4a6d      	ldr	r2, [pc, #436]	; (8002bd4 <Task1_SweepFre+0x244>)
 8002a20:	2100      	movs	r1, #0
 8002a22:	2028      	movs	r0, #40	; 0x28
 8002a24:	f7ff fbd7 	bl	80021d6 <LCD_Show_CEStr>
		_return=1;//更新显示标志
 8002a28:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <Task1_SweepFre+0x248>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
	}
	if(Key_Value != K_NO)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 81b8 	beq.w	8002da6 <Task1_SweepFre+0x416>
	{

		if(Param_Mode == 0)//最小频率设置
 8002a36:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <Task1_SweepFre+0x220>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d131      	bne.n	8002aa2 <Task1_SweepFre+0x112>
		{
			P_Index %= 7;//参数位数
 8002a3e:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <Task1_SweepFre+0x24c>)
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	4b67      	ldr	r3, [pc, #412]	; (8002be0 <Task1_SweepFre+0x250>)
 8002a44:	fba3 1302 	umull	r1, r3, r3, r2
 8002a48:	1ad1      	subs	r1, r2, r3
 8002a4a:	0849      	lsrs	r1, r1, #1
 8002a4c:	440b      	add	r3, r1
 8002a4e:	0899      	lsrs	r1, r3, #2
 8002a50:	460b      	mov	r3, r1
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a5b      	subs	r3, r3, r1
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b60      	ldr	r3, [pc, #384]	; (8002bdc <Task1_SweepFre+0x24c>)
 8002a5c:	701a      	strb	r2, [r3, #0]
			SweepMinFre = atol(fre_buf);//字符转换
 8002a5e:	4857      	ldr	r0, [pc, #348]	; (8002bbc <Task1_SweepFre+0x22c>)
 8002a60:	f002 fac0 	bl	8004fe4 <atol>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b52      	ldr	r3, [pc, #328]	; (8002bb4 <Task1_SweepFre+0x224>)
 8002a6a:	601a      	str	r2, [r3, #0]
			if(SweepMinFre>SweepMaxFre) SweepMinFre=SweepMaxFre;//数据限制
 8002a6c:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <Task1_SweepFre+0x224>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <Task1_SweepFre+0x230>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d903      	bls.n	8002a80 <Task1_SweepFre+0xf0>
 8002a78:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <Task1_SweepFre+0x230>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a4d      	ldr	r2, [pc, #308]	; (8002bb4 <Task1_SweepFre+0x224>)
 8002a7e:	6013      	str	r3, [r2, #0]
			if(SweepMinFre<45000) SweepMinFre=45000;
 8002a80:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <Task1_SweepFre+0x224>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d803      	bhi.n	8002a94 <Task1_SweepFre+0x104>
 8002a8c:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <Task1_SweepFre+0x224>)
 8002a8e:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8002a92:	601a      	str	r2, [r3, #0]
			sprintf(fre_buf, "%7d", SweepMinFre);//数据重新写入
 8002a94:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <Task1_SweepFre+0x224>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4947      	ldr	r1, [pc, #284]	; (8002bb8 <Task1_SweepFre+0x228>)
 8002a9c:	4847      	ldr	r0, [pc, #284]	; (8002bbc <Task1_SweepFre+0x22c>)
 8002a9e:	f002 fb2d 	bl	80050fc <siprintf>
		}
		//显示
		sprintf(showstr, "%7d", SweepMinFre);//重新申请缓存显示
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <Task1_SweepFre+0x224>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	4943      	ldr	r1, [pc, #268]	; (8002bb8 <Task1_SweepFre+0x228>)
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 fb25 	bl	80050fc <siprintf>
		fre_buf_change(showstr);//fre_buf当中 ‘ '->'0'
 8002ab2:	f107 030c 	add.w	r3, r7, #12
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fa7a 	bl	8002fb0 <fre_buf_change>
		if(Param_Mode == 0) Copybuf2dis(showstr, display, P_Index, 0, 1);
 8002abc:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <Task1_SweepFre+0x220>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <Task1_SweepFre+0x14a>
 8002ac4:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <Task1_SweepFre+0x24c>)
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	f107 000c 	add.w	r0, r7, #12
 8002acc:	2301      	movs	r3, #1
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	4944      	ldr	r1, [pc, #272]	; (8002be4 <Task1_SweepFre+0x254>)
 8002ad4:	f7ff fd42 	bl	800255c <Copybuf2dis>
 8002ad8:	e009      	b.n	8002aee <Task1_SweepFre+0x15e>
		else Copybuf2dis(showstr, display, P_Index, 0, 0);
 8002ada:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <Task1_SweepFre+0x24c>)
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	f107 000c 	add.w	r0, r7, #12
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	493e      	ldr	r1, [pc, #248]	; (8002be4 <Task1_SweepFre+0x254>)
 8002aea:	f7ff fd37 	bl	800255c <Copybuf2dis>
		OLED_ShowString(64-4*11+16, 2, display);
 8002aee:	4a3d      	ldr	r2, [pc, #244]	; (8002be4 <Task1_SweepFre+0x254>)
 8002af0:	2102      	movs	r1, #2
 8002af2:	2024      	movs	r0, #36	; 0x24
 8002af4:	f7ff fb85 	bl	8002202 <OLED_ShowString>
		LCD_Show_CEStr(64-4*11+7*8+16,2,"kHz");
 8002af8:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <Task1_SweepFre+0x258>)
 8002afa:	2102      	movs	r1, #2
 8002afc:	205c      	movs	r0, #92	; 0x5c
 8002afe:	f7ff fb6a 	bl	80021d6 <LCD_Show_CEStr>
		LCD_Show_CEStr(0,2,"Min:");
 8002b02:	4a3a      	ldr	r2, [pc, #232]	; (8002bec <Task1_SweepFre+0x25c>)
 8002b04:	2102      	movs	r1, #2
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7ff fb65 	bl	80021d6 <LCD_Show_CEStr>

		if(Param_Mode == 1)//最大频率设置
 8002b0c:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <Task1_SweepFre+0x220>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d12f      	bne.n	8002b74 <Task1_SweepFre+0x1e4>
		{
			P_Index %= 7;//参数位数
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <Task1_SweepFre+0x24c>)
 8002b16:	781a      	ldrb	r2, [r3, #0]
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <Task1_SweepFre+0x250>)
 8002b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b1e:	1ad1      	subs	r1, r2, r3
 8002b20:	0849      	lsrs	r1, r1, #1
 8002b22:	440b      	add	r3, r1
 8002b24:	0899      	lsrs	r1, r3, #2
 8002b26:	460b      	mov	r3, r1
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a5b      	subs	r3, r3, r1
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <Task1_SweepFre+0x24c>)
 8002b32:	701a      	strb	r2, [r3, #0]
			SweepMaxFre = atol(fre_buf);//字符转换
 8002b34:	4821      	ldr	r0, [pc, #132]	; (8002bbc <Task1_SweepFre+0x22c>)
 8002b36:	f002 fa55 	bl	8004fe4 <atol>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <Task1_SweepFre+0x230>)
 8002b40:	601a      	str	r2, [r3, #0]
			if(SweepMaxFre>4400000) SweepMaxFre=4400000;//数据限制
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <Task1_SweepFre+0x230>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <Task1_SweepFre+0x260>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d902      	bls.n	8002b52 <Task1_SweepFre+0x1c2>
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <Task1_SweepFre+0x230>)
 8002b4e:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <Task1_SweepFre+0x260>)
 8002b50:	601a      	str	r2, [r3, #0]
			if(SweepMaxFre<50000) SweepMaxFre=50000;
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <Task1_SweepFre+0x230>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d803      	bhi.n	8002b66 <Task1_SweepFre+0x1d6>
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <Task1_SweepFre+0x230>)
 8002b60:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002b64:	601a      	str	r2, [r3, #0]
			sprintf(fre_buf, "%7d", SweepMaxFre);//数据重新写入
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <Task1_SweepFre+0x230>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4912      	ldr	r1, [pc, #72]	; (8002bb8 <Task1_SweepFre+0x228>)
 8002b6e:	4813      	ldr	r0, [pc, #76]	; (8002bbc <Task1_SweepFre+0x22c>)
 8002b70:	f002 fac4 	bl	80050fc <siprintf>
		}
		//显示
		sprintf(showstr, "%7d", SweepMaxFre);//重新申请缓存显示
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <Task1_SweepFre+0x230>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	490e      	ldr	r1, [pc, #56]	; (8002bb8 <Task1_SweepFre+0x228>)
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fabc 	bl	80050fc <siprintf>
		fre_buf_change(showstr);//fre_buf当中 ‘ '->'0'
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fa11 	bl	8002fb0 <fre_buf_change>
		if(Param_Mode == 1) Copybuf2dis(showstr, display, P_Index, 0, 1);
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <Task1_SweepFre+0x220>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d12e      	bne.n	8002bf4 <Task1_SweepFre+0x264>
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <Task1_SweepFre+0x24c>)
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	f107 000c 	add.w	r0, r7, #12
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	490f      	ldr	r1, [pc, #60]	; (8002be4 <Task1_SweepFre+0x254>)
 8002ba6:	f7ff fcd9 	bl	800255c <Copybuf2dis>
 8002baa:	e02d      	b.n	8002c08 <Task1_SweepFre+0x278>
 8002bac:	20000840 	.word	0x20000840
 8002bb0:	20000d59 	.word	0x20000d59
 8002bb4:	20000844 	.word	0x20000844
 8002bb8:	08005a88 	.word	0x08005a88
 8002bbc:	20000d5c 	.word	0x20000d5c
 8002bc0:	20000848 	.word	0x20000848
 8002bc4:	2000084c 	.word	0x2000084c
 8002bc8:	08005a98 	.word	0x08005a98
 8002bcc:	20000850 	.word	0x20000850
 8002bd0:	08005a9c 	.word	0x08005a9c
 8002bd4:	08005aa0 	.word	0x08005aa0
 8002bd8:	20001545 	.word	0x20001545
 8002bdc:	20001544 	.word	0x20001544
 8002be0:	24924925 	.word	0x24924925
 8002be4:	20000d68 	.word	0x20000d68
 8002be8:	08005a94 	.word	0x08005a94
 8002bec:	08005aa8 	.word	0x08005aa8
 8002bf0:	00432380 	.word	0x00432380
		else Copybuf2dis(showstr, display, P_Index, 0, 0);
 8002bf4:	4b6e      	ldr	r3, [pc, #440]	; (8002db0 <Task1_SweepFre+0x420>)
 8002bf6:	781a      	ldrb	r2, [r3, #0]
 8002bf8:	f107 000c 	add.w	r0, r7, #12
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	496c      	ldr	r1, [pc, #432]	; (8002db4 <Task1_SweepFre+0x424>)
 8002c04:	f7ff fcaa 	bl	800255c <Copybuf2dis>
		OLED_ShowString(64-4*11+16, 4, display);
 8002c08:	4a6a      	ldr	r2, [pc, #424]	; (8002db4 <Task1_SweepFre+0x424>)
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	2024      	movs	r0, #36	; 0x24
 8002c0e:	f7ff faf8 	bl	8002202 <OLED_ShowString>
		LCD_Show_CEStr(64-4*11+7*8+16,4,"kHz");
 8002c12:	4a69      	ldr	r2, [pc, #420]	; (8002db8 <Task1_SweepFre+0x428>)
 8002c14:	2104      	movs	r1, #4
 8002c16:	205c      	movs	r0, #92	; 0x5c
 8002c18:	f7ff fadd 	bl	80021d6 <LCD_Show_CEStr>
		LCD_Show_CEStr(0,4,"Max:");
 8002c1c:	4a67      	ldr	r2, [pc, #412]	; (8002dbc <Task1_SweepFre+0x42c>)
 8002c1e:	2104      	movs	r1, #4
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7ff fad8 	bl	80021d6 <LCD_Show_CEStr>

		if(Param_Mode == 2)//频率步进设置
 8002c26:	4b66      	ldr	r3, [pc, #408]	; (8002dc0 <Task1_SweepFre+0x430>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d122      	bne.n	8002c74 <Task1_SweepFre+0x2e4>
		{
			P_Index %= 5;//参数位数
 8002c2e:	4b60      	ldr	r3, [pc, #384]	; (8002db0 <Task1_SweepFre+0x420>)
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <Task1_SweepFre+0x434>)
 8002c34:	fba3 1302 	umull	r1, r3, r3, r2
 8002c38:	0899      	lsrs	r1, r3, #2
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b5a      	ldr	r3, [pc, #360]	; (8002db0 <Task1_SweepFre+0x420>)
 8002c46:	701a      	strb	r2, [r3, #0]
			SweepStepFre = atol(fre_buf);//字符转换
 8002c48:	485f      	ldr	r0, [pc, #380]	; (8002dc8 <Task1_SweepFre+0x438>)
 8002c4a:	f002 f9cb 	bl	8004fe4 <atol>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b5e      	ldr	r3, [pc, #376]	; (8002dcc <Task1_SweepFre+0x43c>)
 8002c54:	601a      	str	r2, [r3, #0]
			if(SweepStepFre>99999) SweepStepFre=99999;//数据限制
 8002c56:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <Task1_SweepFre+0x43c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5d      	ldr	r2, [pc, #372]	; (8002dd0 <Task1_SweepFre+0x440>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d902      	bls.n	8002c66 <Task1_SweepFre+0x2d6>
 8002c60:	4b5a      	ldr	r3, [pc, #360]	; (8002dcc <Task1_SweepFre+0x43c>)
 8002c62:	4a5b      	ldr	r2, [pc, #364]	; (8002dd0 <Task1_SweepFre+0x440>)
 8002c64:	601a      	str	r2, [r3, #0]
			if(SweepStepFre<0) SweepStepFre=0;
			sprintf(fre_buf, "%5d", SweepStepFre);//数据重新写入
 8002c66:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <Task1_SweepFre+0x43c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4959      	ldr	r1, [pc, #356]	; (8002dd4 <Task1_SweepFre+0x444>)
 8002c6e:	4856      	ldr	r0, [pc, #344]	; (8002dc8 <Task1_SweepFre+0x438>)
 8002c70:	f002 fa44 	bl	80050fc <siprintf>
		}
		//显示
		sprintf(showstr, "%5d", SweepStepFre);//重新申请缓存显示
 8002c74:	4b55      	ldr	r3, [pc, #340]	; (8002dcc <Task1_SweepFre+0x43c>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	4955      	ldr	r1, [pc, #340]	; (8002dd4 <Task1_SweepFre+0x444>)
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f002 fa3c 	bl	80050fc <siprintf>
		fre_buf_change(showstr);//fre_buf当中 ‘ '->'0'
 8002c84:	f107 030c 	add.w	r3, r7, #12
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f991 	bl	8002fb0 <fre_buf_change>
		if(Param_Mode == 2) Copybuf2dis(showstr, display, P_Index, 0, 1);
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <Task1_SweepFre+0x430>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d10a      	bne.n	8002cac <Task1_SweepFre+0x31c>
 8002c96:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <Task1_SweepFre+0x420>)
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	f107 000c 	add.w	r0, r7, #12
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	4943      	ldr	r1, [pc, #268]	; (8002db4 <Task1_SweepFre+0x424>)
 8002ca6:	f7ff fc59 	bl	800255c <Copybuf2dis>
 8002caa:	e009      	b.n	8002cc0 <Task1_SweepFre+0x330>
		else Copybuf2dis(showstr, display, P_Index, 0, 0);
 8002cac:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <Task1_SweepFre+0x420>)
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	f107 000c 	add.w	r0, r7, #12
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	493e      	ldr	r1, [pc, #248]	; (8002db4 <Task1_SweepFre+0x424>)
 8002cbc:	f7ff fc4e 	bl	800255c <Copybuf2dis>
		display[5]=0;//只显示4位
 8002cc0:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <Task1_SweepFre+0x424>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	715a      	strb	r2, [r3, #5]
		OLED_ShowString(0, 6, display);
 8002cc6:	4a3b      	ldr	r2, [pc, #236]	; (8002db4 <Task1_SweepFre+0x424>)
 8002cc8:	2106      	movs	r1, #6
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7ff fa99 	bl	8002202 <OLED_ShowString>
		LCD_Show_CEStr(8*5,6,"kHz");
 8002cd0:	4a39      	ldr	r2, [pc, #228]	; (8002db8 <Task1_SweepFre+0x428>)
 8002cd2:	2106      	movs	r1, #6
 8002cd4:	2028      	movs	r0, #40	; 0x28
 8002cd6:	f7ff fa7e 	bl	80021d6 <LCD_Show_CEStr>

		if(Param_Mode == 3)//步进时间设置
 8002cda:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <Task1_SweepFre+0x430>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d12a      	bne.n	8002d38 <Task1_SweepFre+0x3a8>
		{
			P_Index %= 3;//参数位数
 8002ce2:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <Task1_SweepFre+0x420>)
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	; (8002dd8 <Task1_SweepFre+0x448>)
 8002ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cec:	0859      	lsrs	r1, r3, #1
 8002cee:	460b      	mov	r3, r1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	440b      	add	r3, r1
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <Task1_SweepFre+0x420>)
 8002cfa:	701a      	strb	r2, [r3, #0]
			SweepTime = atol(fre_buf);//字符转换
 8002cfc:	4832      	ldr	r0, [pc, #200]	; (8002dc8 <Task1_SweepFre+0x438>)
 8002cfe:	f002 f971 	bl	8004fe4 <atol>
 8002d02:	4603      	mov	r3, r0
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	4b35      	ldr	r3, [pc, #212]	; (8002ddc <Task1_SweepFre+0x44c>)
 8002d08:	801a      	strh	r2, [r3, #0]
			if(SweepTime>999) SweepTime=999;//数据限制
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <Task1_SweepFre+0x44c>)
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d12:	d303      	bcc.n	8002d1c <Task1_SweepFre+0x38c>
 8002d14:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <Task1_SweepFre+0x44c>)
 8002d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d1a:	801a      	strh	r2, [r3, #0]
			if(SweepTime<1) SweepTime=1;
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <Task1_SweepFre+0x44c>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <Task1_SweepFre+0x39a>
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <Task1_SweepFre+0x44c>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	801a      	strh	r2, [r3, #0]
			sprintf(fre_buf, "%3d", SweepTime);//数据重新写入
 8002d2a:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <Task1_SweepFre+0x44c>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	492b      	ldr	r1, [pc, #172]	; (8002de0 <Task1_SweepFre+0x450>)
 8002d32:	4825      	ldr	r0, [pc, #148]	; (8002dc8 <Task1_SweepFre+0x438>)
 8002d34:	f002 f9e2 	bl	80050fc <siprintf>
		}
		//显示
		sprintf(showstr, "%3d", SweepTime);//重新申请缓存显示
 8002d38:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <Task1_SweepFre+0x44c>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	4927      	ldr	r1, [pc, #156]	; (8002de0 <Task1_SweepFre+0x450>)
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 f9d9 	bl	80050fc <siprintf>
		fre_buf_change(showstr);//fre_buf当中 ‘ '->'0'
 8002d4a:	f107 030c 	add.w	r3, r7, #12
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f92e 	bl	8002fb0 <fre_buf_change>
		if(Param_Mode == 3) Copybuf2dis(showstr, display, P_Index, 0, 1);
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <Task1_SweepFre+0x430>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d10a      	bne.n	8002d72 <Task1_SweepFre+0x3e2>
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <Task1_SweepFre+0x420>)
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	f107 000c 	add.w	r0, r7, #12
 8002d64:	2301      	movs	r3, #1
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	4912      	ldr	r1, [pc, #72]	; (8002db4 <Task1_SweepFre+0x424>)
 8002d6c:	f7ff fbf6 	bl	800255c <Copybuf2dis>
 8002d70:	e009      	b.n	8002d86 <Task1_SweepFre+0x3f6>
		else Copybuf2dis(showstr, display, P_Index, 0, 0);
 8002d72:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <Task1_SweepFre+0x420>)
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	f107 000c 	add.w	r0, r7, #12
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	490c      	ldr	r1, [pc, #48]	; (8002db4 <Task1_SweepFre+0x424>)
 8002d82:	f7ff fbeb 	bl	800255c <Copybuf2dis>
		display[3]=0;//只显示3位
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <Task1_SweepFre+0x424>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	70da      	strb	r2, [r3, #3]
		OLED_ShowString(72, 6, display);
 8002d8c:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <Task1_SweepFre+0x424>)
 8002d8e:	2106      	movs	r1, #6
 8002d90:	2048      	movs	r0, #72	; 0x48
 8002d92:	f7ff fa36 	bl	8002202 <OLED_ShowString>
		LCD_Show_CEStr(72+3*8,6,"ms");
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <Task1_SweepFre+0x454>)
 8002d98:	2106      	movs	r1, #6
 8002d9a:	2060      	movs	r0, #96	; 0x60
 8002d9c:	f7ff fa1b 	bl	80021d6 <LCD_Show_CEStr>
		//数据处理写入

		_return=1;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <Task1_SweepFre+0x458>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
	}
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20001544 	.word	0x20001544
 8002db4:	20000d68 	.word	0x20000d68
 8002db8:	08005a94 	.word	0x08005a94
 8002dbc:	08005ab0 	.word	0x08005ab0
 8002dc0:	20000d59 	.word	0x20000d59
 8002dc4:	cccccccd 	.word	0xcccccccd
 8002dc8:	20000d5c 	.word	0x20000d5c
 8002dcc:	2000084c 	.word	0x2000084c
 8002dd0:	0001869f 	.word	0x0001869f
 8002dd4:	08005ab8 	.word	0x08005ab8
 8002dd8:	aaaaaaab 	.word	0xaaaaaaab
 8002ddc:	20000850 	.word	0x20000850
 8002de0:	08005a9c 	.word	0x08005a9c
 8002de4:	08005abc 	.word	0x08005abc
 8002de8:	20001545 	.word	0x20001545

08002dec <Task2_DrawSpectrum>:
void Task2_DrawSpectrum(u32 Key_Value)
{
 8002dec:	b5b0      	push	{r4, r5, r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	int jj;
//	for(jj=0;jj<CIRCLE;jj++)//排除开始那个奇怪的中心频率
//		if(CenterFre[jj]-SweepMinFre < 2000) CenterFre[jj] = CenterFre[(jj+1)%CIRCLE];
//	u16 spectrum_showbuf[400];
	if(count1 == count1max)
 8002df4:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <Task2_DrawSpectrum+0x180>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b5d      	ldr	r3, [pc, #372]	; (8002f70 <Task2_DrawSpectrum+0x184>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 8087 	bne.w	8002f10 <Task2_DrawSpectrum+0x124>
	{

		// draw spectrum mode,to find center frequency
		for(jj=0,ADC_1stepVmax=0; jj < count1max; jj++)//从FreMin->FreMax找中心频率对应的幅度最大值
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <Task2_DrawSpectrum+0x188>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	801a      	strh	r2, [r3, #0]
 8002e0c:	e01d      	b.n	8002e4a <Task2_DrawSpectrum+0x5e>
			if(spectrum_buf[jj] > ADC_1stepVmax)//ADC_1stepVmax作为临时变量求最大值用
 8002e0e:	4a5a      	ldr	r2, [pc, #360]	; (8002f78 <Task2_DrawSpectrum+0x18c>)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002e16:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <Task2_DrawSpectrum+0x188>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d912      	bls.n	8002e44 <Task2_DrawSpectrum+0x58>
			{
				ADC_1stepVmax = spectrum_buf[jj];
 8002e1e:	4a56      	ldr	r2, [pc, #344]	; (8002f78 <Task2_DrawSpectrum+0x18c>)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002e26:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <Task2_DrawSpectrum+0x188>)
 8002e28:	801a      	strh	r2, [r3, #0]
				CenterFre[circle] = SweepMinFre+SweepStepFre*jj;
 8002e2a:	4b54      	ldr	r3, [pc, #336]	; (8002f7c <Task2_DrawSpectrum+0x190>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	fb03 f202 	mul.w	r2, r3, r2
 8002e34:	4b52      	ldr	r3, [pc, #328]	; (8002f80 <Task2_DrawSpectrum+0x194>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4952      	ldr	r1, [pc, #328]	; (8002f84 <Task2_DrawSpectrum+0x198>)
 8002e3a:	7809      	ldrb	r1, [r1, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <Task2_DrawSpectrum+0x19c>)
 8002e40:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		for(jj=0,ADC_1stepVmax=0; jj < count1max; jj++)//从FreMin->FreMax找中心频率对应的幅度最大值
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3301      	adds	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <Task2_DrawSpectrum+0x184>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3dc      	bcc.n	8002e0e <Task2_DrawSpectrum+0x22>
			}
		ADC_1circleVmax = ADC_1stepVmax;//用来绘图幅度归一化
 8002e54:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <Task2_DrawSpectrum+0x188>)
 8002e56:	881a      	ldrh	r2, [r3, #0]
 8002e58:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <Task2_DrawSpectrum+0x1a0>)
 8002e5a:	801a      	strh	r2, [r3, #0]
		ADC_1stepVmax = 0;
 8002e5c:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <Task2_DrawSpectrum+0x188>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	801a      	strh	r2, [r3, #0]
		circle++;//已完成轮数，用来求多轮中心频率平均值
 8002e62:	4b48      	ldr	r3, [pc, #288]	; (8002f84 <Task2_DrawSpectrum+0x198>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <Task2_DrawSpectrum+0x198>)
 8002e6c:	701a      	strb	r2, [r3, #0]

		if(circle >= CIRCLE)
 8002e6e:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <Task2_DrawSpectrum+0x198>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d94c      	bls.n	8002f10 <Task2_DrawSpectrum+0x124>
		{
			circle=0;
 8002e76:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <Task2_DrawSpectrum+0x198>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
			LCD_GRAM_Clear();
 8002e7c:	f7fe ff22 	bl	8001cc4 <LCD_GRAM_Clear>
			LCD_draw_Square(12,20,112,60);//绘制方框
 8002e80:	233c      	movs	r3, #60	; 0x3c
 8002e82:	2270      	movs	r2, #112	; 0x70
 8002e84:	2114      	movs	r1, #20
 8002e86:	200c      	movs	r0, #12
 8002e88:	f7fe ff42 	bl	8001d10 <LCD_draw_Square>
			LCD_Show_CEStr(0, 0, display);
 8002e8c:	4a40      	ldr	r2, [pc, #256]	; (8002f90 <Task2_DrawSpectrum+0x1a4>)
 8002e8e:	2100      	movs	r1, #0
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7ff f9a0 	bl	80021d6 <LCD_Show_CEStr>
			LCD_Show_CEStr(6*8, 0, "kHz60-100M");
 8002e96:	4a3f      	ldr	r2, [pc, #252]	; (8002f94 <Task2_DrawSpectrum+0x1a8>)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2030      	movs	r0, #48	; 0x30
 8002e9c:	f7ff f99b 	bl	80021d6 <LCD_Show_CEStr>


		for(jj = 0;jj < 100;jj++)//绘制+-10M的频谱x:12-111 y:60-20
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e02e      	b.n	8002f04 <Task2_DrawSpectrum+0x118>

			LCD_draw_Point(12+jj,(int)(100 - (float)spectrum_buf[4*jj]/ADC_1circleVmax *80),1);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	330c      	adds	r3, #12
 8002eac:	b2dc      	uxtb	r4, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <Task2_DrawSpectrum+0x18c>)
 8002eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd fe23 	bl	8000b04 <__aeabi_ui2f>
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <Task2_DrawSpectrum+0x1a0>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fe21 	bl	8000b0c <__aeabi_i2f>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f7fd ff24 	bl	8000d1c <__aeabi_fdiv>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4930      	ldr	r1, [pc, #192]	; (8002f98 <Task2_DrawSpectrum+0x1ac>)
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fe6b 	bl	8000bb4 <__aeabi_fmul>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	482e      	ldr	r0, [pc, #184]	; (8002f9c <Task2_DrawSpectrum+0x1b0>)
 8002ee4:	f7fd fd5c 	bl	80009a0 <__aeabi_fsub>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe f828 	bl	8000f40 <__aeabi_f2iz>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f7fe ff3d 	bl	8001d78 <LCD_draw_Point>
		for(jj = 0;jj < 100;jj++)//绘制+-10M的频谱x:12-111 y:60-20
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3301      	adds	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b63      	cmp	r3, #99	; 0x63
 8002f08:	ddcd      	ble.n	8002ea6 <Task2_DrawSpectrum+0xba>

		_return=1;//更新显示标志
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <Task2_DrawSpectrum+0x1b4>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
		}

	}

	CenterFre_Ave = 0;//求中心频率
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <Task2_DrawSpectrum+0x1b8>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
	for(jj=0; jj<CIRCLE; jj++) CenterFre_Ave += CenterFre[jj];
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e00b      	b.n	8002f34 <Task2_DrawSpectrum+0x148>
 8002f1c:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <Task2_DrawSpectrum+0x19c>)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f24:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <Task2_DrawSpectrum+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <Task2_DrawSpectrum+0x1b8>)
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	ddf0      	ble.n	8002f1c <Task2_DrawSpectrum+0x130>
	CenterFre_Ave =(uint32_t)(CenterFre_Ave / CIRCLE);
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <Task2_DrawSpectrum+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <Task2_DrawSpectrum+0x1bc>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <Task2_DrawSpectrum+0x1b8>)
 8002f48:	6013      	str	r3, [r2, #0]

	sprintf(display, "%6d", CenterFre_Ave);
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <Task2_DrawSpectrum+0x1b8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4916      	ldr	r1, [pc, #88]	; (8002fac <Task2_DrawSpectrum+0x1c0>)
 8002f52:	480f      	ldr	r0, [pc, #60]	; (8002f90 <Task2_DrawSpectrum+0x1a4>)
 8002f54:	f002 f8d2 	bl	80050fc <siprintf>
	fre_buf_change(display);//fre_buf当中 ‘ '->'0'
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <Task2_DrawSpectrum+0x1a4>)
 8002f5a:	f000 f829 	bl	8002fb0 <fre_buf_change>
	display[6] = '\0';//只显示6位
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <Task2_DrawSpectrum+0x1a4>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	719a      	strb	r2, [r3, #6]




}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6c:	20000948 	.word	0x20000948
 8002f70:	20000950 	.word	0x20000950
 8002f74:	200008e6 	.word	0x200008e6
 8002f78:	20000d74 	.word	0x20000d74
 8002f7c:	2000084c 	.word	0x2000084c
 8002f80:	20000844 	.word	0x20000844
 8002f84:	20001547 	.word	0x20001547
 8002f88:	20000858 	.word	0x20000858
 8002f8c:	200008ea 	.word	0x200008ea
 8002f90:	20000d68 	.word	0x20000d68
 8002f94:	08005ac0 	.word	0x08005ac0
 8002f98:	42a00000 	.word	0x42a00000
 8002f9c:	42c80000 	.word	0x42c80000
 8002fa0:	20001545 	.word	0x20001545
 8002fa4:	20000854 	.word	0x20000854
 8002fa8:	cccccccd 	.word	0xcccccccd
 8002fac:	08005acc 	.word	0x08005acc

08002fb0 <fre_buf_change>:
//
void fre_buf_change(u8 *strbuf)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0 ; i < strlen(strbuf); i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e00d      	b.n	8002fda <fre_buf_change+0x2a>
	 if(strbuf[i]==0x20) strbuf[i] = '0';
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d104      	bne.n	8002fd4 <fre_buf_change+0x24>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	2230      	movs	r2, #48	; 0x30
 8002fd2:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < strlen(strbuf); i++)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd f8b6 	bl	800014c <strlen>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d8ea      	bhi.n	8002fbe <fre_buf_change+0xe>
	for (i = 0 ; i < strlen(fre_buf); i++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e00d      	b.n	800300a <fre_buf_change+0x5a>
	 if(fre_buf[i]==0x20) fre_buf[i] = '0';
 8002fee:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <fre_buf_change+0x74>)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d104      	bne.n	8003004 <fre_buf_change+0x54>
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <fre_buf_change+0x74>)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	2230      	movs	r2, #48	; 0x30
 8003002:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < strlen(fre_buf); i++)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	4806      	ldr	r0, [pc, #24]	; (8003024 <fre_buf_change+0x74>)
 800300c:	f7fd f89e 	bl	800014c <strlen>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d8ea      	bhi.n	8002fee <fre_buf_change+0x3e>
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000d5c 	.word	0x20000d5c

08003028 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800303c:	463b      	mov	r3, r7
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <MX_TIM3_Init+0x94>)
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <MX_TIM3_Init+0x98>)
 8003048:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800304a:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <MX_TIM3_Init+0x94>)
 800304c:	2247      	movs	r2, #71	; 0x47
 800304e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003050:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <MX_TIM3_Init+0x94>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003056:	4b19      	ldr	r3, [pc, #100]	; (80030bc <MX_TIM3_Init+0x94>)
 8003058:	f240 32e7 	movw	r2, #999	; 0x3e7
 800305c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305e:	4b17      	ldr	r3, [pc, #92]	; (80030bc <MX_TIM3_Init+0x94>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003064:	4b15      	ldr	r3, [pc, #84]	; (80030bc <MX_TIM3_Init+0x94>)
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800306a:	4814      	ldr	r0, [pc, #80]	; (80030bc <MX_TIM3_Init+0x94>)
 800306c:	f001 fbbc 	bl	80047e8 <HAL_TIM_Base_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003076:	f7ff f9c2 	bl	80023fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800307a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800307e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003080:	f107 0308 	add.w	r3, r7, #8
 8003084:	4619      	mov	r1, r3
 8003086:	480d      	ldr	r0, [pc, #52]	; (80030bc <MX_TIM3_Init+0x94>)
 8003088:	f001 fd58 	bl	8004b3c <HAL_TIM_ConfigClockSource>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003092:	f7ff f9b4 	bl	80023fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800309e:	463b      	mov	r3, r7
 80030a0:	4619      	mov	r1, r3
 80030a2:	4806      	ldr	r0, [pc, #24]	; (80030bc <MX_TIM3_Init+0x94>)
 80030a4:	f001 ff2e 	bl	8004f04 <HAL_TIMEx_MasterConfigSynchronization>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80030ae:	f7ff f9a6 	bl	80023fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20001548 	.word	0x20001548
 80030c0:	40000400 	.word	0x40000400

080030c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d8:	463b      	mov	r3, r7
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <MX_TIM4_Init+0x90>)
 80030e2:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <MX_TIM4_Init+0x94>)
 80030e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <MX_TIM4_Init+0x90>)
 80030e8:	2247      	movs	r2, #71	; 0x47
 80030ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <MX_TIM4_Init+0x90>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80030f2:	4b18      	ldr	r3, [pc, #96]	; (8003154 <MX_TIM4_Init+0x90>)
 80030f4:	2263      	movs	r2, #99	; 0x63
 80030f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f8:	4b16      	ldr	r3, [pc, #88]	; (8003154 <MX_TIM4_Init+0x90>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <MX_TIM4_Init+0x90>)
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003104:	4813      	ldr	r0, [pc, #76]	; (8003154 <MX_TIM4_Init+0x90>)
 8003106:	f001 fb6f 	bl	80047e8 <HAL_TIM_Base_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003110:	f7ff f975 	bl	80023fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003118:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	4619      	mov	r1, r3
 8003120:	480c      	ldr	r0, [pc, #48]	; (8003154 <MX_TIM4_Init+0x90>)
 8003122:	f001 fd0b 	bl	8004b3c <HAL_TIM_ConfigClockSource>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800312c:	f7ff f967 	bl	80023fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003138:	463b      	mov	r3, r7
 800313a:	4619      	mov	r1, r3
 800313c:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_TIM4_Init+0x90>)
 800313e:	f001 fee1 	bl	8004f04 <HAL_TIMEx_MasterConfigSynchronization>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003148:	f7ff f959 	bl	80023fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20001590 	.word	0x20001590
 8003158:	40000800 	.word	0x40000800

0800315c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <HAL_TIM_Base_MspInit+0x78>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d114      	bne.n	8003198 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_TIM_Base_MspInit+0x7c>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_TIM_Base_MspInit+0x7c>)
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	61d3      	str	r3, [r2, #28]
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HAL_TIM_Base_MspInit+0x7c>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	201d      	movs	r0, #29
 800318c:	f000 fcad 	bl	8003aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003190:	201d      	movs	r0, #29
 8003192:	f000 fcc6 	bl	8003b22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003196:	e018      	b.n	80031ca <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0f      	ldr	r2, [pc, #60]	; (80031dc <HAL_TIM_Base_MspInit+0x80>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d113      	bne.n	80031ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_TIM_Base_MspInit+0x7c>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <HAL_TIM_Base_MspInit+0x7c>)
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	61d3      	str	r3, [r2, #28]
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_TIM_Base_MspInit+0x7c>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	201e      	movs	r0, #30
 80031c0:	f000 fc93 	bl	8003aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031c4:	201e      	movs	r0, #30
 80031c6:	f000 fcac 	bl	8003b22 <HAL_NVIC_EnableIRQ>
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40000800 	.word	0x40000800

080031e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031e0:	f7ff f9b6 	bl	8002550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031e4:	480b      	ldr	r0, [pc, #44]	; (8003214 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031e6:	490c      	ldr	r1, [pc, #48]	; (8003218 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031e8:	4a0c      	ldr	r2, [pc, #48]	; (800321c <LoopFillZerobss+0x16>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031ec:	e002      	b.n	80031f4 <LoopCopyDataInit>

080031ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f2:	3304      	adds	r3, #4

080031f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031f8:	d3f9      	bcc.n	80031ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031fc:	4c09      	ldr	r4, [pc, #36]	; (8003224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003200:	e001      	b.n	8003206 <LoopFillZerobss>

08003202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003204:	3204      	adds	r2, #4

08003206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003208:	d3fb      	bcc.n	8003202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800320a:	f001 ffa5 	bl	8005158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800320e:	f7ff f849 	bl	80022a4 <main>
  bx lr
 8003212:	4770      	bx	lr
  ldr r0, =_sdata
 8003214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003218:	200008c8 	.word	0x200008c8
  ldr r2, =_sidata
 800321c:	08006a94 	.word	0x08006a94
  ldr r2, =_sbss
 8003220:	200008c8 	.word	0x200008c8
  ldr r4, =_ebss
 8003224:	20001724 	.word	0x20001724

08003228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003228:	e7fe      	b.n	8003228 <ADC1_2_IRQHandler>
	...

0800322c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_Init+0x28>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a07      	ldr	r2, [pc, #28]	; (8003254 <HAL_Init+0x28>)
 8003236:	f043 0310 	orr.w	r3, r3, #16
 800323a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800323c:	2003      	movs	r0, #3
 800323e:	f000 fc49 	bl	8003ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003242:	200f      	movs	r0, #15
 8003244:	f000 f808 	bl	8003258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003248:	f7ff f8de 	bl	8002408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40022000 	.word	0x40022000

08003258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_InitTick+0x54>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_InitTick+0x58>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fc61 	bl	8003b3e <HAL_SYSTICK_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e00e      	b.n	80032a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b0f      	cmp	r3, #15
 800328a:	d80a      	bhi.n	80032a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800328c:	2200      	movs	r2, #0
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	f000 fc29 	bl	8003aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003298:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <HAL_InitTick+0x5c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	2000083c 	.word	0x2000083c
 80032b0:	20000874 	.word	0x20000874
 80032b4:	20000870 	.word	0x20000870

080032b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_IncTick+0x1c>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_IncTick+0x20>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	4a03      	ldr	r2, [pc, #12]	; (80032d8 <HAL_IncTick+0x20>)
 80032ca:	6013      	str	r3, [r2, #0]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	20000874 	.word	0x20000874
 80032d8:	200015d8 	.word	0x200015d8

080032dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return uwTick;
 80032e0:	4b02      	ldr	r3, [pc, #8]	; (80032ec <HAL_GetTick+0x10>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	200015d8 	.word	0x200015d8

080032f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0be      	b.n	8003490 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe f868 	bl	8001404 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fabf 	bl	80038b8 <ADC_ConversionStop_Disable>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 8099 	bne.w	800347e <HAL_ADC_Init+0x18e>
 800334c:	7dfb      	ldrb	r3, [r7, #23]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 8095 	bne.w	800347e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800335c:	f023 0302 	bic.w	r3, r3, #2
 8003360:	f043 0202 	orr.w	r2, r3, #2
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003370:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7b1b      	ldrb	r3, [r3, #12]
 8003376:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003378:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003388:	d003      	beq.n	8003392 <HAL_ADC_Init+0xa2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d102      	bne.n	8003398 <HAL_ADC_Init+0xa8>
 8003392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003396:	e000      	b.n	800339a <HAL_ADC_Init+0xaa>
 8003398:	2300      	movs	r3, #0
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7d1b      	ldrb	r3, [r3, #20]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d119      	bne.n	80033dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7b1b      	ldrb	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	035a      	lsls	r2, r3, #13
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	e00b      	b.n	80033dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_ADC_Init+0x1a8>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	430b      	orrs	r3, r1
 8003402:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340c:	d003      	beq.n	8003416 <HAL_ADC_Init+0x126>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d104      	bne.n	8003420 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	3b01      	subs	r3, #1
 800341c:	051b      	lsls	r3, r3, #20
 800341e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	430a      	orrs	r2, r1
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_ADC_Init+0x1ac>)
 800343c:	4013      	ands	r3, r2
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	429a      	cmp	r2, r3
 8003442:	d10b      	bne.n	800345c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800345a:	e018      	b.n	800348e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f023 0312 	bic.w	r3, r3, #18
 8003464:	f043 0210 	orr.w	r2, r3, #16
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800347c:	e007      	b.n	800348e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	f043 0210 	orr.w	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	ffe1f7fd 	.word	0xffe1f7fd
 800349c:	ff1f0efe 	.word	0xff1f0efe

080034a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_Start+0x1a>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e098      	b.n	80035ec <HAL_ADC_Start+0x14c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f99e 	bl	8003804 <ADC_Enable>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 8087 	bne.w	80035e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a41      	ldr	r2, [pc, #260]	; (80035f4 <HAL_ADC_Start+0x154>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d105      	bne.n	80034fe <HAL_ADC_Start+0x5e>
 80034f2:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_ADC_Start+0x158>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d115      	bne.n	800352a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d026      	beq.n	8003566 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003520:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003528:	e01d      	b.n	8003566 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2f      	ldr	r2, [pc, #188]	; (80035f8 <HAL_ADC_Start+0x158>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_ADC_Start+0xaa>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <HAL_ADC_Start+0x154>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10d      	bne.n	8003566 <HAL_ADC_Start+0xc6>
 800354a:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_ADC_Start+0x158>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800355e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	f023 0206 	bic.w	r2, r3, #6
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	62da      	str	r2, [r3, #44]	; 0x2c
 800357e:	e002      	b.n	8003586 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f06f 0202 	mvn.w	r2, #2
 8003596:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80035a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80035a6:	d113      	bne.n	80035d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80035ac:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <HAL_ADC_Start+0x154>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d105      	bne.n	80035be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_ADC_Start+0x158>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	e00c      	b.n	80035ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	e003      	b.n	80035ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40012800 	.word	0x40012800
 80035f8:	40012400 	.word	0x40012400

080035fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x20>
 8003630:	2302      	movs	r3, #2
 8003632:	e0dc      	b.n	80037ee <HAL_ADC_ConfigChannel+0x1da>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d81c      	bhi.n	800367e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	3b05      	subs	r3, #5
 8003656:	221f      	movs	r2, #31
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	4019      	ands	r1, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	3b05      	subs	r3, #5
 8003670:	fa00 f203 	lsl.w	r2, r0, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	635a      	str	r2, [r3, #52]	; 0x34
 800367c:	e03c      	b.n	80036f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d81c      	bhi.n	80036c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	3b23      	subs	r3, #35	; 0x23
 8003698:	221f      	movs	r2, #31
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	4019      	ands	r1, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	3b23      	subs	r3, #35	; 0x23
 80036b2:	fa00 f203 	lsl.w	r2, r0, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
 80036be:	e01b      	b.n	80036f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	3b41      	subs	r3, #65	; 0x41
 80036d2:	221f      	movs	r2, #31
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	4019      	ands	r1, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	3b41      	subs	r3, #65	; 0x41
 80036ec:	fa00 f203 	lsl.w	r2, r0, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b09      	cmp	r3, #9
 80036fe:	d91c      	bls.n	800373a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68d9      	ldr	r1, [r3, #12]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	3b1e      	subs	r3, #30
 8003712:	2207      	movs	r2, #7
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	4019      	ands	r1, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	6898      	ldr	r0, [r3, #8]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	3b1e      	subs	r3, #30
 800372c:	fa00 f203 	lsl.w	r2, r0, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	e019      	b.n	800376e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6919      	ldr	r1, [r3, #16]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	2207      	movs	r2, #7
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	4019      	ands	r1, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6898      	ldr	r0, [r3, #8]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4413      	add	r3, r2
 8003762:	fa00 f203 	lsl.w	r2, r0, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b10      	cmp	r3, #16
 8003774:	d003      	beq.n	800377e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800377a:	2b11      	cmp	r3, #17
 800377c:	d132      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d125      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d126      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d11a      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_ADC_ConfigChannel+0x1e8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <HAL_ADC_ConfigChannel+0x1ec>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	0c9a      	lsrs	r2, r3, #18
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037c4:	e002      	b.n	80037cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f9      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x1b2>
 80037d2:	e007      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012400 	.word	0x40012400
 80037fc:	2000083c 	.word	0x2000083c
 8003800:	431bde83 	.word	0x431bde83

08003804 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d040      	beq.n	80038a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <ADC_Enable+0xac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1f      	ldr	r2, [pc, #124]	; (80038b4 <ADC_Enable+0xb0>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	0c9b      	lsrs	r3, r3, #18
 800383e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003840:	e002      	b.n	8003848 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3b01      	subs	r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f9      	bne.n	8003842 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800384e:	f7ff fd45 	bl	80032dc <HAL_GetTick>
 8003852:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003854:	e01f      	b.n	8003896 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003856:	f7ff fd41 	bl	80032dc <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d918      	bls.n	8003896 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d011      	beq.n	8003896 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	f043 0210 	orr.w	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	f043 0201 	orr.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e007      	b.n	80038a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d1d8      	bne.n	8003856 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	2000083c 	.word	0x2000083c
 80038b4:	431bde83 	.word	0x431bde83

080038b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d12e      	bne.n	8003930 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038e2:	f7ff fcfb 	bl	80032dc <HAL_GetTick>
 80038e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038e8:	e01b      	b.n	8003922 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ea:	f7ff fcf7 	bl	80032dc <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d914      	bls.n	8003922 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10d      	bne.n	8003922 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f043 0210 	orr.w	r2, r3, #16
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e007      	b.n	8003932 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d0dc      	beq.n	80038ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	60d3      	str	r3, [r2, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__NVIC_GetPriorityGrouping+0x18>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f003 0307 	and.w	r3, r3, #7
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db0b      	blt.n	80039ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4906      	ldr	r1, [pc, #24]	; (80039d4 <__NVIC_EnableIRQ+0x34>)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2001      	movs	r0, #1
 80039c2:	fa00 f202 	lsl.w	r2, r0, r2
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db0a      	blt.n	8003a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <__NVIC_SetPriority+0x4c>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	0112      	lsls	r2, r2, #4
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	440b      	add	r3, r1
 80039fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a00:	e00a      	b.n	8003a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4908      	ldr	r1, [pc, #32]	; (8003a28 <__NVIC_SetPriority+0x50>)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	0112      	lsls	r2, r2, #4
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	440b      	add	r3, r1
 8003a16:	761a      	strb	r2, [r3, #24]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	e000e100 	.word	0xe000e100
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f1c3 0307 	rsb	r3, r3, #7
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	bf28      	it	cs
 8003a4a:	2304      	movcs	r3, #4
 8003a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d902      	bls.n	8003a5c <NVIC_EncodePriority+0x30>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3b03      	subs	r3, #3
 8003a5a:	e000      	b.n	8003a5e <NVIC_EncodePriority+0x32>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	401a      	ands	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	43d9      	mvns	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	4313      	orrs	r3, r2
         );
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa0:	d301      	bcc.n	8003aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00f      	b.n	8003ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <SysTick_Config+0x40>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aae:	210f      	movs	r1, #15
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab4:	f7ff ff90 	bl	80039d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <SysTick_Config+0x40>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <SysTick_Config+0x40>)
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	e000e010 	.word	0xe000e010

08003ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff2d 	bl	800393c <__NVIC_SetPriorityGrouping>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003afc:	f7ff ff42 	bl	8003984 <__NVIC_GetPriorityGrouping>
 8003b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff90 	bl	8003a2c <NVIC_EncodePriority>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff5f 	bl	80039d8 <__NVIC_SetPriority>
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff35 	bl	80039a0 <__NVIC_EnableIRQ>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ffa2 	bl	8003a90 <SysTick_Config>
 8003b4c:	4603      	mov	r3, r0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b08b      	sub	sp, #44	; 0x2c
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b66:	2300      	movs	r3, #0
 8003b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6a:	e169      	b.n	8003e40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	f040 8158 	bne.w	8003e3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4a9a      	ldr	r2, [pc, #616]	; (8003df8 <HAL_GPIO_Init+0x2a0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d05e      	beq.n	8003c52 <HAL_GPIO_Init+0xfa>
 8003b94:	4a98      	ldr	r2, [pc, #608]	; (8003df8 <HAL_GPIO_Init+0x2a0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d875      	bhi.n	8003c86 <HAL_GPIO_Init+0x12e>
 8003b9a:	4a98      	ldr	r2, [pc, #608]	; (8003dfc <HAL_GPIO_Init+0x2a4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d058      	beq.n	8003c52 <HAL_GPIO_Init+0xfa>
 8003ba0:	4a96      	ldr	r2, [pc, #600]	; (8003dfc <HAL_GPIO_Init+0x2a4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d86f      	bhi.n	8003c86 <HAL_GPIO_Init+0x12e>
 8003ba6:	4a96      	ldr	r2, [pc, #600]	; (8003e00 <HAL_GPIO_Init+0x2a8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d052      	beq.n	8003c52 <HAL_GPIO_Init+0xfa>
 8003bac:	4a94      	ldr	r2, [pc, #592]	; (8003e00 <HAL_GPIO_Init+0x2a8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d869      	bhi.n	8003c86 <HAL_GPIO_Init+0x12e>
 8003bb2:	4a94      	ldr	r2, [pc, #592]	; (8003e04 <HAL_GPIO_Init+0x2ac>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d04c      	beq.n	8003c52 <HAL_GPIO_Init+0xfa>
 8003bb8:	4a92      	ldr	r2, [pc, #584]	; (8003e04 <HAL_GPIO_Init+0x2ac>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d863      	bhi.n	8003c86 <HAL_GPIO_Init+0x12e>
 8003bbe:	4a92      	ldr	r2, [pc, #584]	; (8003e08 <HAL_GPIO_Init+0x2b0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d046      	beq.n	8003c52 <HAL_GPIO_Init+0xfa>
 8003bc4:	4a90      	ldr	r2, [pc, #576]	; (8003e08 <HAL_GPIO_Init+0x2b0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d85d      	bhi.n	8003c86 <HAL_GPIO_Init+0x12e>
 8003bca:	2b12      	cmp	r3, #18
 8003bcc:	d82a      	bhi.n	8003c24 <HAL_GPIO_Init+0xcc>
 8003bce:	2b12      	cmp	r3, #18
 8003bd0:	d859      	bhi.n	8003c86 <HAL_GPIO_Init+0x12e>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <HAL_GPIO_Init+0x80>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c53 	.word	0x08003c53
 8003bdc:	08003c2d 	.word	0x08003c2d
 8003be0:	08003c3f 	.word	0x08003c3f
 8003be4:	08003c81 	.word	0x08003c81
 8003be8:	08003c87 	.word	0x08003c87
 8003bec:	08003c87 	.word	0x08003c87
 8003bf0:	08003c87 	.word	0x08003c87
 8003bf4:	08003c87 	.word	0x08003c87
 8003bf8:	08003c87 	.word	0x08003c87
 8003bfc:	08003c87 	.word	0x08003c87
 8003c00:	08003c87 	.word	0x08003c87
 8003c04:	08003c87 	.word	0x08003c87
 8003c08:	08003c87 	.word	0x08003c87
 8003c0c:	08003c87 	.word	0x08003c87
 8003c10:	08003c87 	.word	0x08003c87
 8003c14:	08003c87 	.word	0x08003c87
 8003c18:	08003c87 	.word	0x08003c87
 8003c1c:	08003c35 	.word	0x08003c35
 8003c20:	08003c49 	.word	0x08003c49
 8003c24:	4a79      	ldr	r2, [pc, #484]	; (8003e0c <HAL_GPIO_Init+0x2b4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c2a:	e02c      	b.n	8003c86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	623b      	str	r3, [r7, #32]
          break;
 8003c32:	e029      	b.n	8003c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	623b      	str	r3, [r7, #32]
          break;
 8003c3c:	e024      	b.n	8003c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	3308      	adds	r3, #8
 8003c44:	623b      	str	r3, [r7, #32]
          break;
 8003c46:	e01f      	b.n	8003c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	623b      	str	r3, [r7, #32]
          break;
 8003c50:	e01a      	b.n	8003c88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	623b      	str	r3, [r7, #32]
          break;
 8003c5e:	e013      	b.n	8003c88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c68:	2308      	movs	r3, #8
 8003c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	611a      	str	r2, [r3, #16]
          break;
 8003c72:	e009      	b.n	8003c88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c74:	2308      	movs	r3, #8
 8003c76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	615a      	str	r2, [r3, #20]
          break;
 8003c7e:	e003      	b.n	8003c88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c80:	2300      	movs	r3, #0
 8003c82:	623b      	str	r3, [r7, #32]
          break;
 8003c84:	e000      	b.n	8003c88 <HAL_GPIO_Init+0x130>
          break;
 8003c86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2bff      	cmp	r3, #255	; 0xff
 8003c8c:	d801      	bhi.n	8003c92 <HAL_GPIO_Init+0x13a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	e001      	b.n	8003c96 <HAL_GPIO_Init+0x13e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3304      	adds	r3, #4
 8003c96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2bff      	cmp	r3, #255	; 0xff
 8003c9c:	d802      	bhi.n	8003ca4 <HAL_GPIO_Init+0x14c>
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	e002      	b.n	8003caa <HAL_GPIO_Init+0x152>
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	3b08      	subs	r3, #8
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	210f      	movs	r1, #15
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	401a      	ands	r2, r3
 8003cbc:	6a39      	ldr	r1, [r7, #32]
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80b1 	beq.w	8003e3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cd8:	4b4d      	ldr	r3, [pc, #308]	; (8003e10 <HAL_GPIO_Init+0x2b8>)
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	4a4c      	ldr	r2, [pc, #304]	; (8003e10 <HAL_GPIO_Init+0x2b8>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6193      	str	r3, [r2, #24]
 8003ce4:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_GPIO_Init+0x2b8>)
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cf0:	4a48      	ldr	r2, [pc, #288]	; (8003e14 <HAL_GPIO_Init+0x2bc>)
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	220f      	movs	r2, #15
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4013      	ands	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a40      	ldr	r2, [pc, #256]	; (8003e18 <HAL_GPIO_Init+0x2c0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <HAL_GPIO_Init+0x1ec>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3f      	ldr	r2, [pc, #252]	; (8003e1c <HAL_GPIO_Init+0x2c4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00d      	beq.n	8003d40 <HAL_GPIO_Init+0x1e8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a3e      	ldr	r2, [pc, #248]	; (8003e20 <HAL_GPIO_Init+0x2c8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <HAL_GPIO_Init+0x1e4>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3d      	ldr	r2, [pc, #244]	; (8003e24 <HAL_GPIO_Init+0x2cc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <HAL_GPIO_Init+0x1e0>
 8003d34:	2303      	movs	r3, #3
 8003d36:	e006      	b.n	8003d46 <HAL_GPIO_Init+0x1ee>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	e004      	b.n	8003d46 <HAL_GPIO_Init+0x1ee>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e002      	b.n	8003d46 <HAL_GPIO_Init+0x1ee>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_GPIO_Init+0x1ee>
 8003d44:	2300      	movs	r3, #0
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	f002 0203 	and.w	r2, r2, #3
 8003d4c:	0092      	lsls	r2, r2, #2
 8003d4e:	4093      	lsls	r3, r2
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d56:	492f      	ldr	r1, [pc, #188]	; (8003e14 <HAL_GPIO_Init+0x2bc>)
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	089b      	lsrs	r3, r3, #2
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d006      	beq.n	8003d7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d70:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	492c      	ldr	r1, [pc, #176]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	608b      	str	r3, [r1, #8]
 8003d7c:	e006      	b.n	8003d8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	4928      	ldr	r1, [pc, #160]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d006      	beq.n	8003da6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	4922      	ldr	r1, [pc, #136]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60cb      	str	r3, [r1, #12]
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	491e      	ldr	r1, [pc, #120]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d006      	beq.n	8003dce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	4918      	ldr	r1, [pc, #96]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	4914      	ldr	r1, [pc, #80]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d021      	beq.n	8003e2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	490e      	ldr	r1, [pc, #56]	; (8003e28 <HAL_GPIO_Init+0x2d0>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
 8003df4:	e021      	b.n	8003e3a <HAL_GPIO_Init+0x2e2>
 8003df6:	bf00      	nop
 8003df8:	10320000 	.word	0x10320000
 8003dfc:	10310000 	.word	0x10310000
 8003e00:	10220000 	.word	0x10220000
 8003e04:	10210000 	.word	0x10210000
 8003e08:	10120000 	.word	0x10120000
 8003e0c:	10110000 	.word	0x10110000
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40010800 	.word	0x40010800
 8003e1c:	40010c00 	.word	0x40010c00
 8003e20:	40011000 	.word	0x40011000
 8003e24:	40011400 	.word	0x40011400
 8003e28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	4909      	ldr	r1, [pc, #36]	; (8003e5c <HAL_GPIO_Init+0x304>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f47f ae8e 	bne.w	8003b6c <HAL_GPIO_Init+0x14>
  }
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	372c      	adds	r7, #44	; 0x2c
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	40010400 	.word	0x40010400

08003e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	e001      	b.n	8003e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	807b      	strh	r3, [r7, #2]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e9e:	787b      	ldrb	r3, [r7, #1]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ea4:	887a      	ldrh	r2, [r7, #2]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003eaa:	e003      	b.n	8003eb4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	041a      	lsls	r2, r3, #16
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	611a      	str	r2, [r3, #16]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e272      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8087 	beq.w	8003fee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ee0:	4b92      	ldr	r3, [pc, #584]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d00c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003eec:	4b8f      	ldr	r3, [pc, #572]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d112      	bne.n	8003f1e <HAL_RCC_OscConfig+0x5e>
 8003ef8:	4b8c      	ldr	r3, [pc, #560]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f04:	d10b      	bne.n	8003f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f06:	4b89      	ldr	r3, [pc, #548]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d06c      	beq.n	8003fec <HAL_RCC_OscConfig+0x12c>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d168      	bne.n	8003fec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e24c      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x76>
 8003f28:	4b80      	ldr	r3, [pc, #512]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a7f      	ldr	r2, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	e02e      	b.n	8003f94 <HAL_RCC_OscConfig+0xd4>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x98>
 8003f3e:	4b7b      	ldr	r3, [pc, #492]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a7a      	ldr	r2, [pc, #488]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b78      	ldr	r3, [pc, #480]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a77      	ldr	r2, [pc, #476]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e01d      	b.n	8003f94 <HAL_RCC_OscConfig+0xd4>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCC_OscConfig+0xbc>
 8003f62:	4b72      	ldr	r3, [pc, #456]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a71      	ldr	r2, [pc, #452]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b6f      	ldr	r3, [pc, #444]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6e      	ldr	r2, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e00b      	b.n	8003f94 <HAL_RCC_OscConfig+0xd4>
 8003f7c:	4b6b      	ldr	r3, [pc, #428]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a6a      	ldr	r2, [pc, #424]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b68      	ldr	r3, [pc, #416]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a67      	ldr	r2, [pc, #412]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d013      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7ff f99e 	bl	80032dc <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa4:	f7ff f99a 	bl	80032dc <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	; 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e200      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb6:	4b5d      	ldr	r3, [pc, #372]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0xe4>
 8003fc2:	e014      	b.n	8003fee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7ff f98a 	bl	80032dc <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7ff f986 	bl	80032dc <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1ec      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fde:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x10c>
 8003fea:	e000      	b.n	8003fee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d063      	beq.n	80040c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ffa:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004006:	4b49      	ldr	r3, [pc, #292]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b08      	cmp	r3, #8
 8004010:	d11c      	bne.n	800404c <HAL_RCC_OscConfig+0x18c>
 8004012:	4b46      	ldr	r3, [pc, #280]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d116      	bne.n	800404c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401e:	4b43      	ldr	r3, [pc, #268]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_RCC_OscConfig+0x176>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e1c0      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004036:	4b3d      	ldr	r3, [pc, #244]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4939      	ldr	r1, [pc, #228]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404a:	e03a      	b.n	80040c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004054:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_OscConfig+0x270>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7ff f93f 	bl	80032dc <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004062:	f7ff f93b 	bl	80032dc <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e1a1      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004074:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004080:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4927      	ldr	r1, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]
 8004094:	e015      	b.n	80040c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCC_OscConfig+0x270>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7ff f91e 	bl	80032dc <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a4:	f7ff f91a 	bl	80032dc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e180      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d03a      	beq.n	8004144 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d019      	beq.n	800410a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d6:	4b17      	ldr	r3, [pc, #92]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040dc:	f7ff f8fe 	bl	80032dc <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e4:	f7ff f8fa 	bl	80032dc <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e160      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCC_OscConfig+0x26c>)
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004102:	2001      	movs	r0, #1
 8004104:	f000 fa9c 	bl	8004640 <RCC_Delay>
 8004108:	e01c      	b.n	8004144 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004110:	f7ff f8e4 	bl	80032dc <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004116:	e00f      	b.n	8004138 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004118:	f7ff f8e0 	bl	80032dc <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d908      	bls.n	8004138 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e146      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	42420000 	.word	0x42420000
 8004134:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004138:	4b92      	ldr	r3, [pc, #584]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e9      	bne.n	8004118 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80a6 	beq.w	800429e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004156:	4b8b      	ldr	r3, [pc, #556]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10d      	bne.n	800417e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004162:	4b88      	ldr	r3, [pc, #544]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4a87      	ldr	r2, [pc, #540]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416c:	61d3      	str	r3, [r2, #28]
 800416e:	4b85      	ldr	r3, [pc, #532]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417e:	4b82      	ldr	r3, [pc, #520]	; (8004388 <HAL_RCC_OscConfig+0x4c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d118      	bne.n	80041bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418a:	4b7f      	ldr	r3, [pc, #508]	; (8004388 <HAL_RCC_OscConfig+0x4c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a7e      	ldr	r2, [pc, #504]	; (8004388 <HAL_RCC_OscConfig+0x4c8>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004196:	f7ff f8a1 	bl	80032dc <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419e:	f7ff f89d 	bl	80032dc <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b64      	cmp	r3, #100	; 0x64
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e103      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	4b75      	ldr	r3, [pc, #468]	; (8004388 <HAL_RCC_OscConfig+0x4c8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d106      	bne.n	80041d2 <HAL_RCC_OscConfig+0x312>
 80041c4:	4b6f      	ldr	r3, [pc, #444]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	4a6e      	ldr	r2, [pc, #440]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6213      	str	r3, [r2, #32]
 80041d0:	e02d      	b.n	800422e <HAL_RCC_OscConfig+0x36e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x334>
 80041da:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4a69      	ldr	r2, [pc, #420]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	6213      	str	r3, [r2, #32]
 80041e6:	4b67      	ldr	r3, [pc, #412]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4a66      	ldr	r2, [pc, #408]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	f023 0304 	bic.w	r3, r3, #4
 80041f0:	6213      	str	r3, [r2, #32]
 80041f2:	e01c      	b.n	800422e <HAL_RCC_OscConfig+0x36e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b05      	cmp	r3, #5
 80041fa:	d10c      	bne.n	8004216 <HAL_RCC_OscConfig+0x356>
 80041fc:	4b61      	ldr	r3, [pc, #388]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4a60      	ldr	r2, [pc, #384]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004202:	f043 0304 	orr.w	r3, r3, #4
 8004206:	6213      	str	r3, [r2, #32]
 8004208:	4b5e      	ldr	r3, [pc, #376]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4a5d      	ldr	r2, [pc, #372]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6213      	str	r3, [r2, #32]
 8004214:	e00b      	b.n	800422e <HAL_RCC_OscConfig+0x36e>
 8004216:	4b5b      	ldr	r3, [pc, #364]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	4a5a      	ldr	r2, [pc, #360]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 800421c:	f023 0301 	bic.w	r3, r3, #1
 8004220:	6213      	str	r3, [r2, #32]
 8004222:	4b58      	ldr	r3, [pc, #352]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	4a57      	ldr	r2, [pc, #348]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	f023 0304 	bic.w	r3, r3, #4
 800422c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d015      	beq.n	8004262 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004236:	f7ff f851 	bl	80032dc <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	e00a      	b.n	8004254 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423e:	f7ff f84d 	bl	80032dc <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	; 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e0b1      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ee      	beq.n	800423e <HAL_RCC_OscConfig+0x37e>
 8004260:	e014      	b.n	800428c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004262:	f7ff f83b 	bl	80032dc <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004268:	e00a      	b.n	8004280 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426a:	f7ff f837 	bl	80032dc <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f241 3288 	movw	r2, #5000	; 0x1388
 8004278:	4293      	cmp	r3, r2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e09b      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004280:	4b40      	ldr	r3, [pc, #256]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ee      	bne.n	800426a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d105      	bne.n	800429e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004292:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4a3b      	ldr	r2, [pc, #236]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 8087 	beq.w	80043b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 030c 	and.w	r3, r3, #12
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d061      	beq.n	8004378 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d146      	bne.n	800434a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042bc:	4b33      	ldr	r3, [pc, #204]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c2:	f7ff f80b 	bl	80032dc <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7ff f807 	bl	80032dc <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e06d      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d108      	bne.n	8004304 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	4921      	ldr	r1, [pc, #132]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004304:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a19      	ldr	r1, [r3, #32]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	430b      	orrs	r3, r1
 8004316:	491b      	ldr	r1, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7fe ffdb 	bl	80032dc <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432a:	f7fe ffd7 	bl	80032dc <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e03d      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800433c:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x46a>
 8004348:	e035      	b.n	80043b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fe ffc4 	bl	80032dc <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fe ffc0 	bl	80032dc <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e026      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x498>
 8004376:	e01e      	b.n	80043b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d107      	bne.n	8004390 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e019      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
 8004384:	40021000 	.word	0x40021000
 8004388:	40007000 	.word	0x40007000
 800438c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_RCC_OscConfig+0x500>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000

080043c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0d0      	b.n	800457a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043d8:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d910      	bls.n	8004408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b67      	ldr	r3, [pc, #412]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 0207 	bic.w	r2, r3, #7
 80043ee:	4965      	ldr	r1, [pc, #404]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b63      	ldr	r3, [pc, #396]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0b8      	b.n	800457a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004420:	4b59      	ldr	r3, [pc, #356]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a58      	ldr	r2, [pc, #352]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800442a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004438:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4a52      	ldr	r2, [pc, #328]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004442:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b50      	ldr	r3, [pc, #320]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	494d      	ldr	r1, [pc, #308]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d040      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d115      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e07f      	b.n	800457a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e073      	b.n	800457a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004492:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e06b      	b.n	800457a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a2:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f023 0203 	bic.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4936      	ldr	r1, [pc, #216]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b4:	f7fe ff12 	bl	80032dc <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044bc:	f7fe ff0e 	bl	80032dc <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e053      	b.n	800457a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	4b2d      	ldr	r3, [pc, #180]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 020c 	and.w	r2, r3, #12
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d1eb      	bne.n	80044bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d210      	bcs.n	8004514 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 0207 	bic.w	r2, r3, #7
 80044fa:	4922      	ldr	r1, [pc, #136]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004502:	4b20      	ldr	r3, [pc, #128]	; (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e032      	b.n	800457a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	4b19      	ldr	r3, [pc, #100]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4916      	ldr	r1, [pc, #88]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	490e      	ldr	r1, [pc, #56]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 800454e:	4313      	orrs	r3, r2
 8004550:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004552:	f000 f821 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004556:	4602      	mov	r2, r0
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	490a      	ldr	r1, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	5ccb      	ldrb	r3, [r1, r3]
 8004566:	fa22 f303 	lsr.w	r3, r2, r3
 800456a:	4a09      	ldr	r2, [pc, #36]	; (8004590 <HAL_RCC_ClockConfig+0x1cc>)
 800456c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_ClockConfig+0x1d0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fe fe70 	bl	8003258 <HAL_InitTick>

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40022000 	.word	0x40022000
 8004588:	40021000 	.word	0x40021000
 800458c:	08006934 	.word	0x08006934
 8004590:	2000083c 	.word	0x2000083c
 8004594:	20000870 	.word	0x20000870

08004598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045b2:	4b1e      	ldr	r3, [pc, #120]	; (800462c <HAL_RCC_GetSysClockFreq+0x94>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d002      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x30>
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d003      	beq.n	80045ce <HAL_RCC_GetSysClockFreq+0x36>
 80045c6:	e027      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ca:	613b      	str	r3, [r7, #16]
      break;
 80045cc:	e027      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	0c9b      	lsrs	r3, r3, #18
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	4a17      	ldr	r2, [pc, #92]	; (8004634 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045d8:	5cd3      	ldrb	r3, [r2, r3]
 80045da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045e6:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_RCC_GetSysClockFreq+0x94>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	0c5b      	lsrs	r3, r3, #17
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	4a11      	ldr	r2, [pc, #68]	; (8004638 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045f2:	5cd3      	ldrb	r3, [r2, r3]
 80045f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <HAL_RCC_GetSysClockFreq+0x98>)
 80045fa:	fb03 f202 	mul.w	r2, r3, r2
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e004      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a0c      	ldr	r2, [pc, #48]	; (800463c <HAL_RCC_GetSysClockFreq+0xa4>)
 800460c:	fb02 f303 	mul.w	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	613b      	str	r3, [r7, #16]
      break;
 8004616:	e002      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetSysClockFreq+0x98>)
 800461a:	613b      	str	r3, [r7, #16]
      break;
 800461c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800461e:	693b      	ldr	r3, [r7, #16]
}
 8004620:	4618      	mov	r0, r3
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	007a1200 	.word	0x007a1200
 8004634:	08006944 	.word	0x08006944
 8004638:	08006954 	.word	0x08006954
 800463c:	003d0900 	.word	0x003d0900

08004640 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <RCC_Delay+0x34>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <RCC_Delay+0x38>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0a5b      	lsrs	r3, r3, #9
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800465c:	bf00      	nop
  }
  while (Delay --);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1e5a      	subs	r2, r3, #1
 8004662:	60fa      	str	r2, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f9      	bne.n	800465c <RCC_Delay+0x1c>
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	2000083c 	.word	0x2000083c
 8004678:	10624dd3 	.word	0x10624dd3

0800467c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d07d      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004698:	2300      	movs	r3, #0
 800469a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469c:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10d      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a8:	4b4c      	ldr	r3, [pc, #304]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4a4b      	ldr	r2, [pc, #300]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b2:	61d3      	str	r3, [r2, #28]
 80046b4:	4b49      	ldr	r3, [pc, #292]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c4:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d118      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d0:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a42      	ldr	r2, [pc, #264]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046dc:	f7fe fdfe 	bl	80032dc <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e2:	e008      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e4:	f7fe fdfa 	bl	80032dc <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e06d      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f6:	4b3a      	ldr	r3, [pc, #232]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004702:	4b36      	ldr	r3, [pc, #216]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d02e      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	429a      	cmp	r2, r3
 800471e:	d027      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004720:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004728:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800472a:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004730:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004736:	4a29      	ldr	r2, [pc, #164]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d014      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe fdc9 	bl	80032dc <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	e00a      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474e:	f7fe fdc5 	bl	80032dc <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f241 3288 	movw	r2, #5000	; 0x1388
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e036      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ee      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4917      	ldr	r1, [pc, #92]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477e:	4313      	orrs	r3, r2
 8004780:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	4a13      	ldr	r2, [pc, #76]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004792:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	490b      	ldr	r1, [pc, #44]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047be:	4b07      	ldr	r3, [pc, #28]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	4904      	ldr	r1, [pc, #16]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40007000 	.word	0x40007000
 80047e4:	42420440 	.word	0x42420440

080047e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e041      	b.n	800487e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fe fca4 	bl	800315c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f000 fa74 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d001      	beq.n	80048a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e03a      	b.n	8004916 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a18      	ldr	r2, [pc, #96]	; (8004920 <HAL_TIM_Base_Start_IT+0x98>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x58>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ca:	d009      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x58>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a14      	ldr	r2, [pc, #80]	; (8004924 <HAL_TIM_Base_Start_IT+0x9c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x58>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a13      	ldr	r2, [pc, #76]	; (8004928 <HAL_TIM_Base_Start_IT+0xa0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d111      	bne.n	8004904 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d010      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	e007      	b.n	8004914 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800

0800492c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b02      	cmp	r3, #2
 8004940:	d122      	bne.n	8004988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d11b      	bne.n	8004988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0202 	mvn.w	r2, #2
 8004958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f9b4 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9a7 	bl	8004cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f9b6 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0204 	mvn.w	r2, #4
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f98a 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f97d 	bl	8004cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f98c 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0208 	mvn.w	r2, #8
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2204      	movs	r2, #4
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f960 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f953 	bl	8004cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f962 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0210 	mvn.w	r2, #16
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f936 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f929 	bl	8004cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f938 	bl	8004cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d10e      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d107      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0201 	mvn.w	r2, #1
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc ff2c 	bl	8001908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	d10e      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	2b80      	cmp	r3, #128	; 0x80
 8004aca:	d107      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa7b 	bl	8004fd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8fc 	bl	8004d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d10e      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d107      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0220 	mvn.w	r2, #32
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa46 	bl	8004fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_TIM_ConfigClockSource+0x1c>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e0b4      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x186>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b90:	d03e      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0xd4>
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b96:	f200 8087 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9e:	f000 8086 	beq.w	8004cae <HAL_TIM_ConfigClockSource+0x172>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d87f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b70      	cmp	r3, #112	; 0x70
 8004baa:	d01a      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0xa6>
 8004bac:	2b70      	cmp	r3, #112	; 0x70
 8004bae:	d87b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b60      	cmp	r3, #96	; 0x60
 8004bb2:	d050      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x11a>
 8004bb4:	2b60      	cmp	r3, #96	; 0x60
 8004bb6:	d877      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b50      	cmp	r3, #80	; 0x50
 8004bba:	d03c      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xfa>
 8004bbc:	2b50      	cmp	r3, #80	; 0x50
 8004bbe:	d873      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d058      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x13a>
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d86f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b30      	cmp	r3, #48	; 0x30
 8004bca:	d064      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d86b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d060      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d867      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05c      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d05a      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15a>
 8004be0:	e062      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf2:	f000 f968 	bl	8004ec6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	609a      	str	r2, [r3, #8]
      break;
 8004c0e:	e04f      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c20:	f000 f951 	bl	8004ec6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c32:	609a      	str	r2, [r3, #8]
      break;
 8004c34:	e03c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 f8c8 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2150      	movs	r1, #80	; 0x50
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f91f 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004c54:	e02c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 f8e6 	bl	8004e34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2160      	movs	r1, #96	; 0x60
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f90f 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004c74:	e01c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 f8a8 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2140      	movs	r1, #64	; 0x40
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f8ff 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004c94:	e00c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f000 f8f6 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004ca6:	e003      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr

08004cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
	...

08004d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a29      	ldr	r2, [pc, #164]	; (8004dcc <TIM_Base_SetConfig+0xb8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <TIM_Base_SetConfig+0x30>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d007      	beq.n	8004d44 <TIM_Base_SetConfig+0x30>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <TIM_Base_SetConfig+0xbc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_Base_SetConfig+0x30>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <TIM_Base_SetConfig+0xc0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d108      	bne.n	8004d56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <TIM_Base_SetConfig+0xb8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00b      	beq.n	8004d76 <TIM_Base_SetConfig+0x62>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d64:	d007      	beq.n	8004d76 <TIM_Base_SetConfig+0x62>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a19      	ldr	r2, [pc, #100]	; (8004dd0 <TIM_Base_SetConfig+0xbc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <TIM_Base_SetConfig+0x62>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <TIM_Base_SetConfig+0xc0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d108      	bne.n	8004d88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a07      	ldr	r2, [pc, #28]	; (8004dcc <TIM_Base_SetConfig+0xb8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d103      	bne.n	8004dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	615a      	str	r2, [r3, #20]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800

08004dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 030a 	bic.w	r3, r3, #10
 8004e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f023 0210 	bic.w	r2, r3, #16
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	031b      	lsls	r3, r3, #12
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr

08004e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f043 0307 	orr.w	r3, r3, #7
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	609a      	str	r2, [r3, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	021a      	lsls	r2, r3, #8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	609a      	str	r2, [r3, #8]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e046      	b.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00e      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d009      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a12      	ldr	r2, [pc, #72]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10c      	bne.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800

08004fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <atol>:
 8004fe4:	220a      	movs	r2, #10
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	f000 b87e 	b.w	80050e8 <strtol>

08004fec <_strtol_l.constprop.0>:
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff2:	4686      	mov	lr, r0
 8004ff4:	4690      	mov	r8, r2
 8004ff6:	d001      	beq.n	8004ffc <_strtol_l.constprop.0+0x10>
 8004ff8:	2b24      	cmp	r3, #36	; 0x24
 8004ffa:	d906      	bls.n	800500a <_strtol_l.constprop.0+0x1e>
 8004ffc:	f000 f8a6 	bl	800514c <__errno>
 8005000:	2316      	movs	r3, #22
 8005002:	6003      	str	r3, [r0, #0]
 8005004:	2000      	movs	r0, #0
 8005006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500a:	460d      	mov	r5, r1
 800500c:	4835      	ldr	r0, [pc, #212]	; (80050e4 <_strtol_l.constprop.0+0xf8>)
 800500e:	462a      	mov	r2, r5
 8005010:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005014:	5d06      	ldrb	r6, [r0, r4]
 8005016:	f016 0608 	ands.w	r6, r6, #8
 800501a:	d1f8      	bne.n	800500e <_strtol_l.constprop.0+0x22>
 800501c:	2c2d      	cmp	r4, #45	; 0x2d
 800501e:	d12e      	bne.n	800507e <_strtol_l.constprop.0+0x92>
 8005020:	2601      	movs	r6, #1
 8005022:	782c      	ldrb	r4, [r5, #0]
 8005024:	1c95      	adds	r5, r2, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d057      	beq.n	80050da <_strtol_l.constprop.0+0xee>
 800502a:	2b10      	cmp	r3, #16
 800502c:	d109      	bne.n	8005042 <_strtol_l.constprop.0+0x56>
 800502e:	2c30      	cmp	r4, #48	; 0x30
 8005030:	d107      	bne.n	8005042 <_strtol_l.constprop.0+0x56>
 8005032:	782a      	ldrb	r2, [r5, #0]
 8005034:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005038:	2a58      	cmp	r2, #88	; 0x58
 800503a:	d149      	bne.n	80050d0 <_strtol_l.constprop.0+0xe4>
 800503c:	2310      	movs	r3, #16
 800503e:	786c      	ldrb	r4, [r5, #1]
 8005040:	3502      	adds	r5, #2
 8005042:	2200      	movs	r2, #0
 8005044:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005048:	f10c 3cff 	add.w	ip, ip, #4294967295
 800504c:	fbbc f9f3 	udiv	r9, ip, r3
 8005050:	4610      	mov	r0, r2
 8005052:	fb03 ca19 	mls	sl, r3, r9, ip
 8005056:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800505a:	2f09      	cmp	r7, #9
 800505c:	d814      	bhi.n	8005088 <_strtol_l.constprop.0+0x9c>
 800505e:	463c      	mov	r4, r7
 8005060:	42a3      	cmp	r3, r4
 8005062:	dd20      	ble.n	80050a6 <_strtol_l.constprop.0+0xba>
 8005064:	1c57      	adds	r7, r2, #1
 8005066:	d007      	beq.n	8005078 <_strtol_l.constprop.0+0x8c>
 8005068:	4581      	cmp	r9, r0
 800506a:	d319      	bcc.n	80050a0 <_strtol_l.constprop.0+0xb4>
 800506c:	d101      	bne.n	8005072 <_strtol_l.constprop.0+0x86>
 800506e:	45a2      	cmp	sl, r4
 8005070:	db16      	blt.n	80050a0 <_strtol_l.constprop.0+0xb4>
 8005072:	2201      	movs	r2, #1
 8005074:	fb00 4003 	mla	r0, r0, r3, r4
 8005078:	f815 4b01 	ldrb.w	r4, [r5], #1
 800507c:	e7eb      	b.n	8005056 <_strtol_l.constprop.0+0x6a>
 800507e:	2c2b      	cmp	r4, #43	; 0x2b
 8005080:	bf04      	itt	eq
 8005082:	782c      	ldrbeq	r4, [r5, #0]
 8005084:	1c95      	addeq	r5, r2, #2
 8005086:	e7ce      	b.n	8005026 <_strtol_l.constprop.0+0x3a>
 8005088:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800508c:	2f19      	cmp	r7, #25
 800508e:	d801      	bhi.n	8005094 <_strtol_l.constprop.0+0xa8>
 8005090:	3c37      	subs	r4, #55	; 0x37
 8005092:	e7e5      	b.n	8005060 <_strtol_l.constprop.0+0x74>
 8005094:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005098:	2f19      	cmp	r7, #25
 800509a:	d804      	bhi.n	80050a6 <_strtol_l.constprop.0+0xba>
 800509c:	3c57      	subs	r4, #87	; 0x57
 800509e:	e7df      	b.n	8005060 <_strtol_l.constprop.0+0x74>
 80050a0:	f04f 32ff 	mov.w	r2, #4294967295
 80050a4:	e7e8      	b.n	8005078 <_strtol_l.constprop.0+0x8c>
 80050a6:	1c53      	adds	r3, r2, #1
 80050a8:	d108      	bne.n	80050bc <_strtol_l.constprop.0+0xd0>
 80050aa:	2322      	movs	r3, #34	; 0x22
 80050ac:	4660      	mov	r0, ip
 80050ae:	f8ce 3000 	str.w	r3, [lr]
 80050b2:	f1b8 0f00 	cmp.w	r8, #0
 80050b6:	d0a6      	beq.n	8005006 <_strtol_l.constprop.0+0x1a>
 80050b8:	1e69      	subs	r1, r5, #1
 80050ba:	e006      	b.n	80050ca <_strtol_l.constprop.0+0xde>
 80050bc:	b106      	cbz	r6, 80050c0 <_strtol_l.constprop.0+0xd4>
 80050be:	4240      	negs	r0, r0
 80050c0:	f1b8 0f00 	cmp.w	r8, #0
 80050c4:	d09f      	beq.n	8005006 <_strtol_l.constprop.0+0x1a>
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	d1f6      	bne.n	80050b8 <_strtol_l.constprop.0+0xcc>
 80050ca:	f8c8 1000 	str.w	r1, [r8]
 80050ce:	e79a      	b.n	8005006 <_strtol_l.constprop.0+0x1a>
 80050d0:	2430      	movs	r4, #48	; 0x30
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1b5      	bne.n	8005042 <_strtol_l.constprop.0+0x56>
 80050d6:	2308      	movs	r3, #8
 80050d8:	e7b3      	b.n	8005042 <_strtol_l.constprop.0+0x56>
 80050da:	2c30      	cmp	r4, #48	; 0x30
 80050dc:	d0a9      	beq.n	8005032 <_strtol_l.constprop.0+0x46>
 80050de:	230a      	movs	r3, #10
 80050e0:	e7af      	b.n	8005042 <_strtol_l.constprop.0+0x56>
 80050e2:	bf00      	nop
 80050e4:	08006957 	.word	0x08006957

080050e8 <strtol>:
 80050e8:	4613      	mov	r3, r2
 80050ea:	460a      	mov	r2, r1
 80050ec:	4601      	mov	r1, r0
 80050ee:	4802      	ldr	r0, [pc, #8]	; (80050f8 <strtol+0x10>)
 80050f0:	6800      	ldr	r0, [r0, #0]
 80050f2:	f7ff bf7b 	b.w	8004fec <_strtol_l.constprop.0>
 80050f6:	bf00      	nop
 80050f8:	200008c4 	.word	0x200008c4

080050fc <siprintf>:
 80050fc:	b40e      	push	{r1, r2, r3}
 80050fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005102:	b500      	push	{lr}
 8005104:	b09c      	sub	sp, #112	; 0x70
 8005106:	ab1d      	add	r3, sp, #116	; 0x74
 8005108:	9002      	str	r0, [sp, #8]
 800510a:	9006      	str	r0, [sp, #24]
 800510c:	9107      	str	r1, [sp, #28]
 800510e:	9104      	str	r1, [sp, #16]
 8005110:	4808      	ldr	r0, [pc, #32]	; (8005134 <siprintf+0x38>)
 8005112:	4909      	ldr	r1, [pc, #36]	; (8005138 <siprintf+0x3c>)
 8005114:	f853 2b04 	ldr.w	r2, [r3], #4
 8005118:	9105      	str	r1, [sp, #20]
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	a902      	add	r1, sp, #8
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	f000 f99c 	bl	800545c <_svfiprintf_r>
 8005124:	2200      	movs	r2, #0
 8005126:	9b02      	ldr	r3, [sp, #8]
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	b01c      	add	sp, #112	; 0x70
 800512c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005130:	b003      	add	sp, #12
 8005132:	4770      	bx	lr
 8005134:	200008c4 	.word	0x200008c4
 8005138:	ffff0208 	.word	0xffff0208

0800513c <memset>:
 800513c:	4603      	mov	r3, r0
 800513e:	4402      	add	r2, r0
 8005140:	4293      	cmp	r3, r2
 8005142:	d100      	bne.n	8005146 <memset+0xa>
 8005144:	4770      	bx	lr
 8005146:	f803 1b01 	strb.w	r1, [r3], #1
 800514a:	e7f9      	b.n	8005140 <memset+0x4>

0800514c <__errno>:
 800514c:	4b01      	ldr	r3, [pc, #4]	; (8005154 <__errno+0x8>)
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	200008c4 	.word	0x200008c4

08005158 <__libc_init_array>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	2600      	movs	r6, #0
 800515c:	4d0c      	ldr	r5, [pc, #48]	; (8005190 <__libc_init_array+0x38>)
 800515e:	4c0d      	ldr	r4, [pc, #52]	; (8005194 <__libc_init_array+0x3c>)
 8005160:	1b64      	subs	r4, r4, r5
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	42a6      	cmp	r6, r4
 8005166:	d109      	bne.n	800517c <__libc_init_array+0x24>
 8005168:	f000 fc7a 	bl	8005a60 <_init>
 800516c:	2600      	movs	r6, #0
 800516e:	4d0a      	ldr	r5, [pc, #40]	; (8005198 <__libc_init_array+0x40>)
 8005170:	4c0a      	ldr	r4, [pc, #40]	; (800519c <__libc_init_array+0x44>)
 8005172:	1b64      	subs	r4, r4, r5
 8005174:	10a4      	asrs	r4, r4, #2
 8005176:	42a6      	cmp	r6, r4
 8005178:	d105      	bne.n	8005186 <__libc_init_array+0x2e>
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005180:	4798      	blx	r3
 8005182:	3601      	adds	r6, #1
 8005184:	e7ee      	b.n	8005164 <__libc_init_array+0xc>
 8005186:	f855 3b04 	ldr.w	r3, [r5], #4
 800518a:	4798      	blx	r3
 800518c:	3601      	adds	r6, #1
 800518e:	e7f2      	b.n	8005176 <__libc_init_array+0x1e>
 8005190:	08006a8c 	.word	0x08006a8c
 8005194:	08006a8c 	.word	0x08006a8c
 8005198:	08006a8c 	.word	0x08006a8c
 800519c:	08006a90 	.word	0x08006a90

080051a0 <__retarget_lock_acquire_recursive>:
 80051a0:	4770      	bx	lr

080051a2 <__retarget_lock_release_recursive>:
 80051a2:	4770      	bx	lr

080051a4 <memcpy>:
 80051a4:	440a      	add	r2, r1
 80051a6:	4291      	cmp	r1, r2
 80051a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80051ac:	d100      	bne.n	80051b0 <memcpy+0xc>
 80051ae:	4770      	bx	lr
 80051b0:	b510      	push	{r4, lr}
 80051b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051b6:	4291      	cmp	r1, r2
 80051b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051bc:	d1f9      	bne.n	80051b2 <memcpy+0xe>
 80051be:	bd10      	pop	{r4, pc}

080051c0 <_free_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4605      	mov	r5, r0
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d040      	beq.n	800524a <_free_r+0x8a>
 80051c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051cc:	1f0c      	subs	r4, r1, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bfb8      	it	lt
 80051d2:	18e4      	addlt	r4, r4, r3
 80051d4:	f000 f8dc 	bl	8005390 <__malloc_lock>
 80051d8:	4a1c      	ldr	r2, [pc, #112]	; (800524c <_free_r+0x8c>)
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	b933      	cbnz	r3, 80051ec <_free_r+0x2c>
 80051de:	6063      	str	r3, [r4, #4]
 80051e0:	6014      	str	r4, [r2, #0]
 80051e2:	4628      	mov	r0, r5
 80051e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051e8:	f000 b8d8 	b.w	800539c <__malloc_unlock>
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	d908      	bls.n	8005202 <_free_r+0x42>
 80051f0:	6820      	ldr	r0, [r4, #0]
 80051f2:	1821      	adds	r1, r4, r0
 80051f4:	428b      	cmp	r3, r1
 80051f6:	bf01      	itttt	eq
 80051f8:	6819      	ldreq	r1, [r3, #0]
 80051fa:	685b      	ldreq	r3, [r3, #4]
 80051fc:	1809      	addeq	r1, r1, r0
 80051fe:	6021      	streq	r1, [r4, #0]
 8005200:	e7ed      	b.n	80051de <_free_r+0x1e>
 8005202:	461a      	mov	r2, r3
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	b10b      	cbz	r3, 800520c <_free_r+0x4c>
 8005208:	42a3      	cmp	r3, r4
 800520a:	d9fa      	bls.n	8005202 <_free_r+0x42>
 800520c:	6811      	ldr	r1, [r2, #0]
 800520e:	1850      	adds	r0, r2, r1
 8005210:	42a0      	cmp	r0, r4
 8005212:	d10b      	bne.n	800522c <_free_r+0x6c>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	4401      	add	r1, r0
 8005218:	1850      	adds	r0, r2, r1
 800521a:	4283      	cmp	r3, r0
 800521c:	6011      	str	r1, [r2, #0]
 800521e:	d1e0      	bne.n	80051e2 <_free_r+0x22>
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4408      	add	r0, r1
 8005226:	6010      	str	r0, [r2, #0]
 8005228:	6053      	str	r3, [r2, #4]
 800522a:	e7da      	b.n	80051e2 <_free_r+0x22>
 800522c:	d902      	bls.n	8005234 <_free_r+0x74>
 800522e:	230c      	movs	r3, #12
 8005230:	602b      	str	r3, [r5, #0]
 8005232:	e7d6      	b.n	80051e2 <_free_r+0x22>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	1821      	adds	r1, r4, r0
 8005238:	428b      	cmp	r3, r1
 800523a:	bf01      	itttt	eq
 800523c:	6819      	ldreq	r1, [r3, #0]
 800523e:	685b      	ldreq	r3, [r3, #4]
 8005240:	1809      	addeq	r1, r1, r0
 8005242:	6021      	streq	r1, [r4, #0]
 8005244:	6063      	str	r3, [r4, #4]
 8005246:	6054      	str	r4, [r2, #4]
 8005248:	e7cb      	b.n	80051e2 <_free_r+0x22>
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	2000171c 	.word	0x2000171c

08005250 <sbrk_aligned>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4e0e      	ldr	r6, [pc, #56]	; (800528c <sbrk_aligned+0x3c>)
 8005254:	460c      	mov	r4, r1
 8005256:	6831      	ldr	r1, [r6, #0]
 8005258:	4605      	mov	r5, r0
 800525a:	b911      	cbnz	r1, 8005262 <sbrk_aligned+0x12>
 800525c:	f000 fbaa 	bl	80059b4 <_sbrk_r>
 8005260:	6030      	str	r0, [r6, #0]
 8005262:	4621      	mov	r1, r4
 8005264:	4628      	mov	r0, r5
 8005266:	f000 fba5 	bl	80059b4 <_sbrk_r>
 800526a:	1c43      	adds	r3, r0, #1
 800526c:	d00a      	beq.n	8005284 <sbrk_aligned+0x34>
 800526e:	1cc4      	adds	r4, r0, #3
 8005270:	f024 0403 	bic.w	r4, r4, #3
 8005274:	42a0      	cmp	r0, r4
 8005276:	d007      	beq.n	8005288 <sbrk_aligned+0x38>
 8005278:	1a21      	subs	r1, r4, r0
 800527a:	4628      	mov	r0, r5
 800527c:	f000 fb9a 	bl	80059b4 <_sbrk_r>
 8005280:	3001      	adds	r0, #1
 8005282:	d101      	bne.n	8005288 <sbrk_aligned+0x38>
 8005284:	f04f 34ff 	mov.w	r4, #4294967295
 8005288:	4620      	mov	r0, r4
 800528a:	bd70      	pop	{r4, r5, r6, pc}
 800528c:	20001720 	.word	0x20001720

08005290 <_malloc_r>:
 8005290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005294:	1ccd      	adds	r5, r1, #3
 8005296:	f025 0503 	bic.w	r5, r5, #3
 800529a:	3508      	adds	r5, #8
 800529c:	2d0c      	cmp	r5, #12
 800529e:	bf38      	it	cc
 80052a0:	250c      	movcc	r5, #12
 80052a2:	2d00      	cmp	r5, #0
 80052a4:	4607      	mov	r7, r0
 80052a6:	db01      	blt.n	80052ac <_malloc_r+0x1c>
 80052a8:	42a9      	cmp	r1, r5
 80052aa:	d905      	bls.n	80052b8 <_malloc_r+0x28>
 80052ac:	230c      	movs	r3, #12
 80052ae:	2600      	movs	r6, #0
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	4630      	mov	r0, r6
 80052b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800538c <_malloc_r+0xfc>
 80052bc:	f000 f868 	bl	8005390 <__malloc_lock>
 80052c0:	f8d8 3000 	ldr.w	r3, [r8]
 80052c4:	461c      	mov	r4, r3
 80052c6:	bb5c      	cbnz	r4, 8005320 <_malloc_r+0x90>
 80052c8:	4629      	mov	r1, r5
 80052ca:	4638      	mov	r0, r7
 80052cc:	f7ff ffc0 	bl	8005250 <sbrk_aligned>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	4604      	mov	r4, r0
 80052d4:	d155      	bne.n	8005382 <_malloc_r+0xf2>
 80052d6:	f8d8 4000 	ldr.w	r4, [r8]
 80052da:	4626      	mov	r6, r4
 80052dc:	2e00      	cmp	r6, #0
 80052de:	d145      	bne.n	800536c <_malloc_r+0xdc>
 80052e0:	2c00      	cmp	r4, #0
 80052e2:	d048      	beq.n	8005376 <_malloc_r+0xe6>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	4631      	mov	r1, r6
 80052e8:	4638      	mov	r0, r7
 80052ea:	eb04 0903 	add.w	r9, r4, r3
 80052ee:	f000 fb61 	bl	80059b4 <_sbrk_r>
 80052f2:	4581      	cmp	r9, r0
 80052f4:	d13f      	bne.n	8005376 <_malloc_r+0xe6>
 80052f6:	6821      	ldr	r1, [r4, #0]
 80052f8:	4638      	mov	r0, r7
 80052fa:	1a6d      	subs	r5, r5, r1
 80052fc:	4629      	mov	r1, r5
 80052fe:	f7ff ffa7 	bl	8005250 <sbrk_aligned>
 8005302:	3001      	adds	r0, #1
 8005304:	d037      	beq.n	8005376 <_malloc_r+0xe6>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	442b      	add	r3, r5
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	f8d8 3000 	ldr.w	r3, [r8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d038      	beq.n	8005386 <_malloc_r+0xf6>
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	42a2      	cmp	r2, r4
 8005318:	d12b      	bne.n	8005372 <_malloc_r+0xe2>
 800531a:	2200      	movs	r2, #0
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	e00f      	b.n	8005340 <_malloc_r+0xb0>
 8005320:	6822      	ldr	r2, [r4, #0]
 8005322:	1b52      	subs	r2, r2, r5
 8005324:	d41f      	bmi.n	8005366 <_malloc_r+0xd6>
 8005326:	2a0b      	cmp	r2, #11
 8005328:	d917      	bls.n	800535a <_malloc_r+0xca>
 800532a:	1961      	adds	r1, r4, r5
 800532c:	42a3      	cmp	r3, r4
 800532e:	6025      	str	r5, [r4, #0]
 8005330:	bf18      	it	ne
 8005332:	6059      	strne	r1, [r3, #4]
 8005334:	6863      	ldr	r3, [r4, #4]
 8005336:	bf08      	it	eq
 8005338:	f8c8 1000 	streq.w	r1, [r8]
 800533c:	5162      	str	r2, [r4, r5]
 800533e:	604b      	str	r3, [r1, #4]
 8005340:	4638      	mov	r0, r7
 8005342:	f104 060b 	add.w	r6, r4, #11
 8005346:	f000 f829 	bl	800539c <__malloc_unlock>
 800534a:	f026 0607 	bic.w	r6, r6, #7
 800534e:	1d23      	adds	r3, r4, #4
 8005350:	1af2      	subs	r2, r6, r3
 8005352:	d0ae      	beq.n	80052b2 <_malloc_r+0x22>
 8005354:	1b9b      	subs	r3, r3, r6
 8005356:	50a3      	str	r3, [r4, r2]
 8005358:	e7ab      	b.n	80052b2 <_malloc_r+0x22>
 800535a:	42a3      	cmp	r3, r4
 800535c:	6862      	ldr	r2, [r4, #4]
 800535e:	d1dd      	bne.n	800531c <_malloc_r+0x8c>
 8005360:	f8c8 2000 	str.w	r2, [r8]
 8005364:	e7ec      	b.n	8005340 <_malloc_r+0xb0>
 8005366:	4623      	mov	r3, r4
 8005368:	6864      	ldr	r4, [r4, #4]
 800536a:	e7ac      	b.n	80052c6 <_malloc_r+0x36>
 800536c:	4634      	mov	r4, r6
 800536e:	6876      	ldr	r6, [r6, #4]
 8005370:	e7b4      	b.n	80052dc <_malloc_r+0x4c>
 8005372:	4613      	mov	r3, r2
 8005374:	e7cc      	b.n	8005310 <_malloc_r+0x80>
 8005376:	230c      	movs	r3, #12
 8005378:	4638      	mov	r0, r7
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	f000 f80e 	bl	800539c <__malloc_unlock>
 8005380:	e797      	b.n	80052b2 <_malloc_r+0x22>
 8005382:	6025      	str	r5, [r4, #0]
 8005384:	e7dc      	b.n	8005340 <_malloc_r+0xb0>
 8005386:	605b      	str	r3, [r3, #4]
 8005388:	deff      	udf	#255	; 0xff
 800538a:	bf00      	nop
 800538c:	2000171c 	.word	0x2000171c

08005390 <__malloc_lock>:
 8005390:	4801      	ldr	r0, [pc, #4]	; (8005398 <__malloc_lock+0x8>)
 8005392:	f7ff bf05 	b.w	80051a0 <__retarget_lock_acquire_recursive>
 8005396:	bf00      	nop
 8005398:	20001718 	.word	0x20001718

0800539c <__malloc_unlock>:
 800539c:	4801      	ldr	r0, [pc, #4]	; (80053a4 <__malloc_unlock+0x8>)
 800539e:	f7ff bf00 	b.w	80051a2 <__retarget_lock_release_recursive>
 80053a2:	bf00      	nop
 80053a4:	20001718 	.word	0x20001718

080053a8 <__ssputs_r>:
 80053a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	461f      	mov	r7, r3
 80053ae:	688e      	ldr	r6, [r1, #8]
 80053b0:	4682      	mov	sl, r0
 80053b2:	42be      	cmp	r6, r7
 80053b4:	460c      	mov	r4, r1
 80053b6:	4690      	mov	r8, r2
 80053b8:	680b      	ldr	r3, [r1, #0]
 80053ba:	d82c      	bhi.n	8005416 <__ssputs_r+0x6e>
 80053bc:	898a      	ldrh	r2, [r1, #12]
 80053be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053c2:	d026      	beq.n	8005412 <__ssputs_r+0x6a>
 80053c4:	6965      	ldr	r5, [r4, #20]
 80053c6:	6909      	ldr	r1, [r1, #16]
 80053c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053cc:	eba3 0901 	sub.w	r9, r3, r1
 80053d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053d4:	1c7b      	adds	r3, r7, #1
 80053d6:	444b      	add	r3, r9
 80053d8:	106d      	asrs	r5, r5, #1
 80053da:	429d      	cmp	r5, r3
 80053dc:	bf38      	it	cc
 80053de:	461d      	movcc	r5, r3
 80053e0:	0553      	lsls	r3, r2, #21
 80053e2:	d527      	bpl.n	8005434 <__ssputs_r+0x8c>
 80053e4:	4629      	mov	r1, r5
 80053e6:	f7ff ff53 	bl	8005290 <_malloc_r>
 80053ea:	4606      	mov	r6, r0
 80053ec:	b360      	cbz	r0, 8005448 <__ssputs_r+0xa0>
 80053ee:	464a      	mov	r2, r9
 80053f0:	6921      	ldr	r1, [r4, #16]
 80053f2:	f7ff fed7 	bl	80051a4 <memcpy>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	81a3      	strh	r3, [r4, #12]
 8005402:	6126      	str	r6, [r4, #16]
 8005404:	444e      	add	r6, r9
 8005406:	6026      	str	r6, [r4, #0]
 8005408:	463e      	mov	r6, r7
 800540a:	6165      	str	r5, [r4, #20]
 800540c:	eba5 0509 	sub.w	r5, r5, r9
 8005410:	60a5      	str	r5, [r4, #8]
 8005412:	42be      	cmp	r6, r7
 8005414:	d900      	bls.n	8005418 <__ssputs_r+0x70>
 8005416:	463e      	mov	r6, r7
 8005418:	4632      	mov	r2, r6
 800541a:	4641      	mov	r1, r8
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	f000 faaf 	bl	8005980 <memmove>
 8005422:	2000      	movs	r0, #0
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	1b9b      	subs	r3, r3, r6
 8005428:	60a3      	str	r3, [r4, #8]
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	4433      	add	r3, r6
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005434:	462a      	mov	r2, r5
 8005436:	f000 fadb 	bl	80059f0 <_realloc_r>
 800543a:	4606      	mov	r6, r0
 800543c:	2800      	cmp	r0, #0
 800543e:	d1e0      	bne.n	8005402 <__ssputs_r+0x5a>
 8005440:	4650      	mov	r0, sl
 8005442:	6921      	ldr	r1, [r4, #16]
 8005444:	f7ff febc 	bl	80051c0 <_free_r>
 8005448:	230c      	movs	r3, #12
 800544a:	f8ca 3000 	str.w	r3, [sl]
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005458:	81a3      	strh	r3, [r4, #12]
 800545a:	e7e9      	b.n	8005430 <__ssputs_r+0x88>

0800545c <_svfiprintf_r>:
 800545c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005460:	4698      	mov	r8, r3
 8005462:	898b      	ldrh	r3, [r1, #12]
 8005464:	4607      	mov	r7, r0
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	460d      	mov	r5, r1
 800546a:	4614      	mov	r4, r2
 800546c:	b09d      	sub	sp, #116	; 0x74
 800546e:	d50e      	bpl.n	800548e <_svfiprintf_r+0x32>
 8005470:	690b      	ldr	r3, [r1, #16]
 8005472:	b963      	cbnz	r3, 800548e <_svfiprintf_r+0x32>
 8005474:	2140      	movs	r1, #64	; 0x40
 8005476:	f7ff ff0b 	bl	8005290 <_malloc_r>
 800547a:	6028      	str	r0, [r5, #0]
 800547c:	6128      	str	r0, [r5, #16]
 800547e:	b920      	cbnz	r0, 800548a <_svfiprintf_r+0x2e>
 8005480:	230c      	movs	r3, #12
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	e0d0      	b.n	800562c <_svfiprintf_r+0x1d0>
 800548a:	2340      	movs	r3, #64	; 0x40
 800548c:	616b      	str	r3, [r5, #20]
 800548e:	2300      	movs	r3, #0
 8005490:	9309      	str	r3, [sp, #36]	; 0x24
 8005492:	2320      	movs	r3, #32
 8005494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005498:	2330      	movs	r3, #48	; 0x30
 800549a:	f04f 0901 	mov.w	r9, #1
 800549e:	f8cd 800c 	str.w	r8, [sp, #12]
 80054a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005644 <_svfiprintf_r+0x1e8>
 80054a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054aa:	4623      	mov	r3, r4
 80054ac:	469a      	mov	sl, r3
 80054ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054b2:	b10a      	cbz	r2, 80054b8 <_svfiprintf_r+0x5c>
 80054b4:	2a25      	cmp	r2, #37	; 0x25
 80054b6:	d1f9      	bne.n	80054ac <_svfiprintf_r+0x50>
 80054b8:	ebba 0b04 	subs.w	fp, sl, r4
 80054bc:	d00b      	beq.n	80054d6 <_svfiprintf_r+0x7a>
 80054be:	465b      	mov	r3, fp
 80054c0:	4622      	mov	r2, r4
 80054c2:	4629      	mov	r1, r5
 80054c4:	4638      	mov	r0, r7
 80054c6:	f7ff ff6f 	bl	80053a8 <__ssputs_r>
 80054ca:	3001      	adds	r0, #1
 80054cc:	f000 80a9 	beq.w	8005622 <_svfiprintf_r+0x1c6>
 80054d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054d2:	445a      	add	r2, fp
 80054d4:	9209      	str	r2, [sp, #36]	; 0x24
 80054d6:	f89a 3000 	ldrb.w	r3, [sl]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80a1 	beq.w	8005622 <_svfiprintf_r+0x1c6>
 80054e0:	2300      	movs	r3, #0
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295
 80054e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054ea:	f10a 0a01 	add.w	sl, sl, #1
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	9307      	str	r3, [sp, #28]
 80054f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054f6:	931a      	str	r3, [sp, #104]	; 0x68
 80054f8:	4654      	mov	r4, sl
 80054fa:	2205      	movs	r2, #5
 80054fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005500:	4850      	ldr	r0, [pc, #320]	; (8005644 <_svfiprintf_r+0x1e8>)
 8005502:	f000 fa67 	bl	80059d4 <memchr>
 8005506:	9a04      	ldr	r2, [sp, #16]
 8005508:	b9d8      	cbnz	r0, 8005542 <_svfiprintf_r+0xe6>
 800550a:	06d0      	lsls	r0, r2, #27
 800550c:	bf44      	itt	mi
 800550e:	2320      	movmi	r3, #32
 8005510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005514:	0711      	lsls	r1, r2, #28
 8005516:	bf44      	itt	mi
 8005518:	232b      	movmi	r3, #43	; 0x2b
 800551a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800551e:	f89a 3000 	ldrb.w	r3, [sl]
 8005522:	2b2a      	cmp	r3, #42	; 0x2a
 8005524:	d015      	beq.n	8005552 <_svfiprintf_r+0xf6>
 8005526:	4654      	mov	r4, sl
 8005528:	2000      	movs	r0, #0
 800552a:	f04f 0c0a 	mov.w	ip, #10
 800552e:	9a07      	ldr	r2, [sp, #28]
 8005530:	4621      	mov	r1, r4
 8005532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005536:	3b30      	subs	r3, #48	; 0x30
 8005538:	2b09      	cmp	r3, #9
 800553a:	d94d      	bls.n	80055d8 <_svfiprintf_r+0x17c>
 800553c:	b1b0      	cbz	r0, 800556c <_svfiprintf_r+0x110>
 800553e:	9207      	str	r2, [sp, #28]
 8005540:	e014      	b.n	800556c <_svfiprintf_r+0x110>
 8005542:	eba0 0308 	sub.w	r3, r0, r8
 8005546:	fa09 f303 	lsl.w	r3, r9, r3
 800554a:	4313      	orrs	r3, r2
 800554c:	46a2      	mov	sl, r4
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	e7d2      	b.n	80054f8 <_svfiprintf_r+0x9c>
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	1d19      	adds	r1, r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	9103      	str	r1, [sp, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfbb      	ittet	lt
 800555e:	425b      	neglt	r3, r3
 8005560:	f042 0202 	orrlt.w	r2, r2, #2
 8005564:	9307      	strge	r3, [sp, #28]
 8005566:	9307      	strlt	r3, [sp, #28]
 8005568:	bfb8      	it	lt
 800556a:	9204      	strlt	r2, [sp, #16]
 800556c:	7823      	ldrb	r3, [r4, #0]
 800556e:	2b2e      	cmp	r3, #46	; 0x2e
 8005570:	d10c      	bne.n	800558c <_svfiprintf_r+0x130>
 8005572:	7863      	ldrb	r3, [r4, #1]
 8005574:	2b2a      	cmp	r3, #42	; 0x2a
 8005576:	d134      	bne.n	80055e2 <_svfiprintf_r+0x186>
 8005578:	9b03      	ldr	r3, [sp, #12]
 800557a:	3402      	adds	r4, #2
 800557c:	1d1a      	adds	r2, r3, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	9203      	str	r2, [sp, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	bfb8      	it	lt
 8005586:	f04f 33ff 	movlt.w	r3, #4294967295
 800558a:	9305      	str	r3, [sp, #20]
 800558c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005648 <_svfiprintf_r+0x1ec>
 8005590:	2203      	movs	r2, #3
 8005592:	4650      	mov	r0, sl
 8005594:	7821      	ldrb	r1, [r4, #0]
 8005596:	f000 fa1d 	bl	80059d4 <memchr>
 800559a:	b138      	cbz	r0, 80055ac <_svfiprintf_r+0x150>
 800559c:	2240      	movs	r2, #64	; 0x40
 800559e:	9b04      	ldr	r3, [sp, #16]
 80055a0:	eba0 000a 	sub.w	r0, r0, sl
 80055a4:	4082      	lsls	r2, r0
 80055a6:	4313      	orrs	r3, r2
 80055a8:	3401      	adds	r4, #1
 80055aa:	9304      	str	r3, [sp, #16]
 80055ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b0:	2206      	movs	r2, #6
 80055b2:	4826      	ldr	r0, [pc, #152]	; (800564c <_svfiprintf_r+0x1f0>)
 80055b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055b8:	f000 fa0c 	bl	80059d4 <memchr>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d038      	beq.n	8005632 <_svfiprintf_r+0x1d6>
 80055c0:	4b23      	ldr	r3, [pc, #140]	; (8005650 <_svfiprintf_r+0x1f4>)
 80055c2:	bb1b      	cbnz	r3, 800560c <_svfiprintf_r+0x1b0>
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	3307      	adds	r3, #7
 80055c8:	f023 0307 	bic.w	r3, r3, #7
 80055cc:	3308      	adds	r3, #8
 80055ce:	9303      	str	r3, [sp, #12]
 80055d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d2:	4433      	add	r3, r6
 80055d4:	9309      	str	r3, [sp, #36]	; 0x24
 80055d6:	e768      	b.n	80054aa <_svfiprintf_r+0x4e>
 80055d8:	460c      	mov	r4, r1
 80055da:	2001      	movs	r0, #1
 80055dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80055e0:	e7a6      	b.n	8005530 <_svfiprintf_r+0xd4>
 80055e2:	2300      	movs	r3, #0
 80055e4:	f04f 0c0a 	mov.w	ip, #10
 80055e8:	4619      	mov	r1, r3
 80055ea:	3401      	adds	r4, #1
 80055ec:	9305      	str	r3, [sp, #20]
 80055ee:	4620      	mov	r0, r4
 80055f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055f4:	3a30      	subs	r2, #48	; 0x30
 80055f6:	2a09      	cmp	r2, #9
 80055f8:	d903      	bls.n	8005602 <_svfiprintf_r+0x1a6>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0c6      	beq.n	800558c <_svfiprintf_r+0x130>
 80055fe:	9105      	str	r1, [sp, #20]
 8005600:	e7c4      	b.n	800558c <_svfiprintf_r+0x130>
 8005602:	4604      	mov	r4, r0
 8005604:	2301      	movs	r3, #1
 8005606:	fb0c 2101 	mla	r1, ip, r1, r2
 800560a:	e7f0      	b.n	80055ee <_svfiprintf_r+0x192>
 800560c:	ab03      	add	r3, sp, #12
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	462a      	mov	r2, r5
 8005612:	4638      	mov	r0, r7
 8005614:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <_svfiprintf_r+0x1f8>)
 8005616:	a904      	add	r1, sp, #16
 8005618:	f3af 8000 	nop.w
 800561c:	1c42      	adds	r2, r0, #1
 800561e:	4606      	mov	r6, r0
 8005620:	d1d6      	bne.n	80055d0 <_svfiprintf_r+0x174>
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	065b      	lsls	r3, r3, #25
 8005626:	f53f af2d 	bmi.w	8005484 <_svfiprintf_r+0x28>
 800562a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800562c:	b01d      	add	sp, #116	; 0x74
 800562e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005632:	ab03      	add	r3, sp, #12
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	462a      	mov	r2, r5
 8005638:	4638      	mov	r0, r7
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <_svfiprintf_r+0x1f8>)
 800563c:	a904      	add	r1, sp, #16
 800563e:	f000 f87d 	bl	800573c <_printf_i>
 8005642:	e7eb      	b.n	800561c <_svfiprintf_r+0x1c0>
 8005644:	08006a57 	.word	0x08006a57
 8005648:	08006a5d 	.word	0x08006a5d
 800564c:	08006a61 	.word	0x08006a61
 8005650:	00000000 	.word	0x00000000
 8005654:	080053a9 	.word	0x080053a9

08005658 <_printf_common>:
 8005658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800565c:	4616      	mov	r6, r2
 800565e:	4699      	mov	r9, r3
 8005660:	688a      	ldr	r2, [r1, #8]
 8005662:	690b      	ldr	r3, [r1, #16]
 8005664:	4607      	mov	r7, r0
 8005666:	4293      	cmp	r3, r2
 8005668:	bfb8      	it	lt
 800566a:	4613      	movlt	r3, r2
 800566c:	6033      	str	r3, [r6, #0]
 800566e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005672:	460c      	mov	r4, r1
 8005674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005678:	b10a      	cbz	r2, 800567e <_printf_common+0x26>
 800567a:	3301      	adds	r3, #1
 800567c:	6033      	str	r3, [r6, #0]
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	0699      	lsls	r1, r3, #26
 8005682:	bf42      	ittt	mi
 8005684:	6833      	ldrmi	r3, [r6, #0]
 8005686:	3302      	addmi	r3, #2
 8005688:	6033      	strmi	r3, [r6, #0]
 800568a:	6825      	ldr	r5, [r4, #0]
 800568c:	f015 0506 	ands.w	r5, r5, #6
 8005690:	d106      	bne.n	80056a0 <_printf_common+0x48>
 8005692:	f104 0a19 	add.w	sl, r4, #25
 8005696:	68e3      	ldr	r3, [r4, #12]
 8005698:	6832      	ldr	r2, [r6, #0]
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	42ab      	cmp	r3, r5
 800569e:	dc2b      	bgt.n	80056f8 <_printf_common+0xa0>
 80056a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056a4:	1e13      	subs	r3, r2, #0
 80056a6:	6822      	ldr	r2, [r4, #0]
 80056a8:	bf18      	it	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	0692      	lsls	r2, r2, #26
 80056ae:	d430      	bmi.n	8005712 <_printf_common+0xba>
 80056b0:	4649      	mov	r1, r9
 80056b2:	4638      	mov	r0, r7
 80056b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056b8:	47c0      	blx	r8
 80056ba:	3001      	adds	r0, #1
 80056bc:	d023      	beq.n	8005706 <_printf_common+0xae>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	6922      	ldr	r2, [r4, #16]
 80056c2:	f003 0306 	and.w	r3, r3, #6
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	bf14      	ite	ne
 80056ca:	2500      	movne	r5, #0
 80056cc:	6833      	ldreq	r3, [r6, #0]
 80056ce:	f04f 0600 	mov.w	r6, #0
 80056d2:	bf08      	it	eq
 80056d4:	68e5      	ldreq	r5, [r4, #12]
 80056d6:	f104 041a 	add.w	r4, r4, #26
 80056da:	bf08      	it	eq
 80056dc:	1aed      	subeq	r5, r5, r3
 80056de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80056e2:	bf08      	it	eq
 80056e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e8:	4293      	cmp	r3, r2
 80056ea:	bfc4      	itt	gt
 80056ec:	1a9b      	subgt	r3, r3, r2
 80056ee:	18ed      	addgt	r5, r5, r3
 80056f0:	42b5      	cmp	r5, r6
 80056f2:	d11a      	bne.n	800572a <_printf_common+0xd2>
 80056f4:	2000      	movs	r0, #0
 80056f6:	e008      	b.n	800570a <_printf_common+0xb2>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4652      	mov	r2, sl
 80056fc:	4649      	mov	r1, r9
 80056fe:	4638      	mov	r0, r7
 8005700:	47c0      	blx	r8
 8005702:	3001      	adds	r0, #1
 8005704:	d103      	bne.n	800570e <_printf_common+0xb6>
 8005706:	f04f 30ff 	mov.w	r0, #4294967295
 800570a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570e:	3501      	adds	r5, #1
 8005710:	e7c1      	b.n	8005696 <_printf_common+0x3e>
 8005712:	2030      	movs	r0, #48	; 0x30
 8005714:	18e1      	adds	r1, r4, r3
 8005716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005720:	4422      	add	r2, r4
 8005722:	3302      	adds	r3, #2
 8005724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005728:	e7c2      	b.n	80056b0 <_printf_common+0x58>
 800572a:	2301      	movs	r3, #1
 800572c:	4622      	mov	r2, r4
 800572e:	4649      	mov	r1, r9
 8005730:	4638      	mov	r0, r7
 8005732:	47c0      	blx	r8
 8005734:	3001      	adds	r0, #1
 8005736:	d0e6      	beq.n	8005706 <_printf_common+0xae>
 8005738:	3601      	adds	r6, #1
 800573a:	e7d9      	b.n	80056f0 <_printf_common+0x98>

0800573c <_printf_i>:
 800573c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	7e0f      	ldrb	r7, [r1, #24]
 8005742:	4691      	mov	r9, r2
 8005744:	2f78      	cmp	r7, #120	; 0x78
 8005746:	4680      	mov	r8, r0
 8005748:	460c      	mov	r4, r1
 800574a:	469a      	mov	sl, r3
 800574c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800574e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005752:	d807      	bhi.n	8005764 <_printf_i+0x28>
 8005754:	2f62      	cmp	r7, #98	; 0x62
 8005756:	d80a      	bhi.n	800576e <_printf_i+0x32>
 8005758:	2f00      	cmp	r7, #0
 800575a:	f000 80d5 	beq.w	8005908 <_printf_i+0x1cc>
 800575e:	2f58      	cmp	r7, #88	; 0x58
 8005760:	f000 80c1 	beq.w	80058e6 <_printf_i+0x1aa>
 8005764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800576c:	e03a      	b.n	80057e4 <_printf_i+0xa8>
 800576e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005772:	2b15      	cmp	r3, #21
 8005774:	d8f6      	bhi.n	8005764 <_printf_i+0x28>
 8005776:	a101      	add	r1, pc, #4	; (adr r1, 800577c <_printf_i+0x40>)
 8005778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800577c:	080057d5 	.word	0x080057d5
 8005780:	080057e9 	.word	0x080057e9
 8005784:	08005765 	.word	0x08005765
 8005788:	08005765 	.word	0x08005765
 800578c:	08005765 	.word	0x08005765
 8005790:	08005765 	.word	0x08005765
 8005794:	080057e9 	.word	0x080057e9
 8005798:	08005765 	.word	0x08005765
 800579c:	08005765 	.word	0x08005765
 80057a0:	08005765 	.word	0x08005765
 80057a4:	08005765 	.word	0x08005765
 80057a8:	080058ef 	.word	0x080058ef
 80057ac:	08005815 	.word	0x08005815
 80057b0:	080058a9 	.word	0x080058a9
 80057b4:	08005765 	.word	0x08005765
 80057b8:	08005765 	.word	0x08005765
 80057bc:	08005911 	.word	0x08005911
 80057c0:	08005765 	.word	0x08005765
 80057c4:	08005815 	.word	0x08005815
 80057c8:	08005765 	.word	0x08005765
 80057cc:	08005765 	.word	0x08005765
 80057d0:	080058b1 	.word	0x080058b1
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	1d1a      	adds	r2, r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	602a      	str	r2, [r5, #0]
 80057dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0a0      	b.n	800592a <_printf_i+0x1ee>
 80057e8:	6820      	ldr	r0, [r4, #0]
 80057ea:	682b      	ldr	r3, [r5, #0]
 80057ec:	0607      	lsls	r7, r0, #24
 80057ee:	f103 0104 	add.w	r1, r3, #4
 80057f2:	6029      	str	r1, [r5, #0]
 80057f4:	d501      	bpl.n	80057fa <_printf_i+0xbe>
 80057f6:	681e      	ldr	r6, [r3, #0]
 80057f8:	e003      	b.n	8005802 <_printf_i+0xc6>
 80057fa:	0646      	lsls	r6, r0, #25
 80057fc:	d5fb      	bpl.n	80057f6 <_printf_i+0xba>
 80057fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005802:	2e00      	cmp	r6, #0
 8005804:	da03      	bge.n	800580e <_printf_i+0xd2>
 8005806:	232d      	movs	r3, #45	; 0x2d
 8005808:	4276      	negs	r6, r6
 800580a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800580e:	230a      	movs	r3, #10
 8005810:	4859      	ldr	r0, [pc, #356]	; (8005978 <_printf_i+0x23c>)
 8005812:	e012      	b.n	800583a <_printf_i+0xfe>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	6820      	ldr	r0, [r4, #0]
 8005818:	1d19      	adds	r1, r3, #4
 800581a:	6029      	str	r1, [r5, #0]
 800581c:	0605      	lsls	r5, r0, #24
 800581e:	d501      	bpl.n	8005824 <_printf_i+0xe8>
 8005820:	681e      	ldr	r6, [r3, #0]
 8005822:	e002      	b.n	800582a <_printf_i+0xee>
 8005824:	0641      	lsls	r1, r0, #25
 8005826:	d5fb      	bpl.n	8005820 <_printf_i+0xe4>
 8005828:	881e      	ldrh	r6, [r3, #0]
 800582a:	2f6f      	cmp	r7, #111	; 0x6f
 800582c:	bf0c      	ite	eq
 800582e:	2308      	moveq	r3, #8
 8005830:	230a      	movne	r3, #10
 8005832:	4851      	ldr	r0, [pc, #324]	; (8005978 <_printf_i+0x23c>)
 8005834:	2100      	movs	r1, #0
 8005836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800583a:	6865      	ldr	r5, [r4, #4]
 800583c:	2d00      	cmp	r5, #0
 800583e:	bfa8      	it	ge
 8005840:	6821      	ldrge	r1, [r4, #0]
 8005842:	60a5      	str	r5, [r4, #8]
 8005844:	bfa4      	itt	ge
 8005846:	f021 0104 	bicge.w	r1, r1, #4
 800584a:	6021      	strge	r1, [r4, #0]
 800584c:	b90e      	cbnz	r6, 8005852 <_printf_i+0x116>
 800584e:	2d00      	cmp	r5, #0
 8005850:	d04b      	beq.n	80058ea <_printf_i+0x1ae>
 8005852:	4615      	mov	r5, r2
 8005854:	fbb6 f1f3 	udiv	r1, r6, r3
 8005858:	fb03 6711 	mls	r7, r3, r1, r6
 800585c:	5dc7      	ldrb	r7, [r0, r7]
 800585e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005862:	4637      	mov	r7, r6
 8005864:	42bb      	cmp	r3, r7
 8005866:	460e      	mov	r6, r1
 8005868:	d9f4      	bls.n	8005854 <_printf_i+0x118>
 800586a:	2b08      	cmp	r3, #8
 800586c:	d10b      	bne.n	8005886 <_printf_i+0x14a>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	07de      	lsls	r6, r3, #31
 8005872:	d508      	bpl.n	8005886 <_printf_i+0x14a>
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	6861      	ldr	r1, [r4, #4]
 8005878:	4299      	cmp	r1, r3
 800587a:	bfde      	ittt	le
 800587c:	2330      	movle	r3, #48	; 0x30
 800587e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005882:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005886:	1b52      	subs	r2, r2, r5
 8005888:	6122      	str	r2, [r4, #16]
 800588a:	464b      	mov	r3, r9
 800588c:	4621      	mov	r1, r4
 800588e:	4640      	mov	r0, r8
 8005890:	f8cd a000 	str.w	sl, [sp]
 8005894:	aa03      	add	r2, sp, #12
 8005896:	f7ff fedf 	bl	8005658 <_printf_common>
 800589a:	3001      	adds	r0, #1
 800589c:	d14a      	bne.n	8005934 <_printf_i+0x1f8>
 800589e:	f04f 30ff 	mov.w	r0, #4294967295
 80058a2:	b004      	add	sp, #16
 80058a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	f043 0320 	orr.w	r3, r3, #32
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	2778      	movs	r7, #120	; 0x78
 80058b2:	4832      	ldr	r0, [pc, #200]	; (800597c <_printf_i+0x240>)
 80058b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	6829      	ldr	r1, [r5, #0]
 80058bc:	061f      	lsls	r7, r3, #24
 80058be:	f851 6b04 	ldr.w	r6, [r1], #4
 80058c2:	d402      	bmi.n	80058ca <_printf_i+0x18e>
 80058c4:	065f      	lsls	r7, r3, #25
 80058c6:	bf48      	it	mi
 80058c8:	b2b6      	uxthmi	r6, r6
 80058ca:	07df      	lsls	r7, r3, #31
 80058cc:	bf48      	it	mi
 80058ce:	f043 0320 	orrmi.w	r3, r3, #32
 80058d2:	6029      	str	r1, [r5, #0]
 80058d4:	bf48      	it	mi
 80058d6:	6023      	strmi	r3, [r4, #0]
 80058d8:	b91e      	cbnz	r6, 80058e2 <_printf_i+0x1a6>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	f023 0320 	bic.w	r3, r3, #32
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	2310      	movs	r3, #16
 80058e4:	e7a6      	b.n	8005834 <_printf_i+0xf8>
 80058e6:	4824      	ldr	r0, [pc, #144]	; (8005978 <_printf_i+0x23c>)
 80058e8:	e7e4      	b.n	80058b4 <_printf_i+0x178>
 80058ea:	4615      	mov	r5, r2
 80058ec:	e7bd      	b.n	800586a <_printf_i+0x12e>
 80058ee:	682b      	ldr	r3, [r5, #0]
 80058f0:	6826      	ldr	r6, [r4, #0]
 80058f2:	1d18      	adds	r0, r3, #4
 80058f4:	6961      	ldr	r1, [r4, #20]
 80058f6:	6028      	str	r0, [r5, #0]
 80058f8:	0635      	lsls	r5, r6, #24
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	d501      	bpl.n	8005902 <_printf_i+0x1c6>
 80058fe:	6019      	str	r1, [r3, #0]
 8005900:	e002      	b.n	8005908 <_printf_i+0x1cc>
 8005902:	0670      	lsls	r0, r6, #25
 8005904:	d5fb      	bpl.n	80058fe <_printf_i+0x1c2>
 8005906:	8019      	strh	r1, [r3, #0]
 8005908:	2300      	movs	r3, #0
 800590a:	4615      	mov	r5, r2
 800590c:	6123      	str	r3, [r4, #16]
 800590e:	e7bc      	b.n	800588a <_printf_i+0x14e>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	2100      	movs	r1, #0
 8005914:	1d1a      	adds	r2, r3, #4
 8005916:	602a      	str	r2, [r5, #0]
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	6862      	ldr	r2, [r4, #4]
 800591c:	4628      	mov	r0, r5
 800591e:	f000 f859 	bl	80059d4 <memchr>
 8005922:	b108      	cbz	r0, 8005928 <_printf_i+0x1ec>
 8005924:	1b40      	subs	r0, r0, r5
 8005926:	6060      	str	r0, [r4, #4]
 8005928:	6863      	ldr	r3, [r4, #4]
 800592a:	6123      	str	r3, [r4, #16]
 800592c:	2300      	movs	r3, #0
 800592e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005932:	e7aa      	b.n	800588a <_printf_i+0x14e>
 8005934:	462a      	mov	r2, r5
 8005936:	4649      	mov	r1, r9
 8005938:	4640      	mov	r0, r8
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	47d0      	blx	sl
 800593e:	3001      	adds	r0, #1
 8005940:	d0ad      	beq.n	800589e <_printf_i+0x162>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	079b      	lsls	r3, r3, #30
 8005946:	d413      	bmi.n	8005970 <_printf_i+0x234>
 8005948:	68e0      	ldr	r0, [r4, #12]
 800594a:	9b03      	ldr	r3, [sp, #12]
 800594c:	4298      	cmp	r0, r3
 800594e:	bfb8      	it	lt
 8005950:	4618      	movlt	r0, r3
 8005952:	e7a6      	b.n	80058a2 <_printf_i+0x166>
 8005954:	2301      	movs	r3, #1
 8005956:	4632      	mov	r2, r6
 8005958:	4649      	mov	r1, r9
 800595a:	4640      	mov	r0, r8
 800595c:	47d0      	blx	sl
 800595e:	3001      	adds	r0, #1
 8005960:	d09d      	beq.n	800589e <_printf_i+0x162>
 8005962:	3501      	adds	r5, #1
 8005964:	68e3      	ldr	r3, [r4, #12]
 8005966:	9903      	ldr	r1, [sp, #12]
 8005968:	1a5b      	subs	r3, r3, r1
 800596a:	42ab      	cmp	r3, r5
 800596c:	dcf2      	bgt.n	8005954 <_printf_i+0x218>
 800596e:	e7eb      	b.n	8005948 <_printf_i+0x20c>
 8005970:	2500      	movs	r5, #0
 8005972:	f104 0619 	add.w	r6, r4, #25
 8005976:	e7f5      	b.n	8005964 <_printf_i+0x228>
 8005978:	08006a68 	.word	0x08006a68
 800597c:	08006a79 	.word	0x08006a79

08005980 <memmove>:
 8005980:	4288      	cmp	r0, r1
 8005982:	b510      	push	{r4, lr}
 8005984:	eb01 0402 	add.w	r4, r1, r2
 8005988:	d902      	bls.n	8005990 <memmove+0x10>
 800598a:	4284      	cmp	r4, r0
 800598c:	4623      	mov	r3, r4
 800598e:	d807      	bhi.n	80059a0 <memmove+0x20>
 8005990:	1e43      	subs	r3, r0, #1
 8005992:	42a1      	cmp	r1, r4
 8005994:	d008      	beq.n	80059a8 <memmove+0x28>
 8005996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800599a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800599e:	e7f8      	b.n	8005992 <memmove+0x12>
 80059a0:	4601      	mov	r1, r0
 80059a2:	4402      	add	r2, r0
 80059a4:	428a      	cmp	r2, r1
 80059a6:	d100      	bne.n	80059aa <memmove+0x2a>
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059b2:	e7f7      	b.n	80059a4 <memmove+0x24>

080059b4 <_sbrk_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	2300      	movs	r3, #0
 80059b8:	4d05      	ldr	r5, [pc, #20]	; (80059d0 <_sbrk_r+0x1c>)
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	f7fc fd90 	bl	80024e4 <_sbrk>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_sbrk_r+0x1a>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_sbrk_r+0x1a>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	20001714 	.word	0x20001714

080059d4 <memchr>:
 80059d4:	4603      	mov	r3, r0
 80059d6:	b510      	push	{r4, lr}
 80059d8:	b2c9      	uxtb	r1, r1
 80059da:	4402      	add	r2, r0
 80059dc:	4293      	cmp	r3, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	d101      	bne.n	80059e6 <memchr+0x12>
 80059e2:	2000      	movs	r0, #0
 80059e4:	e003      	b.n	80059ee <memchr+0x1a>
 80059e6:	7804      	ldrb	r4, [r0, #0]
 80059e8:	3301      	adds	r3, #1
 80059ea:	428c      	cmp	r4, r1
 80059ec:	d1f6      	bne.n	80059dc <memchr+0x8>
 80059ee:	bd10      	pop	{r4, pc}

080059f0 <_realloc_r>:
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	4680      	mov	r8, r0
 80059f6:	4614      	mov	r4, r2
 80059f8:	460e      	mov	r6, r1
 80059fa:	b921      	cbnz	r1, 8005a06 <_realloc_r+0x16>
 80059fc:	4611      	mov	r1, r2
 80059fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a02:	f7ff bc45 	b.w	8005290 <_malloc_r>
 8005a06:	b92a      	cbnz	r2, 8005a14 <_realloc_r+0x24>
 8005a08:	f7ff fbda 	bl	80051c0 <_free_r>
 8005a0c:	4625      	mov	r5, r4
 8005a0e:	4628      	mov	r0, r5
 8005a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a14:	f000 f81b 	bl	8005a4e <_malloc_usable_size_r>
 8005a18:	4284      	cmp	r4, r0
 8005a1a:	4607      	mov	r7, r0
 8005a1c:	d802      	bhi.n	8005a24 <_realloc_r+0x34>
 8005a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a22:	d812      	bhi.n	8005a4a <_realloc_r+0x5a>
 8005a24:	4621      	mov	r1, r4
 8005a26:	4640      	mov	r0, r8
 8005a28:	f7ff fc32 	bl	8005290 <_malloc_r>
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d0ed      	beq.n	8005a0e <_realloc_r+0x1e>
 8005a32:	42bc      	cmp	r4, r7
 8005a34:	4622      	mov	r2, r4
 8005a36:	4631      	mov	r1, r6
 8005a38:	bf28      	it	cs
 8005a3a:	463a      	movcs	r2, r7
 8005a3c:	f7ff fbb2 	bl	80051a4 <memcpy>
 8005a40:	4631      	mov	r1, r6
 8005a42:	4640      	mov	r0, r8
 8005a44:	f7ff fbbc 	bl	80051c0 <_free_r>
 8005a48:	e7e1      	b.n	8005a0e <_realloc_r+0x1e>
 8005a4a:	4635      	mov	r5, r6
 8005a4c:	e7df      	b.n	8005a0e <_realloc_r+0x1e>

08005a4e <_malloc_usable_size_r>:
 8005a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a52:	1f18      	subs	r0, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bfbc      	itt	lt
 8005a58:	580b      	ldrlt	r3, [r1, r0]
 8005a5a:	18c0      	addlt	r0, r0, r3
 8005a5c:	4770      	bx	lr
	...

08005a60 <_init>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	bf00      	nop
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr

08005a6c <_fini>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr
